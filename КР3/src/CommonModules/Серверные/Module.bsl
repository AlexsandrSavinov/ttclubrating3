
Процедура УстановитьФормулы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ФормулыРасчетаРейтингаСрезПоследних.ТипПрироста,
	|	ФормулыРасчетаРейтингаСрезПоследних.Формула
	|ИЗ
	|	РегистрСведений.ФормулыРасчетаРейтинга.СрезПоследних КАК ФормулыРасчетаРейтингаСрезПоследних
	|ГДЕ
	|	ФормулыРасчетаРейтингаСрезПоследних.ТипПрироста = ЗНАЧЕНИЕ(Перечисление.ТипыПриростов.ПриростВыигравшего)";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Запись = РегистрыСведений.ФормулыРасчетаРейтинга.СоздатьМенеджерЗаписи();
		Запись.Период = '20091219';
		Запись.ТипПрироста = Перечисления.ТипыПриростов.ПриростВыигравшего;
		Запись.Формула = "(100 - (РТв - РТп))/10";
		Запись.Записать();		
	КонецЕсли;
	//формула для проигравшего
	Запрос.Текст = "ВЫБРАТЬ
	|	ФормулыРасчетаРейтингаСрезПоследних.ТипПрироста,
	|	ФормулыРасчетаРейтингаСрезПоследних.Формула
	|ИЗ
	|	РегистрСведений.ФормулыРасчетаРейтинга.СрезПоследних КАК ФормулыРасчетаРейтингаСрезПоследних
	|ГДЕ
	|	ФормулыРасчетаРейтингаСрезПоследних.ТипПрироста = ЗНАЧЕНИЕ(Перечисление.ТипыПриростов.ПриростПроигравшего)";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Запись = РегистрыСведений.ФормулыРасчетаРейтинга.СоздатьМенеджерЗаписи();
		Запись.Период = '20091219';
		Запись.ТипПрироста = Перечисления.ТипыПриростов.ПриростПроигравшего;
		Запись.Формула = " -(100 - (РТв - РТп))/20";
		Запись.Записать();		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура УстановитьСортировкуВСетках() Экспорт
	
	Если Константы.НумерацияУчастниковВСетке.Получить() = Перечисления.НумерацияВСетке.ПустаяСсылка() Тогда
		Константы.НумерацияУчастниковВСетке.Установить(Перечисления.НумерацияВСетке.ПоПорядку);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаПользователя(Имя) Экспорт
	
	Если ЗначениеЗаполнено(Имя) Тогда
		ИскомыйПользователь = Справочники.Пользователи.НайтиПоНаименованию(Имя);
		Если ИскомыйПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
			НовЭлемент = Справочники.Пользователи.СоздатьЭлемент();
			НовЭлемент.Наименование = Имя;
			НовЭлемент.Записать();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Добавлен новый пользователь "+Имя;
			Сообщение.Сообщить(); 
			ПараметрыСеанса.ТекПользователь = НовЭлемент.Ссылка;
		Иначе
			ПараметрыСеанса.ТекПользователь = ИскомыйПользователь;
		КонецЕсли;
	Иначе
		ПараметрыСеанса.ТекПользователь = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекущийРейтингУчастника(Участник,Дата = Неопределено,ВидРейтинга = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РейтингУчастниковСрезПоследних.Участник,
	|	РейтингУчастниковСрезПоследних.Рейтинг
	|ИЗ
	|	РегистрСведений.РейтингУчастников.СрезПоследних(
	|			&ТекДата,
	|			Участник = &Участник
	|				И ВидРейтинга = &ВидРейтинга) КАК РейтингУчастниковСрезПоследних";
	Запрос.УстановитьПараметр("Участник",Участник);
	Запрос.УстановитьПараметр("ТекДата",?(Дата = Неопределено,ТекущаяДата(),Дата));
	Запрос.УстановитьПараметр("ВидРейтинга",?(ВидРейтинга = Неопределено,Справочники.ВидыРейтинга.ПустаяСсылка(),ВидРейтинга));
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Рейтинг;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРазрядЗваниеУчастника(Участник,Дата = Неопределено)  Экспорт 
	
	//заполним разряд участника
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РазрядыУчастниковСрезПоследних.Участник,
	|	РазрядыУчастниковСрезПоследних.Разряд,
	|	РазрядыУчастниковСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.РазрядыУчастников.СрезПоследних(&Период, Участник = &СсылкаУчастник) КАК РазрядыУчастниковСрезПоследних";
	//всегда будем получать на текующую дату
	Запрос.УстановитьПараметр("Период",?(Дата = Неопределено,ТекущаяДата(),Дата));
	Запрос.УстановитьПараметр("СсылкаУчастник",Участник);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Возврат Строка(Результат[0].Разряд) + " получен " + Формат(Результат[0].Период,"ДЛФ=DD"); 
	Иначе
		Возврат "Присвоить разряд";
	КонецЕсли;
		
КонецФункции

Функция ПолучитьВерсиюПриложения() Экспорт
	
	Возврат Метаданные.Версия;
	
КонецФункции

Функция ВыполнитьПроцедурыИФункцииПриНачалеРаботыСистемы() Экспорт
	
	Данные = Новый Структура;
	
	УстановитьФормулы();
	ПроверкаПользователя(ИмяПользователя());
	УстановитьСортировкуВСетках();
	ПроверитьУстановкуПорядкаИгр();
	
	ОбновлениеИБ.ПроверкаНаНовуюВерсиюПрограммы();
	
	Данные.Вставить("ПроверкаСразу",Константы.ПроверятьОбновлениеПрограммы.Получить());
	ТекстЗаголовка = "";
	ТекущаяВерсияПрограммы = ПолучитьВерсиюПриложения();
	Если ПараметрыСеанса.ТекПользователь = Справочники.Пользователи.ПустаяСсылка() Или 
		ПараметрыСеанса.ТекПользователь = Неопределено Тогда
		ТекстЗаголовка = "Клубный рейтинг для настольного тенниса v."+ТекущаяВерсияПрограммы;
	Иначе
		ТекстЗаголовка = "Клубный рейтинг для настольного тенниса v."+ТекущаяВерсияПрограммы+" / "+Строка(ПараметрыСеанса.ТекПользователь)+" /";
	КонецЕсли;
	ТекстВКонстанте = Константы.ЗаголовокОкна.Получить();
	Если ТекстВКонстанте <> ""  Тогда
		ТекстЗаголовка = ТекстВКонстанте;	
	КонецЕсли; 
	Данные.Вставить("ЗаголовокПриложения",ТекстЗаголовка);
	
	Возврат Данные;
	
КонецФункции

Процедура ПроверитьУстановкуПорядкаИгр()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПорядокИгр.РежимТура,
	|	ПорядокИгр.КоличествоУчастников,
	|	ПорядокИгр.ПриоритетВызова,
	|	ПорядокИгр.НомерИгры
	|ИЗ
	|	РегистрСведений.ПорядокИгр КАК ПорядокИгр";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Набор = РегистрыСведений.ПорядокИгр.ЗагрузитьПорядокИгрВМодуле();
		Набор.Записать();
	КонецЕсли; 
	
КонецПроцедуры

Функция СоздатьТренера(ИмяТренера) Экспорт
	
	Искомый = Справочники.Тренеры.НайтиПоНаименованию(ИмяТренера);
	Если Искомый = Справочники.Тренеры.ПустаяСсылка() Тогда
		НовЭлемент = Справочники.Тренеры.СоздатьЭлемент();
		НовЭлемент.Наименование = ИмяТренера;
		НовЭлемент.Записать();
	 	Возврат НовЭлемент;
	Иначе
		Возврат Искомый;
	КонецЕсли; 
	
КонецФункции
 
Функция СоздатьУчастника(ТекДанные,НовЗначКлуб,НовЗначГорода,НовТренер,ГруппаСправочника) Экспорт
	
	//попробуем найти
	ТекИмя = СокрЛП(ТекДанные.ФИО);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Участники.Наименование,
	|	Участники.ДатаРождения,
	|	Участники.Ссылка
	|ИЗ
	|	Справочник.Участники КАК Участники
	|ГДЕ
	|	Участники.ДатаРождения = &Дата
	|	И Участники.Наименование = &Фамилия";
	Запрос.УстановитьПараметр("Фамилия",ТекИмя);
	Запрос.УстановитьПараметр("Дата",ТекДанные.ДатаРождения);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		//создаем элемент справочника
		НовЭлемент = Справочники.Участники.СоздатьЭлемент();
		Если ЗначениеЗаполнено(ГруппаСправочника) Тогда
			НовЭлемент.Родитель = ГруппаСправочника;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НовЭлемент,ТекДанные);
		НовЭлемент.Наименование 	= ТекИмя;		
		НовЭлемент.Пол 						= ТекДанные.Пол;
		НовЭлемент.Город						= НовЗначГорода;
		НовЭлемент.Клуб						= НовЗначКлуб;
		НовЭлемент.Тренер					= НовТренер;
		НовЭлемент.Записать();
		Возврат НовЭлемент.Ссылка;
	Иначе
		Возврат Результат[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СоздатьКлуб(НазваниеКлуба) Экспорт
	
	НазваниеКлуба = СокрЛП(НазваниеКлуба);
	Искомый = Справочники.Клубы.НайтиПоНаименованию(НазваниеКлуба);
	Если Искомый = Справочники.Клубы.ПустаяСсылка() Тогда
		НовыйКлуб = Справочники.Клубы.СоздатьЭлемент();
		НовыйКлуб.Наименование = НазваниеКлуба;
		НовыйКлуб.Записать();
		Возврат НовыйКлуб.Ссылка;
	Иначе
		Возврат Искомый.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СоздатьГород(стрГород) Экспорт
	
	Искомый = Справочники.Города.НайтиПоНаименованию(стрГород);
	Если Искомый = Справочники.Города.ПустаяСсылка() Тогда
		НовыйГород = Справочники.Города.СоздатьЭлемент();
		НовыйГород.Наименование = стрГород;
		НовыйГород.Записать();
		Возврат НовыйГород.Ссылка;
	Иначе
		Возврат Искомый.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьВсеТекущиеВстречи(ИДФормы = "") Экспорт
	
	Если ИДФормы = "" Тогда
		Выборка = РегистрыСведений.ТекущиеВстречи.Выбрать();
	Иначе
		Выборка = РегистрыСведений.ТекущиеВстречи.Выбрать(Новый Структура("ИДФормы",Строка(ИДФормы)));
	КонецЕсли; 
	Пока Выборка.Следующий() Цикл
		МЗ = Выборка.ПолучитьМенеджерЗаписи();
		МЗ.Удалить();
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПоказатьВстречуВСписке(Данные) Экспорт
	РегистрыСведений.ТекущиеВстречи.ДобавитьВстречуЗаСтол(Данные);
КонецПроцедуры 

Процедура УдалитьВстречуВСписке(Данные) Экспорт
	РегистрыСведений.ТекущиеВстречи.УдалитьВстречуЗаСтолом(Данные);
КонецПроцедуры

Функция ПолучитьСписокЗанятыхСтолов() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТекущиеВстречи.НомерСтола
	|ИЗ
	|	РегистрСведений.ТекущиеВстречи КАК ТекущиеВстречи
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеВстречи.НомерСтола";
	Результат = Запрос.Выполнить().Выгрузить();
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("НомерСтола"));
	
	Возврат Список;
	
КонецФункции

//	Преобразует таблицу значений в массив.
//	Может использоваться для передачи на клиента данных, полученных
//	на сервере в виде таблицы значений в том случае, если таблица
//	значений содержит только такие значения, которые могут
//  быть переданы на клиента
//
//	Полученный массив содержит структуры, каждая из которых повторяет
//	структуру колонок таблицы значений.
//
//	Не рекомендуется использовать для преобразования таблиц значений
//	с большим количеством строк.
//
//	Параметры: 
//    ТаблицаЗначений - ТаблицаЗначений
//
//	Возвращаемое значение: 
//    Массив
//
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

Функция ПолучитьТренеровУчастникаСписком(ТекУчастник) Экспорт
	
	Список = "";
	Если ТекУчастник.Тренеры.Количество() > 0 Тогда
		Для каждого ТекСтр Из ТекУчастник.Тренеры Цикл
			Список = Список + Строка(ТекСтр.Тренер)+",";	
		КонецЦикла; 
		Список = Сред(Список,1,СтрДлина(Список)-1);
	Иначе
		Список = Строка(ТекУчастник.Тренер);
	КонецЕсли; 
	
	Возврат Список;
	 
КонецФункции

Процедура УстановитьПараметрыСеанса() Экспорт
	
	//Попытка
	//	ИмяФайла = ПолучитьИмяВременногоФайла(".txt");
	//	Соединение = Новый HTTPСоединение("www.ttmarket.su");
	//	Соединение.Получить("promo.txt",ИмяФайла);
	//	ТекстовыйФайл = Новый ТекстовыйДокумент;
	//	ТекстовыйФайл.Прочитать(ИмяФайла);
	//	ПараметрыСеанса.ОписаниеДляМагазина = ТекстовыйФайл.ПолучитьТекст();
	//	УдалитьФайлы(ИмяФайла);
	//Исключение
	//	ПараметрыСеанса.ОписаниеДляМагазина = "";
	//КонецПопытки;

КонецПроцедуры

Функция ПроверкаВерсииПлатформы() Экспорт
	
	СистемнаяИнф = Новый СистемнаяИнформация;
	МинимальнаяПлатформа = "8.3.15.1489";
	ТекущаяПлатформа 	= СистемнаяИнф.ВерсияПриложения;
	МассивДляПроверкиМинимальной = СтрРазделить(МинимальнаяПлатформа,".");
	МассивДляПроверкиТекущей	 = СтрРазделить(ТекущаяПлатформа,".");
	
	Попытка
		Если Число(МассивДляПроверкиТекущей[0]) >= Число(МассивДляПроверкиМинимальной[0])
			И Число(МассивДляПроверкиТекущей[1]) >= Число(МассивДляПроверкиМинимальной[1]) 
			И Число(МассивДляПроверкиТекущей[2]) >= Число(МассивДляПроверкиМинимальной[2]) Тогда
			//последний разряд проверять не будем
			Возврат "";
		Иначе
			Возврат "Рекомендуемаея версия платформы "+ МинимальнаяПлатформа + " или выше !
			|Программа может работать не корректно.";
		КонецЕсли; 	
	Исключение
		Возврат "";	
	КонецПопытки;  
	
КонецФункции

Функция ПолучитьРежимОткрытияФормыПодбора() Экспорт
	
	СпособОткрытия = Константы.СпособОткрытияПодбора.Получить();
	Если ЗначениеЗаполнено(СпособОткрытия) Тогда
		Если СпособОткрытия = "В отдельной вкладке" Тогда
			Возврат РежимОткрытияОкнаФормы.Независимый;
		ИначеЕсли СпособОткрытия = "В отдельном окне" Тогда 
			Возврат РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		КонецЕсли; 
	Иначе
		Возврат РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли; 
	
КонецФункции

Функция ДанныеКПрограммеДляСохраненияВPNG() Экспорт
	
	ПараметрыПрограммы = Новый Структура;
	ПараметрыПрограммы.Вставить("ПутьКПрограмме", Константы.ПутьКwkhtmltoimage_exe.Получить());
	мКачество = Константы.КачествоКартинки.Получить();
	ПараметрыПрограммы.Вставить("КачествоКартинки", ?(мКачество = 0, 50, мКачество));
	
	Возврат ПараметрыПрограммы;
	
КонецФункции

Функция ПолучитьЗаголовокПоСоревнованию(СсылкаНаДокумент) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент.НазваниеСоревнования) Тогда
		Возврат Строка(СсылкаНаДокумент.НазваниеСоревнования);
	Иначе
		Возврат Строка(СсылкаНаДокумент);
	КонецЕсли; 
	
КонецФункции

Функция СформироватьИмяДляСохранения(СсылкаНаДокумент) Экспорт
	
	НазваниеСоревнования = ПолучитьЗаголовокПоСоревнованию(СсылкаНаДокумент);
	
	мЗаголовок = СтрЗаменить(НазваниеСоревнования,".","_");
	мЗаголовок = СтрЗаменить(мЗаголовок,":","_");
	Возврат мЗаголовок;
	
КонецФункции 

Функция ЗначениеРеквизитаИзСсылки(Ссылка, ИмяРеквизита) Экспорт
	Возврат Ссылка[ИмяРеквизита];
КонецФункции

Функция Транслитерация(Вход) Экспорт 
    Коды = Новый Соответствие;
    Коды.Вставить("ё","yo");
    Коды.Вставить("Ё","Yo");
    Нач = КодСимвола("А");
    Англ = "A" "B" "V" "G" "D" "E" "Zh" "Z" "I" "Y" "K" "L" "M" "N" "O" "P" "R" "S" "T" "U" "F" "Kh" "Ts" "Ch" "Sh" "Shch" "" "Y" "" "E" "Yu" "Ya" "a" "b" "v" "g" "d" "e" "zh" "z" "i" "y" "k" "l" "m" "n" "o" "p" "r" "s" "t" "u" "f" "kh" "ts" "ch" "sh" "shch" "" "y" "" "e" "yu" "ya";
    Для К = Нач по КодСимвола("я") Цикл
        Коды.Вставить(Символ(К), СтрПолучитьСтроку(Англ, К - Нач + 1));
    КонецЦикла;
    Выход = "";
    Для К=1 по СтрДлина(Вход) Цикл
        Бкв = Сред(Вход,К,1);
        Зн = Коды.Получить(Бкв);
        Выход = Выход + ?(Зн = Неопределено, Бкв, Зн);
    КонецЦикла;
    Возврат Выход;
КонецФункции

