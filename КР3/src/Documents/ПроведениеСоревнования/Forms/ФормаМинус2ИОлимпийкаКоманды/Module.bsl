&НаКлиенте
Перем глСписокПоследнихИгр;
&НаСервере
Перем глТаблицаИгроков; //для заполнения при открытии игроков
&НаКлиенте
Перем глСтароеЗначениеКолонки;
&НаКлиенте 
Перем глУчастник1, глУчастник2;
&НаКлиенте
Перем мЗакрытиеФормы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПеремОбъектДокумента = ДанныеФормыВЗначение(Параметры.ОбъектДок,Тип("ДокументОбъект.ПроведениеСоревнования")); 
	ЗначениеВРеквизитФормы(ПеремОбъектДокумента,"СсылкаНаДок");
	НомерТура   = Параметры.НомерТура;
	РежимТура   = Параметры.РежимТура;
	КолПартий	= Параметры.КолПартий;
	
	ВидСоревнований = Параметры.ВидСоревнований;
	ЖеребьевкаКоманд = Параметры.ЖеребьевкаКоманд;
	КоличествоПобедВКоманднойИгре = ЖеребьевкаКоманд.КоличествоПобед;
	
	КолСтолов = СсылкаНаДок.КолСтолов;
		
	Отбор = Новый Структура;
	Отбор.Вставить("РежимТура",РежимТура);
	Отбор.Вставить("НомерТура",НомерТура);
	МассивКомандТура = СсылкаНаДок.КомандыПоЖеребьевке.НайтиСтроки(Отбор);
	ЗаполнениеСоответствийИгроков(МассивКомандТура);
		
	КолУчастниковКоманд = МассивКомандТура.Количество();
	Если РежимТура = Перечисления.РежимыТуровСоревнования.МинусДва Тогда
		Если КолУчастниковКоманд >= 4 И КолУчастниковКоманд <= 8 Тогда //схема 8
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На8");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На8");
			ИмяМакета = "Минус2На8";
			НумерацияИгроков = 8;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр8(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,8);
		ИначеЕсли КолУчастниковКоманд > 8 И КолУчастниковКоманд <= 16 Тогда //схема на 16
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На16");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На16");
			ИмяМакета = "Минус2На16"; 
			НумерацияИгроков = 16;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр16(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,16);
		ИначеЕсли КолУчастниковКоманд > 16 И КолУчастниковКоманд <= 24 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На24");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На24");
			ИмяМакета = "Минус2На24";
			НумерацияИгроков = 24;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр24(СоответствияИгр,РежимТура,СсылкаНаДок.НумерацияВСетке);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,24);
		ИначеЕсли КолУчастниковКоманд > 24 И КолУчастниковКоманд <= 32 Тогда
			ПрямойСнос = Константы.Сетка32ПрямойСнос.Получить();
			Если ПрямойСнос Тогда
				МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На32ПрямойСнос");
				Область = МакетТабДока.ПолучитьОбласть("Минус2На32");
				ИмяМакета = "Минус2На32ПрямойСнос";
				НумерацияИгроков = 32;
				Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр32ПрямойСнос(СоответствияИгр,РежимТура);
				Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,32);
			Иначе
				МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На32");
				Область = МакетТабДока.ПолучитьОбласть("Минус2На32");
				ИмяМакета = "Минус2На32";
				НумерацияИгроков = 32;
				Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр32(СоответствияИгр,РежимТура);
				Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,32);
			КонецЕсли;
		ИначеЕсли КолУчастниковКоманд > 32 И КолУчастниковКоманд <= 48 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На48");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На48");
			ИмяМакета = "Минус2На48";
			НумерацияИгроков = 48;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр48(СоответствияИгр,РежимТура,СсылкаНаДок.НумерацияВСетке);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,48);
		ИначеЕсли КолУчастниковКоманд > 48 И КолУчастниковКоманд <= 64 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На64");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На64");
			ИмяМакета = "Минус2На64";
			НумерацияИгроков = 64;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр64(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,64);
		КонецЕсли;
	ИначеЕсли РежимТура = Перечисления.РежимыТуровСоревнования.Олимпийка Тогда
		Если КолУчастниковКоманд >= 4 И КолУчастниковКоманд <= 8 Тогда //схема 8
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа8");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа8");
			ИмяМакета = "ОлимпийкаНа8"; 
			НумерацияИгроков = 8;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр8(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,8);
		ИначеЕсли КолУчастниковКоманд > 8 И КолУчастниковКоманд <= 16 Тогда //схема на 16
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа16");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа16");
			ИмяМакета = "ОлимпийкаНа16";
			НумерацияИгроков = 16;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр16(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,16);
		ИначеЕсли КолУчастниковКоманд > 16 И КолУчастниковКоманд <= 24 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа24");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа24");
			ИмяМакета = "ОлимпийкаНа24";
			НумерацияИгроков = 24;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр24(СоответствияИгр,РежимТура,СсылкаНаДок.НумерацияВСетке);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,24);
		ИначеЕсли КолУчастниковКоманд > 24 И КолУчастниковКоманд <= 32 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа32");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа32");
			ИмяМакета = "ОлимпийкаНа32";
			НумерацияИгроков = 32;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр32(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,32);
		ИначеЕсли КолУчастниковКоманд > 32 И КолУчастниковКоманд <= 64 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа64");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа64");
			ИмяМакета = "ОлимпийкаНа64";
			НумерацияИгроков = 64;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр64(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,64);
		КонецЕсли;
	ИначеЕсли РежимТура = Перечисления.РежимыТуровСоревнования.Прогрессивная Тогда
		Если КолУчастниковКоманд >= 4 И КолУчастниковКоманд <= 8 Тогда //схема 8
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ПрогрессивнаяНа8");
			Область = МакетТабДока.ПолучитьОбласть("ПрогрессивнаяНа8");
			НумерацияИгроков = 8;
			ИмяМакета = "ПрогрессивнаяНа8"; 
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр8ПрогрессивнаяСетка(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,8);
		ИначеЕсли КолУчастниковКоманд > 8 И КолУчастниковКоманд <= 16 Тогда //схема на 16
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ПрогрессивнаяНа16");
			Область = МакетТабДока.ПолучитьОбласть("ПрогрессивнаяНа16");
			ИмяМакета = "ПрогрессивнаяНа16";
			НумерацияИгроков = 16;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр16ПрогрессивнаяСетка(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,16);
		ИначеЕсли КолУчастниковКоманд > 16 И КолУчастниковКоманд <= 24 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ПрогрессивнаяНа24");
			Область = МакетТабДока.ПолучитьОбласть("ПрогрессивнаяНа24");
			ИмяМакета = "ПрогрессивнаяНа24";
			НумерацияИгроков = 24;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр24ПрогрессивнаяСетка(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,24);
		ИначеЕсли КолУчастниковКоманд > 24 И КолУчастниковКоманд <= 32 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ПрогрессивнаяНа32");
			Область = МакетТабДока.ПолучитьОбласть("ПрогрессивнаяНа32");
			ИмяМакета = "ПрогрессивнаяНа32";
			НумерацияИгроков = 32;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр32ПрогрессивнаяСетка(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,32);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	ТекстЗаголовка = "Тур № "+НомерТура+" "+Строка(СсылкаНаДок.НазваниеСоревнования)+", "+Параметры.Коммент; 
	ЭтотОбъект.Заголовок = ТекстЗаголовка;
	//заголовок области
	Если Параметры.Коммент = "" Тогда //заполняем из названия соревнования
		ТекстЗаголовкаТабДока = Строка(СсылкаНаДок.НазваниеСоревнования);
	Иначе
		ТекстЗаголовкаТабДока = Параметры.Коммент;
	КонецЕсли;
	//заголовок
	мДопИнфа = "от "+Формат(СсылкаНаДок.Дата,"ДЛФ=DD")+" "+Параметры.Коммент+" "+СсылкаНаДок.ДопИнф;
	МакетЗаголовкаИПодвала = Документы.ПроведениеСоревнования.ПолучитьМакет("ТаблицаГрупп");
	ОбластьЗаголовка = Документы.ПроведениеСоревнования.ПолучитьОбластьЗаголовка(СсылкаНаДок.НазваниеСоревнования,мДопИнфа);
	ТабДок.Вывести(ОбластьЗаголовка);
	//основная часть
	ЗаполнениеТаблицУчастниковИИгр(Область);
	ТабДок.Вывести(Область);
	//подвал
	Если ЗначениеЗаполнено(СсылкаНаДок.ГлавныйСудья) Или ЗначениеЗаполнено(СсылкаНаДок.Секретарь) Тогда
		ОбластьПодвал = МакетЗаголовкаИПодвала.ПолучитьОбласть("Подвал");
		Если ЗначениеЗаполнено(СсылкаНаДок.ГлавныйСудья) Тогда
			ОбластьПодвал.Параметры.глСудья = ОбщийКлиентСервер.СформироватьИмяИгрока(СсылкаНаДок.ГлавныйСудья);
		КонецЕсли;
		Если ЗначениеЗаполнено(СсылкаНаДок.Секретарь) Тогда
			ОбластьПодвал.Параметры.Секретарь = ОбщийКлиентСервер.СформироватьИмяИгрока(СсылкаНаДок.Секретарь);
		КонецЕсли;
		ТабДок.Вывести(ОбластьПодвал);
	КонецЕсли;
	//ЗаполнитьЗаголовокСпискаИгр();
	
	//устанавливаем видимость партиям
	Для Н = 1  По КолПартий Цикл
		Элементы["ТаблицаПартийИгра"+Н].Видимость = Истина;
	КонецЦикла; 
	Элементы.ТаблицаПартийОбщийРезультат1.МаксимальноеЗначение = ОпределитьКолПартийНаСервере();
	Элементы.ТаблицаПартийОбщийРезультат2.МаксимальноеЗначение = ОпределитьКолПартийНаСервере();
	
	//ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина; 
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ПолеСправа = 5;
	//ТаблицаОбщихДанных.Сортировать("НомерГруппы ВОЗР");
	
	Элементы.ТаблицаПартий.Высота = ЖеребьевкаКоманд.ПорядокВстреч.Количество()+4;
	
	//ЗаполнитьМониторингИгр();
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнениеСоответствийИгроков(мКоманды)
	
	ВыводитьРейтингВТаблицу = Константы.ВыводитьРейтинг.Получить();
	Для Каждого ТекИгрок Из мКоманды Цикл
		//Если ТекИгрок.НомерГруппы <> 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		НовСтрока = СоответствияИгроков.Добавить();
		НовСтрока.ПредставлениеИгрока = ТекИгрок.НазваниеКоманды;
		НовСтрока.НазваниеКоманды = ТекИгрок.НазваниеКоманды;
		НовСтрока.ПредставлениеВСетке =  Строка(ТекИгрок.НазваниеКоманды)+?(ВыводитьРейтингВТаблицу,"("+ТекИгрок.ТекущийРейтинг+")","");			
	КонецЦикла;
	
КонецПроцедуры

//ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ
&НаСервере
Процедура ЗаполнениеТаблицУчастниковИИгр(Область)
	
	//заполним участников из тч Участники по жеребьевке
	ЗаполнитьКомандыВТаблице(Область);
	//найдем все данные по играм и заполним их
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ Общая Из &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",СсылкаНаДок.ОбщаяТаблицаДанныхПоКомандам.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ втОбщиеДанные Из &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",ВсяТаблицаОбщихДанных.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерГруппы КАК НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.КолШаров,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ОчкиВыигравшего) КАК ОчкиВыигравшего,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ОчкиПроигравшего) КАК ОчкиПроигравшего,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеП
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	Общая КАК ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам
	|ГДЕ
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерТура = &НомТура
	|	И ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.РежимТура = &РежимТура
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.КолШаров,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеП,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.КолШаров,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ОчкиВыигравшего),
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ОчкиПроигравшего),
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеП
	|ИЗ
	|	втОбщиеДанные КАК ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.КолШаров,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеП,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.НомерТура,
	|	ТЗ.РежимТура,
	|	ТЗ.НомерГруппы,
	|	ТЗ.Команда1,
	|	ТЗ.Участник1,
	|	ТЗ.Расстановка1,
	|	ТЗ.Команда2,
	|	ТЗ.Участник2,
	|	ТЗ.Расстановка2,
	|	ТЗ.НомерСета,
	|	ТЗ.КолШаров,
	|	ТЗ.ОчкиВыигравшего,
	|	ТЗ.ОчкиПроигравшего,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.ТехническоеП
	|ПОМЕСТИТЬ ТаблицаГруппировка
	|ИЗ
	|	ТЗ КАК ТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ.ОчкиПроигравшего,
	|	ТЗ.ТехническоеП,
	|	ТЗ.РежимТура,
	|	ТЗ.НомерТура,
	|	ТЗ.НомерГруппы,
	|	ТЗ.Команда1,
	|	ТЗ.Участник1,
	|	ТЗ.Расстановка1,
	|	ТЗ.Команда2,
	|	ТЗ.Участник2,
	|	ТЗ.Расстановка2,
	|	ТЗ.НомерСета,
	|	ТЗ.ОчкиВыигравшего,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.КолШаров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаГруппировка.НомерТура,
	|	ТаблицаГруппировка.РежимТура,
	|	ТаблицаГруппировка.НомерГруппы,
	|	ТаблицаГруппировка.Команда1,
	|	ТаблицаГруппировка.Команда2,
	|	СУММА(ТаблицаГруппировка.ОчкиВыигравшего) КАК ОчкиВыигравшего,
	|	СУММА(ТаблицаГруппировка.ОчкиПроигравшего) КАК ОчкиПроигравшего,
	|	ТаблицаГруппировка.ТехническоеВ,
	|	ТаблицаГруппировка.ТехническоеП
	|ПОМЕСТИТЬ ТаблицаССуммамиИтогов
	|ИЗ
	|	ТаблицаГруппировка КАК ТаблицаГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаГруппировка.НомерТура,
	|	ТаблицаГруппировка.РежимТура,
	|	ТаблицаГруппировка.НомерГруппы,
	|	ТаблицаГруппировка.Команда1,
	|	ТаблицаГруппировка.Команда2,
	|	ТаблицаГруппировка.ТехническоеВ,
	|	ТаблицаГруппировка.ТехническоеП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаССуммамиИтогов.НомерТура,
	|	ТаблицаССуммамиИтогов.РежимТура,
	|	ТаблицаССуммамиИтогов.НомерГруппы,
	|	ТаблицаССуммамиИтогов.Команда1,
	|	ТаблицаССуммамиИтогов.Команда2,
	|	ТаблицаССуммамиИтогов.ОчкиВыигравшего КАК Итог1,
	|	ТаблицаССуммамиИтогов.ОчкиПроигравшего КАК Итог2,
	|	ТаблицаССуммамиИтогов.ТехническоеВ,
	|	ТаблицаССуммамиИтогов.ТехническоеП
	|ИЗ
	|	ТаблицаССуммамиИтогов КАК ТаблицаССуммамиИтогов
	|ГДЕ
	|	(ТаблицаССуммамиИтогов.ОчкиВыигравшего = &МаксимальныйИтог
	|			ИЛИ ТаблицаССуммамиИтогов.ОчкиПроигравшего = &МаксимальныйИтог)";
	Запрос.УстановитьПараметр("НомТура",НомерТура);
	Запрос.УстановитьПараметр("РежимТура",РежимТура);
	Запрос.УстановитьПараметр("МаксимальныйИтог", ЖеребьевкаКоманд.КоличествоПобед);
	Запрос.Выполнить();

	Запрос.Текст = "ВЫБРАТЬ * ИЗ ТаблицаГруппировка КАК ТаблицаГруппировка";
	ТаблицаГруппировка = Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(ТаблицаГруппировка, "ВсяТаблицаОбщихДанных");

	СводнаяТаблица = ПолучитьСводнуюТаблицаИзОбщей();
	ЗаполнениеСетки(Область, СводнаяТаблица);
	ЗаполнитьСводнуюТаблицу();

КонецПроцедуры

//заполняет параметры таб дока Игрок1, Игрок2 и т.д.
&НаСервере
Процедура ЗаполнитьКомандыВТаблице(Область)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ Из &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",СсылкаНаДок.КомандыПоЖеребьевке.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияКомандыПоЖеребьевке.НомерИгры,
	|	ПроведениеСоревнованияКомандыПоЖеребьевке.НазваниеКоманды,
	|	ПроведениеСоревнованияКомандыПоЖеребьевке.ТекущийРейтинг КАК ТекущийРейтинг,
	|	ПроведениеСоревнованияКомандыПоЖеребьевке.Пропускает1Тур,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК Представление
	|ИЗ
	|	ТЗ КАК ПроведениеСоревнованияКомандыПоЖеребьевке
	|ГДЕ
	|	ПроведениеСоревнованияКомандыПоЖеребьевке.РежимТура = &Режим
	|	И ПроведениеСоревнованияКомандыПоЖеребьевке.НомерТура = &НомерТура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТекущийРейтинг УБЫВ";
	Запрос.УстановитьПараметр("Режим",РежимТура);
	Запрос.УстановитьПараметр("НомерТура",НомерТура);
	Игроки = Запрос.Выполнить().Выгрузить();
	ВыводитьРейтингВТаблицу = Константы.ВыводитьРейтинг.Получить();
	Если Игроки.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из Игроки Цикл
			//найдем представление игрока
			Искомый = СоответствияИгроков.НайтиСтроки(Новый Структура("НазваниеКоманды",ТекСтрока.НазваниеКоманды));
			Если Искомый.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(Строка(Искомый[0].ПредставлениеИгрока)) Тогда
					ПредставлениеИгрока = Строка(Искомый[0].ПредставлениеИгрока)+?(ВыводитьРейтингВТаблицу,"("+ТекСтрока.ТекущийРейтинг+")","");
				Иначе
					ПредставлениеИгрока = "";
				КонецЕсли;
			Иначе
				ПредставлениеИгрока= "";
			КонецЕсли;
			ТекСтрока.Представление = СокрЛП(ПредставлениеИгрока);
		КонецЦикла;
		глТаблицаИгроков = Игроки;
		ЗаполнениеНумерацииУчастников(Область);
		ЗаполнитьНачальныеИгры(Игроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеНумерацииУчастников(Область)
	
	НумерацияИгр = СсылкаНаДок.НумерацияВСетке;
	Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
		//это взято с жеребьевки там сделано по индексу поэтому просто будем прибавлять +1
		Если НумерацияИгроков = 8 Тогда
			УстановитьНомерУчастника(0,1,1,8,Область);
			УстановитьНомерУчастника(2,3,5,4,Область);
			УстановитьНомерУчастника(4,5,3,6,Область);
			УстановитьНомерУчастника(6,7,7,2,Область);
		ИначеЕсли НумерацияИгроков = 16 Тогда
			УстановитьНомерУчастника(0,1,		1,16,Область);
			УстановитьНомерУчастника(2,3,		9,8,Область);
			УстановитьНомерУчастника(4,5,		5,12,Область);
			УстановитьНомерУчастника(6,7,		13,4,Область);
			УстановитьНомерУчастника(8,9,		3,14,Область);
			УстановитьНомерУчастника(10,11,	11,6,Область);
			УстановитьНомерУчастника(12,13,	7,10,Область);
			УстановитьНомерУчастника(14,15,	15,2,Область);
		ИначеЕсли НумерацияИгроков = 24 Тогда
			УстановитьНомерУчастника(0,9999,		1,0,Область);//1
			УстановитьНомерУчастника(1,2,		17,16,Область);//17-16
			УстановитьНомерУчастника(3,4,		9,24,Область);
			УстановитьНомерУчастника(5,9999,	8,0,Область);//8
			УстановитьНомерУчастника(6,9999,	5,0,Область);//5
			УстановитьНомерУчастника(7,8,		21,12,Область);
			УстановитьНомерУчастника(9,10,	13,20,Область);
			УстановитьНомерУчастника(11,9999,	4,0,Область);//4
			УстановитьНомерУчастника(12,9999,	3,0,Область);//3
			УстановитьНомерУчастника(13,14,	19,14,Область);
			УстановитьНомерУчастника(15,16,	11,22,Область);
			УстановитьНомерУчастника(17,9999,	6,0,Область);//6
			УстановитьНомерУчастника(18,9999,	7,0,Область);//7
			УстановитьНомерУчастника(19,20,	23,10,Область);
			УстановитьНомерУчастника(21,22,	15,18,Область);
			УстановитьНомерУчастника(23,9999,	2,0,Область);//2
		ИначеЕсли НумерацияИгроков = 32 Тогда
			УстановитьНомерУчастника(0,1,		1,32,Область);
			УстановитьНомерУчастника(2,3,		17,16,Область);
			УстановитьНомерУчастника(4,5,		9,24,Область);
			УстановитьНомерУчастника(6,7,		25,8,Область);
			УстановитьНомерУчастника(8,9,		5,28,Область);
			УстановитьНомерУчастника(10,11,	21,12,Область);
			УстановитьНомерУчастника(12,13,	13,20,Область);
			УстановитьНомерУчастника(14,15,	29,4,Область);
			УстановитьНомерУчастника(16,17,		3,30,Область);
			УстановитьНомерУчастника(18,19,		19,14,Область);
			УстановитьНомерУчастника(20,21,		11,22,Область);
			УстановитьНомерУчастника(22,23,		27,6,Область);
			УстановитьНомерУчастника(24,25,		7,26,Область);
			УстановитьНомерУчастника(26,27,	23,10,Область);
			УстановитьНомерУчастника(28,29,	15,18,Область);
			УстановитьНомерУчастника(30,31,	31,2,Область);
		ИначеЕсли НумерацияИгроков = 48 Тогда
			УстановитьНомерУчастника(0,9999,		1,0,Область);
			УстановитьНомерУчастника(1,2,		32,33,Область);
			УстановитьНомерУчастника(3,4,		17,48,Область);
			УстановитьНомерУчастника(5,9999,	16,0,Область);
			УстановитьНомерУчастника(6,9999,	9,0,Область);
			УстановитьНомерУчастника(7,8,		24,41,Область);
			УстановитьНомерУчастника(9,10,	25,40,Область);
			УстановитьНомерУчастника(11,9999,	8,0,Область);
			УстановитьНомерУчастника(12,9999,	5,0,Область);
			УстановитьНомерУчастника(13,14,	28,37,Область);
			УстановитьНомерУчастника(15,16,	21,44,Область);
			УстановитьНомерУчастника(17,9999,	12,0,Область);
			УстановитьНомерУчастника(18,9999,	13,0,Область);
			УстановитьНомерУчастника(19,20,	20,45,Область);
			УстановитьНомерУчастника(21,22,	29,36,Область);
			УстановитьНомерУчастника(23,9999,	4,0,Область);
			
			УстановитьНомерУчастника(24,9999,		3,0,Область);
			УстановитьНомерУчастника(25,26,		30,35,Область);
			УстановитьНомерУчастника(27,28,		19,46,Область);
			УстановитьНомерУчастника(29,9999,	14,0,Область);
			УстановитьНомерУчастника(30,9999,	11,0,Область);
			УстановитьНомерУчастника(31,32,		22,43,Область);
			УстановитьНомерУчастника(33,34,	37,38,Область);
			УстановитьНомерУчастника(35,9999,	6,0,Область);
			УстановитьНомерУчастника(36,9999,	7,0,Область);
			УстановитьНомерУчастника(37,38,	26,39,Область);
			УстановитьНомерУчастника(39,40,	23,42,Область);
			УстановитьНомерУчастника(41,9999,	10,0,Область);
			УстановитьНомерУчастника(42,9999,	15,0,Область);
			УстановитьНомерУчастника(43,44,	18,47,Область);
			УстановитьНомерУчастника(45,46,	31,34,Область);
			УстановитьНомерУчастника(47,9999,	2,0,Область);
		ИначеЕсли НумерацияИгроков = 64 Тогда
			УстановитьНомерУчастника(0,1,		1,64,Область);
			УстановитьНомерУчастника(2,3,		33,32,Область);
			УстановитьНомерУчастника(4,5,		17,48,Область);
			УстановитьНомерУчастника(6,7,		49,16,Область);
			УстановитьНомерУчастника(8,9,		9,56,Область);
			УстановитьНомерУчастника(10,11,	41,24,Область);
			УстановитьНомерУчастника(12,13,	25,40,Область);
			УстановитьНомерУчастника(14,15,	57,8,Область);
			УстановитьНомерУчастника(16,17,	5,60,Область);
			УстановитьНомерУчастника(18,19,	37,28,Область);
			УстановитьНомерУчастника(20,21,	21,44,Область);
			УстановитьНомерУчастника(22,23,	53,12,Область);
			УстановитьНомерУчастника(24,25,	13,52,Область);
			УстановитьНомерУчастника(26,27,	45,20,Область);
			УстановитьНомерУчастника(28,29,	29,36,Область);
			УстановитьНомерУчастника(30,31,	61,4,Область);
			УстановитьНомерУчастника(32,33,	3,62,Область);
			УстановитьНомерУчастника(34,35,	35,30,Область);
			УстановитьНомерУчастника(36,37,	19,46,Область);
			УстановитьНомерУчастника(38,39,	51,14,Область);
			УстановитьНомерУчастника(40,41,	11,54,Область);
			УстановитьНомерУчастника(42,43,	43,22,Область);
			УстановитьНомерУчастника(44,45,	27,38,Область);
			УстановитьНомерУчастника(46,47,	59,6,Область);
			УстановитьНомерУчастника(48,49,	7,58,Область);
			УстановитьНомерУчастника(50,51,	39,26,Область);
			УстановитьНомерУчастника(52,53,	23,42,Область);
			УстановитьНомерУчастника(54,55,	55,10,Область);
			УстановитьНомерУчастника(56,57,	15,50,Область);
			УстановитьНомерУчастника(58,59,	47,18,Область);
			УстановитьНомерУчастника(60,61,	31,34,Область);
			УстановитьНомерУчастника(62,63,	63,2,Область);
		КонецЕсли;
	ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
		Для Сч = 1 По НумерацияИгроков Цикл
			Область.Параметры["Сч"+Сч] = Сч;
		КонецЦикла;
		Для Каждого ТекУчастник Из глТаблицаИгроков Цикл
			Если ТекУчастник.НомерИгры <> 0 Тогда
				Область.Параметры["Игрок"+ТекУчастник.НомерИгры] = ТекУчастник.Представление;			
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьНомерУчастника(Индекс1,Индекс2,Номер1,Номер2,парОбласть)
	//глТаблицаИгроков
	Индекс1 = Индекс1 + 1;
	Индекс2 = Индекс2 + 1;
	ПервыйУчастник = глТаблицаИгроков.Найти(Номер1,"НомерИгры");
	ВторойУчастник = глТаблицаИгроков.Найти(Номер2,"НомерИгры");
	//установим участников
	Попытка
		парОбласть.Параметры["Игрок"+Индекс1] = ?(ПервыйУчастник = Неопределено,"",ПервыйУчастник.Представление);
	Исключение	
	КонецПопытки;
	Попытка
		парОбласть.Параметры["Игрок"+Индекс2] = ?(ВторойУчастник = Неопределено,"",ВторойУчастник.Представление);
	Исключение	
	КонецПопытки;
	
	Попытка
		парОбласть.Параметры["Сч"+Индекс1] = Номер1;
	Исключение
	КонецПопытки;
	
	Попытка
		парОбласть.Параметры["Сч"+Индекс2] = Номер2;
	Исключение
	КонецПопытки;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьНачальныеИгры(Игроки)
	
	НумерацияИгр = СсылкаНаДок.НумерацияВСетке;
	//Игроки.Сортировать("НомерИгры ВОЗР");
	Если Игроки.Количество() <= 8 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//1. 1-8
			//2. 5-4
			//3. 3-6
			//4. 7-2
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,5,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,3,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,2,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,2,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,3,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,8,Игроки));
		КонецЕсли;
	ИначеЕсли Игроки.Количество() > 8 И Игроки.Количество() <= 16 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//1. 1-16
			//2. 9-8
			//3. 5-12
			//4. 13-4
			//5. 3-14
			//6. 11-6
			//7. 7-10
			//8. 15-2
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,9,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,13,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,3,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,7,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,2,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,2,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,3,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,9,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,13,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,16,Игроки));
		КонецЕсли;	
	ИначеЕсли Игроки.Количество() > 16 И Игроки.Количество() <= 24 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//|1. 1
			//|2. 17-16
			//|3. 9-24
			//|4. 8
			//|5. 5
			//|6. 21-12
			//|7. 13-20
			//|8. 4
			//|9. 3
			//|10. 19-14
			//|11. 11-22
			//|12. 6
			//|13. 7
			//|14. 23-10
			//|15. 15-18
			//|16. 2";
			ДобавитьНачальнуюИгру(СтруктураДанных(1,17,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,9,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,21,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,13,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,19,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,23,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,18,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,2,3,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,4,5,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,8,9,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,10,11,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,14,15,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,16,17,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,20,21,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,22,23,Игроки));
		КонецЕсли;
		ДобавитьНачальнуюИгру(СтруктураДанных(9,1,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(10,6,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(11,7,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(12,12,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(13,13,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(14,18,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(15,19,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(16,24,0,Игроки));
	ИначеЕсли Игроки.Количество() > 24 И Игроки.Количество() <= 32 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//1. 1-32
			//2. 17-16
			//3. 9-24
			//4. 25-8
			//5. 5-28
			//6. 21-12
			//7. 13-20
			//8. 29-4
			//9. 3-30
			//10. 19-14
			//11. 11-22
			//12. 27-6
			//13. 7-26
			//14. 23-10
			//15. 15-18
			//16. 31-2
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,32,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,17,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,9,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,25,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,5,28,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,21,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,13,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,29,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,3,30,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,19,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,11,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,27,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,7,26,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,23,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,15,18,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,31,2,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,2,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,3,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,9,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,13,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,17,18,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,19,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,21,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,23,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,25,26,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,27,28,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,29,30,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,31,32,Игроки));
		КонецЕсли;
	ИначеЕсли Игроки.Количество() > 32 И Игроки.Количество() <= 48 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,32,33,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,17,48,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,24,41,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,25,40,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,28,37,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,21,44,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,20,45,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,29,36,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,30,35,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,19,46,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,22,43,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,27,38,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,26,39,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,23,42,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,18,47,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,31,34,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,2,3,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,4,5,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,8,9,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,10,11,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,14,15,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,16,17,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,20,21,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,22,23,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,26,27,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,28,29,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,32,33,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,34,35,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,38,39,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,40,41,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,44,45,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,46,47,Игроки));
		КонецЕсли;
		//это одиночки
		ДобавитьНачальнуюИгру(СтруктураДанных(17,1,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(18,6,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(19,7,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(20,12,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(21,13,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(22,18,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(23,19,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(24,24,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(25,25,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(26,30,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(27,31,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(28,36,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(29,37,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(30,42,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(31,43,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(32,48,0,Игроки));
	ИначеЕсли Игроки.Количество() > 48 И Игроки.Количество() <= 64 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//1. 1-64
			//2. 33-32
			//3. 17-48
			//4. 49-16
			//5. 9-56
			//6. 41-24
			//7. 25-40
			//8. 57-8
			//9. 5-60
			//10. 37-28
			//11. 21-44
			//12. 53-12
			//13. 13-52
			//14. 45-20
			//15. 29-36
			//16. 61-4
			//17. 3-62
			//18. 35-30
			//19. 19-46
			//20. 51-14
			//21. 11-54
			//22. 43-22
			//23. 27-38
			//24. 59-6
			//25. 7-58
			//26. 39-26
			//27. 23-42
			//28. 55-10
			//29. 15-50
			//30. 47-18
			//31. 31-34
			//32. 63-2
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,64,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,33,32,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,17,48,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,49,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,9,56,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,41,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,25,40,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,57,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,5,60,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,37,28,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,21,44,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,53,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,13,52,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,45,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,29,36,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,61,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(17,3,62,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(18,35,30,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(19,19,46,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(20,51,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(21,11,54,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(22,43,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(23,27,38,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(24,59,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(25,7,58,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(26,39,26,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(27,23,42,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(28,55,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(29,15,50,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(30,47,18,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(31,31,34,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(32,63,2,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,2,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,3,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,9,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,13,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,17,18,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,19,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,21,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,23,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,25,26,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,27,28,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,29,30,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,31,32,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(17,33,34,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(18,35,36,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(19,37,38,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(20,39,40,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(21,41,42,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(22,43,44,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(23,45,46,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(24,47,48,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(25,49,50,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(26,51,52,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(27,53,54,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(28,55,56,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(29,57,58,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(30,59,60,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(31,61,62,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(32,63,64,Игроки));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//функция получает структуру данных для добавления
//НомИгры = номеры игры
//Номер1 = номер первого игрока в паре
//Номер2 = номер второго игрока в паре
//Игроки = все игроки
&НаСервере
Функция СтруктураДанных(НомИгры,Номер1,Номер2,Игроки)
	
	//Номер1 = Номер1 - 1;
	//Номер2 = Номер2 - 1;
	Попытка
		стрПервый 	= Игроки.Найти(Номер1,"НомерИгры");//Получить(Номер1);
		Первый 			=	стрПервый.НазваниеКоманды; 
		Пропуск1 		= стрПервый.Пропускает1Тур; 
	Исключение
		стрПервый	= Неопределено;
		Первый			= "";
		Пропуск1 		= Ложь; 
	КонецПопытки;
	
	Попытка
		стрВторой 	= Игроки.Найти(Номер2,"НомерИгры");
		Второй			= стрВторой.НазваниеКоманды;	 
		Пропуск2 		= стрВторой.Пропускает1Тур; 
	Исключение
		стрВторой 	= Неопределено;
		Второй 			= "";
		Пропуск2 		= Ложь; 
	КонецПопытки;
	
	Если Пропуск1 И Пропуск2 Тогда
		//такого быть не может
	ИначеЕсли Пропуск1 Или Пропуск2 Тогда
		//и в главную таблицу
		Если Пропуск1 Тогда
			ВыигравшийУчастник = Первый;
		Иначе
			ВыигравшийУчастник = Второй;
		КонецЕсли;
		//Для Н = 1 По КолПартий -2 Цикл
		//перед этим проверим есть ли уже эти данные
		Отбор = Новый Структура;
		Отбор.Вставить("Команда1",ВыигравшийУчастник);
		Отбор.Вставить("Команда2","");
		Отбор.Вставить("НомерГруппы",НомИгры);
		Отбор.Вставить("НомерТура",НомерТура);
		МассивИскомыхСтрок = ВсяТаблицаОбщихДанных.НайтиСтроки(Отбор);
		Если МассивИскомыхСтрок.Количество() = 0 Тогда
			НовСтрока = ВсяТаблицаОбщихДанных.Добавить();
			НовСтрока.РежимТура = РежимТура;
			НовСтрока.Команда1  = ВыигравшийУчастник;
			НовСтрока.Команда2 = "";
			НовСтрока.ОчкиВыигравшего  = ЖеребьевкаКоманд.КоличествоПобед;
			НовСтрока.ОчкиПроигравшего = 0;
			НовСтрока.НомерГруппы	= НомИгры;
			НовСтрока.НомерСета	   = 1;
			НовСтрока.НомерТура		   = НомерТура;
			НовСтрока.ТехническоеВ   = Ложь;
			НовСтрока.ТехническоеП	= Истина;
		КонецЕсли;
		//КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("Первый,Второй,Этап",Первый,Второй,НомИгры);
	
КонецФункции

&НаСервере
Процедура ДобавитьНачальнуюИгру(Данные)
	
	НовСтрока = НачальныеИгры.Добавить();
	НовСтрока.Команда1  			= Данные.Первый;
	НовСтрока.Команда2 			= Данные.Второй;
	НовСтрока.ЭтапВСхеме	   	= Данные.Этап;
	НовСтрока.НомерТура		  	= НомерТура;
	
КонецПроцедуры

//процедура заполняет все параметры которые неопределены текущими расшифровками
//что бы можно было обработать в событии расшифровки табдока
&НаСервере
Процедура ЗаполнитьНеопределенныеРасшифровки(Область)
	//пройдемся по всем параметрам таб дока нам нужны только расшифровка
	Для Каждого ТекПараметр Из СоответствияИгр Цикл
		Если Область.Параметры["РИгра"+ТекПараметр.Игра] = Неопределено Тогда
			Область.Параметры["РИгра"+ТекПараметр.Игра] = ТекПараметр.Расшифровка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//если есть участники которых 100% можно продвинуть, то нужно сделать это автоматически
&НаСервере
Процедура ПродвинутьУчастниковДальшеПоСетке(ПараметрыПродвижения)
	
	Если РежимТура = Перечисления.РежимыТуровСоревнования.Олимпийка Тогда
		Возврат;
	КонецЕсли; 
	
	//всегда будем пытаться продвигать двоих участников
	перемВыигравший 		= ПараметрыПродвижения.перемВыигравший;
	перемПроигравший 	= ПараметрыПродвижения.перемПроигравший;
	парНомерИгры			= ПараметрыПродвижения.втНомерИгры;
	
	втСвернутаяТаблица = ВсяТаблицаОбщихДанных.Выгрузить(,"Выигравший,Проигравший,НомерГруппы");
	втСвернутаяТаблица.Свернуть("Выигравший,Проигравший,НомерГруппы");
	
	Если ЗначениеЗаполнено(перемВыигравший) Тогда
		//ПродвинутьУчастникаДальше(втСвернутаяТаблица,парНомерИгры,перемВыигравший);		
	КонецЕсли; 
	Если ЗначениеЗаполнено(перемПроигравший) Тогда
		ПродвинутьУчастникаДальше(втСвернутаяТаблица,парНомерИгры,перемПроигравший,Ложь);
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПродвинутьУчастникаДальше(мВсяТаблица,парНомерИгры,УчастникПродвижения,ДвигатьВыигравшего = Истина)
	
	ПробоватьПродвинуть = Истина;
	
	Пока ПробоватьПродвинуть Цикл
		//т.к. он проигравший то игра будет с буквой М
		Если ДвигатьВыигравшего Тогда
			ТекРасшифровкаПеремещения = "Игра"+парНомерИгры;
		Иначе
			ТекРасшифровкаПеремещения = "ИграМ"+парНомерИгры;
		КонецЕсли; 
		СледНомИгрыПеремещения = 0;
		СледРасшифровкаИгры = "";
		Для каждого ТекИгра Из СоответствияИгр Цикл
			Если Найти(ТекИгра.Расшифровка,ТекРасшифровкаПеремещения) > 0 Тогда
				СледНомИгрыПеремещения 	= ТекИгра.Игра;
				СледРасшифровкаИгры 			= ТекИгра.Расшифровка;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		РасшифровкаИгры = СледРасшифровкаИгры;
		//из расшифровки выцепим игры из которых должна состояться партия СчНомераИгры
		Решетка = Найти(РасшифровкаИгры,"#");
		ПервыйИгрок = Сред(РасшифровкаИгры,1,Решетка-1);
		ВторойИгрок = СокрЛП(Сред(РасшифровкаИгры,Решетка+1,СтрДлина(РасшифровкаИгры)));
		//выделим цифры из расшифровок
		ПерваяЦифраИгры = "";
		ВтораяЦифраИгры = "";
		Для НомСимвола = 1 По СтрДлина(ПервыйИгрок) Цикл
			мКодСимвола = КодСимвола(ПервыйИгрок,НомСимвола);
			//48 - 57 
			Если мКодСимвола >= 48 и мКодСимвола <= 57 Тогда //это цифра
				ПерваяЦифраИгры = ПерваяЦифраИгры + Сред(ПервыйИгрок,НомСимвола,1); 	
			КонецЕсли;
		КонецЦикла; 
		Для НомСимвола = 1 По СтрДлина(ВторойИгрок) Цикл
			мКодСимвола = КодСимвола(ВторойИгрок,НомСимвола);
			//48 - 57 
			Если мКодСимвола >= 48 и мКодСимвола <= 57 Тогда //это цифра
				ВтораяЦифраИгры = ВтораяЦифраИгры + Сред(ВторойИгрок,НомСимвола,1); 	
			КонецЕсли;
		КонецЦикла; 
		ПерваяЦифраИгры = Число(ПерваяЦифраИгры);
		ВтораяЦифраИгры = Число(ВтораяЦифраИгры);
		//ищем проигравших по этим играм
		Массив1 = мВсяТаблица.НайтиСтроки(Новый Структура("НомерГруппы",ПерваяЦифраИгры));
		Если Массив1.Количество() > 0 Тогда
			Если ДвигатьВыигравшего Тогда
				втУчастникДляДвиженияВСетке	= Массив1[0].Выигравший;
			Иначе
				втУчастникДляДвиженияВСетке 	= Массив1[0].Проигравший;
			КонецЕсли;
		КонецЕсли; 
		Массив2 = мВсяТаблица.НайтиСтроки(Новый Структура("НомерГруппы",ВтораяЦифраИгры));
		Если Массив2.Количество() > 0 Тогда
			Если ДвигатьВыигравшего Тогда
				втУчастникДляДвиженияВСетке1	= Массив2[0].Выигравший;
			Иначе
				втУчастникДляДвиженияВСетке1	= Массив2[0].Проигравший;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(втУчастникДляДвиженияВСетке) И ЗначениеЗаполнено(втУчастникДляДвиженияВСетке1) Тогда 
			//они еще могут играть
			ПробоватьПродвинуть = Ложь;
			Продолжить;
		Иначе
			Если Не ЗначениеЗаполнено(втУчастникДляДвиженияВСетке) И НЕ ЗначениеЗаполнено(втУчастникДляДвиженияВСетке1) Тогда
				//хрень какая то, такого не должно быть
				ПробоватьПродвинуть = Ложь;
				Продолжить;
			КонецЕсли; 
			//можем продвинуть того кто заполнен
			Если ЗначениеЗаполнено(втУчастникДляДвиженияВСетке) Тогда
				ПродвигаемыйИгрок = втУчастникДляДвиженияВСетке;
			Иначе
				ПродвигаемыйИгрок = втУчастникДляДвиженияВСетке1;
			КонецЕсли;
			//продвигаем участника
			НовСтрока = ВсяТаблицаОбщихДанных.Добавить();
			НовСтрока.РежимТура = РежимТура;
			НовСтрока.НомерТура = НомерТура;
			НовСтрока.НомерГруппы = СледНомИгрыПеремещения;
			НовСтрока.НомерСета = 1;
			НовСтрока.Выигравший  = ПродвигаемыйИгрок;
			НовСтрока.Проигравший = Справочники.Участники.ПустаяСсылка();
			НовСтрока.КолШаров	   = 0;
			НовСтрока.ОчкиВыигравшего = ОпределитьКолПартийНаСервере();
			НовСтрока.ОчкиПроигравшего= 0;
			НовСтрока.ТехническоеВ = Ложь;
			НовСтрока.ТехническоеП = Истина;
			
			ПробоватьПродвинуть = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если мЗакрытиеФормы Тогда
		Если ЭтотОбъект.Модифицированность Тогда
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), "Данные не будут сохранены. Закрыть форму?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		мЗакрытиеФормы = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	
	//Если ЭтотОбъект.Модифицированность Тогда
	ЭтотОбъект.Модифицированность = Ложь;
	ЭтотОбъект.Закрыть();
	ОповеститьОВыборе(ВсяТаблицаОбщихДанных);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьБезЗакрытия(Команда)
	Если ЭтотОбъект.Модифицированность Тогда
		ЭтотОбъект.ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(ВсяТаблицаОбщихДанных);
		ПоказатьОповещениеПользователя("Внимание",,"Данные соревнования успешно записаны",БиблиотекаКартинок.Информация);
		ЭтотОбъект.ЗакрыватьПриВыборе = Истина;
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	//расшифруем игру
	СтандартнаяОбработка = Ложь;
	НомерИгрыТабДока = СоответствияИгр.НайтиСтроки(Новый Структура("Расшифровка",Расшифровка))[0].Игра;
	//ИскомаяИгра = СоответствияИгр.НайтиСтроки(Новый Структура("Игра",НомерИгры))[0].Расшифровка;
	//определим откуда брать игроков
	ИскомаяИгра = Расшифровка;
	Решетка = Найти(ИскомаяИгра,"#");
	ПервыйИгрок = Сред(ИскомаяИгра,1,Решетка-1);
	ВторойИгрок = СокрЛП(Сред(ИскомаяИгра,Решетка+1,СтрДлина(ИскомаяИгра)));
	//по сокращенному названию ищем в таблице соответствий игроков ссылочные данные
	Если Элемент.ТекущаяОбласть.Текст <> "" Тогда
		ДанныеИгры 	= ПоискСсылкиНаИгрокаТаДок(НомерИгрыТабДока); 
		СсылкаИгрок1 = ДанныеИгры.Игрок1;
		СсылкаИгрок2 = ДанныеИгры.Игрок2;
		ДанныеИгры.Вставить("ТехническоеВ",ДанныеИгры.ТехническоеВ);
		ДанныеИгры.Вставить("ТехническоеП",ДанныеИгры.ТехническоеП);
	Иначе//для пустых значений
		Если Найти(ПервыйИгрок,"Игрок") > 0 И Найти(ВторойИгрок,"Игрок") > 0 Тогда
			//начальные игры
			ДанныеИгры 	= ПоискИгроковПоРасшифровкеНомера(НомерИгрыТабДока,Истина); 
			СсылкаИгрок1 = ДанныеИгры.Игрок1;
			СсылкаИгрок2 = ДанныеИгры.Игрок2;
		ИначеЕсли (Найти(ПервыйИгрок,"Игрок") > 0 И Найти(ВторойИгрок,"Игра") > 0) 
			Или (Найти(ПервыйИгрок,"Игра") > 0 И Найти(ВторойИгрок,"Игрок") > 0) Тогда
			//пока что только для макета с 24
			//определим где игрок , а где игра
			ДанныеИгры 	= Новый Структура;
			Если Найти(ПервыйИгрок,"Игрок") > 0 Тогда
				//1. игрок а соперник из игры
				Отбор = Новый Структура;
				Отбор.Вставить("РежимТура",РежимТура);
				Отбор.Вставить("НомерТура",НомерТура);
				Отбор.Вставить("НомерИгры",Число(СтрЗаменить(ПервыйИгрок,"Игрок","")));
				МассивУчастниковТура = СсылкаНаДок.КомандыПоЖеребьевке.НайтиСтроки(Отбор);
				СсылкаИгрок1 = МассивУчастниковТура[0].НазваниеКоманды;
				втДанные = ПоискСсылкиНаИгрокаТаДок(Число(СтрЗаменить(ВторойИгрок,"Игра","")));
				Если втДанные.Очки1 > втДанные.Очки2 Тогда
					СсылкаИгрок2 = втДанные.Игрок1;
				Иначе
					СсылкаИгрок2 = втДанные.Игрок2;
				КонецЕсли; 
			Иначе
				//в этом случае первая ссылка из игры, а вторая из игрока
				Отбор = Новый Структура;
				Отбор.Вставить("РежимТура",РежимТура);
				Отбор.Вставить("НомерТура",НомерТура);
				Отбор.Вставить("НомерИгры",Число(СтрЗаменить(ВторойИгрок,"Игрок","")));
				МассивУчастниковТура = СсылкаНаДок.КомандыПоЖеребьевке.НайтиСтроки(Отбор);
				СсылкаИгрок1 = МассивУчастниковТура[0].НазваниеКоманды;
				втДанные = ПоискСсылкиНаИгрокаТаДок(Число(СтрЗаменить(ПервыйИгрок,"Игра","")));
				Если втДанные.Очки1 > втДанные.Очки2 Тогда
					СсылкаИгрок2 = втДанные.Игрок1;
				Иначе
					СсылкаИгрок2 = втДанные.Игрок2;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			ДанныеИгры 	= Новый Структура;
			СсылкаИгрок1 = ПоискИгроковПоРасшифровкеНомера(ПервыйИгрок);
			СсылкаИгрок2 = ПоискИгроковПоРасшифровкеНомера(ВторойИгрок);
		КонецЕсли;         
	КонецЕсли;
	ДанныеИгры.Вставить("Игрок1",СсылкаИгрок1);
	ДанныеИгры.Вставить("Игрок2",СсылкаИгрок2);
	ДанныеИгры.Вставить("КолПартий",КолПартий);
	Если СсылкаИгрок1 <> Неопределено Или СсылкаИгрок2 <> Неопределено Тогда
		//СтрокиИгры = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
		//Если СтрокиИгры.Количество() > 0 Тогда
		//	Элементы.ТаблицаМониторинга.ТекущаяСтрока = СтрокиИгры[0].ПолучитьИдентификатор();
		//КонецЕсли;
		НаименованиеКоманда1 = СсылкаИгрок1;
		НаименованиеКоманда2 = СсылкаИгрок2;
		Элементы.ТаблицаПартийУчастник1.Заголовок = СсылкаИгрок1;
		Элементы.ТаблицаПартийУчастник2.Заголовок = СсылкаИгрок2;
		
		ЗаполнениеТабличкиПартий(ДанныеИгры);
		//активизируем игру в списке
		//СтрокиИгры = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгрыТабДока));
		//Если СтрокиИгры.Количество() > 0 Тогда
		//	Элементы.ТаблицаОбщихДанных.ТекущаяСтрока = СтрокиИгры[0].ПолучитьИдентификатор();
		//КонецЕсли;
		//МассивНаСтоле = ТаблицаСтолов.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
		//Если МассивНаСтоле.Количество() > 0 Тогда
		//	Элементы.ТаблицаСтолов.ТекущаяСтрока = МассивНаСтоле[0].ПолучитьИдентификатор();
		//КонецЕсли;
		Если ТаблицаПартий.Количество() > 0 Тогда
			Элементы.ТаблицаПартий.ТекущаяСтрока = ТаблицаПартий.Получить(0).ПолучитьИдентификатор();
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТаблицаПартийИгра1;//1 игра уж точно всегда будет
		КонецЕсли;
	Иначе
		НаименованиеКоманда1 = "";
		НаименованиеКоманда2 = "";
		ТаблицаПартий.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	////расшифруем игру
	//НомерИгрыТабДока = СоответствияИгр.НайтиСтроки(Новый Структура("Расшифровка",Расшифровка))[0].Игра;
	////ИскомаяИгра = СоответствияИгр.НайтиСтроки(Новый Структура("Игра",НомерИгры))[0].Расшифровка;
	////определим откуда брать игроков
	//ИскомаяИгра = Расшифровка;
	//Решетка = Найти(ИскомаяИгра,"#");
	//ПервыйИгрок = Сред(ИскомаяИгра,1,Решетка-1);
	//ВторойИгрок = СокрЛП(Сред(ИскомаяИгра,Решетка+1,СтрДлина(ИскомаяИгра)));
	////по сокращенному названию ищем в таблице соответствий игроков ссылочные данные
	//Если Элемент.ТекущаяОбласть.Текст <> "" Тогда
	//	ДанныеИгры 	= ПоискСсылкиНаИгрокаТаДок(НомерИгрыТабДока); 
	//	СсылкаИгрок1 = ДанныеИгры.Игрок1;
	//	СсылкаИгрок2 = ДанныеИгры.Игрок2;
	//	ДанныеИгры.Вставить("ТехническоеВ",ДанныеИгры.ТехническоеВ);
	//	ДанныеИгры.Вставить("ТехническоеП",ДанныеИгры.ТехническоеП);
	//Иначе//для пустых значений
	//	Если Найти(ПервыйИгрок,"Игрок") > 0 И Найти(ВторойИгрок,"Игрок") > 0 Тогда
	//		//начальные игры
	//		ДанныеИгры 	= ПоискИгроковПоРасшифровкеНомера(НомерИгрыТабДока,Истина); 
	//		СсылкаИгрок1 = ДанныеИгры.Игрок1;
	//		СсылкаИгрок2 = ДанныеИгры.Игрок2;
	//	ИначеЕсли (Найти(ПервыйИгрок,"Игрок") > 0 И Найти(ВторойИгрок,"Игра") > 0) 
	//		Или (Найти(ПервыйИгрок,"Игра") > 0 И Найти(ВторойИгрок,"Игрок") > 0) Тогда
	//		//пока что только для макета с 24
	//		//определим где игрок , а где игра
	//		ДанныеИгры 	= Новый Структура;
	//		Если Найти(ПервыйИгрок,"Игрок") > 0 Тогда
	//			//1. игрок а соперник из игры
	//			Отбор = Новый Структура;
	//			Отбор.Вставить("НомерГруппы",0);
	//			Отбор.Вставить("РежимТура",РежимТура);
	//			Отбор.Вставить("НомерТура",НомерТура);
	//			Отбор.Вставить("НомерИгры",Число(СтрЗаменить(ПервыйИгрок,"Игрок","")));
	//			МассивУчастниковТура = СсылкаНаДок.УчастникиПоЖеребьевке.НайтиСтроки(Отбор);
	//			СсылкаИгрок1 = МассивУчастниковТура[0].Участник;
	//			СсылкаИгрок2 = ПоискСсылкиНаИгрокаТаДок(Число(СтрЗаменить(ВторойИгрок,"Игра",""))).Игрок1;
	//		Иначе
	//			//в этом случае первая ссылка из игры, а вторая из игрока
	//			Отбор = Новый Структура;
	//			Отбор.Вставить("НомерГруппы",0);
	//			Отбор.Вставить("РежимТура",РежимТура);
	//			Отбор.Вставить("НомерТура",НомерТура);
	//			Отбор.Вставить("НомерИгры",Число(СтрЗаменить(ВторойИгрок,"Игрок","")));
	//			МассивУчастниковТура = СсылкаНаДок.УчастникиПоЖеребьевке.НайтиСтроки(Отбор);
	//			СсылкаИгрок1 = МассивУчастниковТура[0].Участник;
	//			СсылкаИгрок2 = ПоискСсылкиНаИгрокаТаДок(Число(СтрЗаменить(ПервыйИгрок,"Игра",""))).Игрок1;
	//		КонецЕсли;
	//	Иначе
	//		ДанныеИгры 	= Новый Структура;
	//		СсылкаИгрок1 = ПоискИгроковПоРасшифровкеНомера(ПервыйИгрок);
	//		СсылкаИгрок2 = ПоискИгроковПоРасшифровкеНомера(ВторойИгрок);
	//	КонецЕсли;         
	//КонецЕсли;
	//ДанныеИгры.Вставить("Игрок1",СсылкаИгрок1);
	//ДанныеИгры.Вставить("Игрок2",СсылкаИгрок2);
	//ДанныеИгры.Вставить("КолПартий",КолПартий);
	//Если СсылкаИгрок1 <> Неопределено Или СсылкаИгрок2 <> Неопределено Тогда
	//	Если Не ЗначениеЗаполнено(СсылкаИгрок1) Или Не ЗначениеЗаполнено(СсылкаИгрок2) Тогда
	//		Возврат;
	//	КонецЕсли; 
	//	СтандартнаяОбработка = Ложь;
	//	//заполним варианты для быстрого ввода партий
	//	ВариантИзСписка = ВыбратьИзСписка(ОбновитьКМБыстрогоВвода(СсылкаИгрок1,СсылкаИгрок2),Элементы.ТабДок);
	//	Если ВариантИзСписка <> Неопределено Тогда
	//		Данные = Новый Структура;
	//		Данные.Вставить("ЗначениеСписка",ВариантИзСписка.Значение);
	//		Данные.Вставить("СсылкаИгрок1",СсылкаИгрок1);
	//		Данные.Вставить("СсылкаИгрок2",СсылкаИгрок2);
	//		ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные);
	//	КонецЕсли; 
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные)
	
	//разберем значение из списка
	//Y_X, где Y - номер участника, первый или второй по переданному параметру
	//X - количество партий выигранных
	//например: передаем в функция (Иванов, Петров)
	//1_2 Иванов 3:2 Петров
	//Иванов это 1 параметр
	//петров это 2 параметр
	//на выходе получаем, что Петров выиграл у Иванова 2 партии
	ВариантИзСписка	= Данные.ЗначениеСписка;//значение списка значений из контекстного меню
	СсылкаИгрок1			= Данные.СсылкаИгрок1;
	СсылкаИгрок2			= Данные.СсылкаИгрок2;
	
	ЗначениеВыбора 			= ВариантИзСписка;
	НомерПараметра 			= Число(Лев(ЗначениеВыбора,1));
	Если НомерПараметра = 9 Тогда
		Возврат;
	КонецЕсли; 
	КолВыигранныхПартий	= Прав(ЗначениеВыбора,1);
	Если НомерПараметра = 1 Тогда
		перемВыигравший 		= СсылкаИгрок1;
		перемПроигравший	= СсылкаИгрок2;
	Иначе
		перемВыигравший 		= СсылкаИгрок2;
		перемПроигравший	= СсылкаИгрок1;
	КонецЕсли;
	Если КолВыигранныхПартий = "W" Тогда
		ВИтог = ОпределитьКолПартий();
		ПИтог = 0;
		ВТехническое = Ложь;				
		ПТехническое = Истина;
	Иначе
		ВИтог = ОпределитьКолПартий();
		ПИтог = КолВыигранныхПартий;
		ВТехническое = Ложь;				
		ПТехническое = Ложь;
	КонецЕсли; 
	
	ЭтотОбъект.Модифицированность = Истина;
	ТЧДока = ВсяТаблицаОбщихДанных;
	//попробуем найти эту пару
	Отбор = Новый Структура;                               
	Отбор.Вставить("Выигравший",перемВыигравший);
	Отбор.Вставить("Проигравший",перемПроигравший);
	Отбор.Вставить("НомерТура",НомерТура);
	Отбор.Вставить("НомерГруппы",НомерИгрыТабДока);
	ИскомыеСтроки = ТЧДока.НайтиСтроки(Отбор);
	Если ИскомыеСтроки.Количество() > 0 Тогда //строки уже есть перезаполняем
		Для Каждого ТекСтрока Из ИскомыеСтроки Цикл
			ТЧДока.Удалить(ТЧДока.Индекс(ТекСтрока));
		КонецЦикла;
	ИначеЕсли ИскомыеСтроки.Количество() = 0 Тогда
		///попробуем другой вариант вдруг выигравший изменился
		Отбор = Новый Структура;                               
		Отбор.Вставить("Выигравший",перемПроигравший);
		Отбор.Вставить("Проигравший",перемВыигравший);
		Отбор.Вставить("НомерТура",НомерТура);
		Отбор.Вставить("НомерГруппы",НомерИгрыТабДока);
		ИскомыеСтроки = ТЧДока.НайтиСтроки(Отбор);
		Если ИскомыеСтроки.Количество() > 0 Тогда //строки уже есть перезаполняем
			Для Каждого ТекСтрока Из ИскомыеСтроки Цикл
				ТЧДока.Удалить(ТЧДока.Индекс(ТекСтрока));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НовСтрока = ТЧДока.Добавить();
	НовСтрока.РежимТура = РежимТура;
	НовСтрока.НомерТура = НомерТура;
	НовСтрока.НомерГруппы = НомерИгрыТабДока;
	НовСтрока.НомерСета = 1;
	НовСтрока.Выигравший  = перемВыигравший;
	НовСтрока.Проигравший = перемПроигравший;
	НовСтрока.КолШаров	   = 0;
	НовСтрока.ОчкиВыигравшего = ВИтог;
	НовСтрока.ОчкиПроигравшего= ПИтог;
	НовСтрока.ТехническоеВ = ВТехническое;
	НовСтрока.ТехническоеП = ПТехническое; 
	
	//ЗаполнитьСводнуюТаблицу();
	ДопПараметрыДляПродвижения = Новый Структура;
	ДопПараметрыДляПродвижения.Вставить("перемВыигравший",перемВыигравший);
	ДопПараметрыДляПродвижения.Вставить("перемПроигравший",перемПроигравший);
	ДопПараметрыДляПродвижения.Вставить("втНомерИгры",НомерИгрыТабДока);
	ВыполнитьДействияПослеЗаписиИгры(ДопПараметрыДляПродвижения);
	АктивироватьТекущуюИгруВтаблице();
	//ОбновитьПараметрыТабличногоДокумента();
	
	//теперь очистим игру в таблице столов если она там есть
	ОчиститьТаблицуМониторинга(НомерИгрыТабДока);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПослеЗаписиИгры(ДопПараметры = Неопределено)
	
	Если ДопПараметры <> Неопределено Тогда
		//ПродвинутьУчастниковДальшеПоСетке(ДопПараметры);	
	КонецЕсли; 
	ЗаполнитьСводнуюТаблицу();
	ОбновитьПараметрыТабличногоДокумента();
	//ОбновитьТаблицуМониторинга();
	
КонецПроцедуры
 
//процедура обновляет наименования, видимость кнопок в контекстном меню, для быстрого ввода
&НаКлиенте
Функция ОбновитьКМБыстрогоВвода(парУчастник1,парУчастник2)
	
	//ПредставлениеУч1 = СоответствияИгроков.НайтиСтроки(Новый Структура("Участник",парУчастник1))[0].ПредставлениеИгрока;
	//ПредставлениеУч2 = СоответствияИгроков.НайтиСтроки(Новый Структура("Участник",парУчастник2))[0].ПредставлениеИгрока;	
	мСписок = Новый СписокЗначений;
	Пробел10 = "          ";
	МаксимумПартий = ОпределитьКолПартий();
	//1 вариант
	Для М = 0 По МаксимумПартий-1 Цикл		
		мСписок.Добавить("1_"+М,Строка(парУчастник1)+" "+МаксимумПартий+":"+М+" "+Строка(парУчастник2)+Пробел10);
	КонецЦикла;
	мСписок.Добавить("1_W",Строка(парУчастник1)+" W/L "+Строка(парУчастник2)+Пробел10);
	мСписок.Добавить("9"," ");
	//2 вариант
	Для М = 0 По МаксимумПартий-1 Цикл
		мСписок.Добавить("2_"+М,Строка(парУчастник2)+" "+МаксимумПартий+":"+М+" "+Строка(парУчастник1)+Пробел10);
	КонецЦикла; 
	мСписок.Добавить("2_W",Строка(парУчастник2)+" W/L "+Строка(парУчастник1)+Пробел10);
	
	Возврат мСписок;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеТабличкиПартий(Данные)
	
    ТаблицаПартий.Очистить();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ втТЗ ИЗ &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",ВсяТаблицаОбщихДанных.Выгрузить(Новый Структура("НомерГруппы",НомерИгрыТабДока)));
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	втТЗ.Команда1,
	|	втТЗ.Расстановка1,
	|	втТЗ.Участник1,
	|	втТЗ.Команда2,
	|	втТЗ.Участник2,
	|	втТЗ.Расстановка2,
	|	втТЗ.ТехническоеВ,
	|	втТЗ.ТехническоеП
	|ПОМЕСТИТЬ втДанныеПоИграм
	|ИЗ
	|	втТЗ КАК втТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	втТЗ.Команда1,
	|	втТЗ.Команда2,
	|	втТЗ.Участник1,
	|	втТЗ.Участник2,
	|	втТЗ.Расстановка1,
	|	втТЗ.Расстановка2,
	|	втТЗ.ТехническоеВ,
	|	втТЗ.ТехническоеП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖеребьевкаКомандПорядокВстреч.НомерСтроки КАК НомерСтроки,
	|	ЖеребьевкаКомандПорядокВстреч.ВариантABC КАК Расстановка1,
	|	ЖеребьевкаКомандПорядокВстреч.ВариантXYZ КАК Расстановка2
	|ПОМЕСТИТЬ ДанныеПоПарам
	|ИЗ
	|	Справочник.ЖеребьевкаКоманд.ПорядокВстреч КАК ЖеребьевкаКомандПорядокВстреч
	|ГДЕ
	|	ЖеребьевкаКомандПорядокВстреч.Ссылка = &Ссылка
	|	И ЖеребьевкаКомандПорядокВстреч.ВариантABC = ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)
	|	И ЖеребьевкаКомандПорядокВстреч.ВариантXYZ = ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖеребьевкаКомандПорядокВстреч.ВариантXYZ,
	|	ЖеребьевкаКомандПорядокВстреч.ВариантABC,
	|	ЖеребьевкаКомандПорядокВстреч.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖеребьевкаКомандПорядокВстреч.НомерСтроки КАК НомерСтроки,
	|	втДанныеПоИграм.Команда1,
	|	ЖеребьевкаКомандПорядокВстреч.ВариантABC КАК Расстановка1,
	|	втДанныеПоИграм.Участник1,
	|	втДанныеПоИграм.Команда2,
	|	ЖеребьевкаКомандПорядокВстреч.ВариантXYZ КАК Расстановка2,
	|	втДанныеПоИграм.Участник2,
	|	втДанныеПоИграм.ТехническоеВ,
	|	втДанныеПоИграм.ТехническоеП
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	Справочник.ЖеребьевкаКоманд.ПорядокВстреч КАК ЖеребьевкаКомандПорядокВстреч
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеПоИграм КАК втДанныеПоИграм
	|		ПО ЖеребьевкаКомандПорядокВстреч.ВариантABC = втДанныеПоИграм.Расстановка1
	|			И ЖеребьевкаКомандПорядокВстреч.ВариантXYZ = втДанныеПоИграм.Расстановка2
	|ГДЕ
	|	ЖеребьевкаКомандПорядокВстреч.Ссылка = &Ссылка
	|	И ЖеребьевкаКомандПорядокВстреч.ВариантABC <> ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)
	|	И ЖеребьевкаКомандПорядокВстреч.ВариантXYZ <> ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖеребьевкаКомандПорядокВстреч.ВариантABC,
	|	ЖеребьевкаКомандПорядокВстреч.ВариантXYZ,
	|	ЖеребьевкаКомандПорядокВстреч.НомерСтроки,
	|	втДанныеПоИграм.Команда1,
	|	втДанныеПоИграм.Участник1,
	|	втДанныеПоИграм.Команда2,
	|	втДанныеПоИграм.Участник2,
	|	втДанныеПоИграм.ТехническоеВ,
	|	втДанныеПоИграм.ТехническоеП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втИтоговая.Команда1) КАК Команда1,
	|	МАКСИМУМ(втИтоговая.Команда2) КАК Команда2
	|ПОМЕСТИТЬ втНазваниеКоманд
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.НомерСтроки КАК НомерСтроки,
	|	втИтоговая.Команда1,
	|	втИтоговая.Расстановка1,
	|	втИтоговая.Участник1,
	|	втИтоговая.Команда2,
	|	втИтоговая.Расстановка2,
	|	втИтоговая.Участник2,
	|	втИтоговая.ТехническоеВ КАК Техническое1,
	|	втИтоговая.ТехническоеП КАК Техническое2
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка",ЖеребьевкаКоманд);
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого ТекСтр Из Результат Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПартий.Добавить(),ТекСтр);
	КонецЦикла; 
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ДанныеПоПарам КАК ДанныеПоПарам";
	ДанныеПоПарам = Запрос.Выполнить().Выгрузить();
		
	Если ДанныеПоПарам.Количество() > 0 Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Расстановка1",ДанныеПоПарам[0].Расстановка1);
		Отбор.Вставить("Расстановка2",ДанныеПоПарам[0].Расстановка2);
		Отбор.Вставить("НомерГруппы",НомерИгрыТабДока);
		Отбор.Вставить("НомерТура",НомерТура);
		втТаблицаПар = ВсяТаблицаОбщихДанных.Выгрузить(Отбор,"Участник1,Участник2");
		втТаблицаПар.Свернуть("Участник1,Участник2");
		ПараABC = Новый СписокЗначений;	
		ПараXYZ = Новый СписокЗначений;
		Для каждого ТекСтрПары Из втТаблицаПар Цикл
			Если ЗначениеЗаполнено(ТекСтрПары.Участник1) Тогда
				ПараABC.Добавить(ТекСтрПары.Участник1);			
			КонецЕсли; 
			Если ЗначениеЗаполнено(ТекСтрПары.Участник2) Тогда
				ПараXYZ.Добавить(ТекСтрПары.Участник2);
			КонецЕсли;
		КонецЦикла; 
		НовСтрока = ТаблицаПартий.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,ДанныеПоПарам[0]);
		НовСтрока.Участник1 = ПараABC;
		НовСтрока.Участник2 = ПараXYZ;
	КонецЕсли; 
	//а теперь загрузим очки
	Для каждого ТекСтр Из ТаблицаПартий Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Расстановка1",ТекСтр.Расстановка1);
		Отбор.Вставить("Расстановка2",ТекСтр.Расстановка2);
		Отбор.Вставить("НомерГруппы",НомерИгрыТабДока);
		Отбор.Вставить("НомерТура",НомерТура);
		втТаблицаОчков = ВсяТаблицаОбщихДанных.Выгрузить(Отбор,"КолШаров,ОчкиВыигравшего,ОчкиПроигравшего,НомерСета");
		втТаблицаОчков.Свернуть("КолШаров,ОчкиВыигравшего,ОчкиПроигравшего,НомерСета");
		втИтог1 = 0;
		втИтог2 = 0;
		Если втТаблицаОчков.Количество() = 1 Тогда //ввод по партиям
			втИтог1 = втТаблицаОчков[0].ОчкиВыигравшего;
			втИтог2 = втТаблицаОчков[0].ОчкиПроигравшего;
		Иначе
			Для Каждого ТекСтрокаТаблицы Из втТаблицаОчков Цикл
				СтрМассива = ТекСтрокаТаблицы;
				Если СтрМассива.ОчкиВыигравшего = 0 И СтрМассива.ОчкиПроигравшего = 0 Тогда
					Продолжить;
				КонецЕсли; 
				Если СтрМассива.ОчкиВыигравшего = 1 Тогда //ставим с + 
					ЗначОчка = СтрМассива.КолШаров;
					втИтог1 = втИтог1 + 1;
				Иначе
					втИтог2 = втИтог2 + 1;
					Если СтрМассива.КолШаров = 0 Тогда
						ЗначОчка = "-0";
					Иначе
						ЗначОчка = Строка(СтрМассива.КолШаров);
					КонецЕсли; 
				КонецЕсли;
				ТекСтр["Игра"+(СтрМассива.НомерСета)] = ЗначОчка;
			КонецЦикла;
		КонецЕсли; 
		Если втИтог1 = 0 И втИтог2 = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ТекСтр.ОбщийРезультат1 = втИтог1;
		ТекСтр.ОбщийРезультат2 = втИтог2;
		Если втИтог1 > втИтог2 Тогда
			ТекСтр.Итог1 = 1;
			ТекСтр.Итог2 = 0;
		Иначе
			ТекСтр.Итог1 = 0;
			ТекСтр.Итог2 = 1;
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ втНазваниеКоманд КАК втНазваниеКоманд";
	втНазваниеКоманд = Запрос.Выполнить().Выгрузить();
	Если втНазваниеКоманд.Количество() > 0 Тогда
		мвтИмяКоманды1 = втНазваниеКоманд[0].Команда1;
		мвтИмяКоманды2 = втНазваниеКоманд[0].Команда2;
		Если Не ПустаяСтрока(Строка(мвтИмяКоманды1)) Тогда
			НаименованиеКоманда1 = мвтИмяКоманды1;			
		КонецЕсли; 
		Если Не ПустаяСтрока(Строка(мвтИмяКоманды2)) Тогда
			НаименованиеКоманда2 = мвтИмяКоманды2;
		КонецЕсли; 
		Элементы.ТаблицаПартийУчастник1.Заголовок = НаименованиеКоманда1;
		Элементы.ТаблицаПартийУчастник2.Заголовок = НаименованиеКоманда2;
	КонецЕсли; 
	ТаблицаПартий.Сортировать("НомерСтроки ВОЗР");
	СуммаИтогов1 = ТаблицаПартий.Итог("Итог1");
	СуммаИтогов2 = ТаблицаПартий.Итог("Итог2");
	
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьИтогиПартийДляТаблицы(ТекСтрока = Неопределено)
	
	Если ТекСтрока = Неопределено Тогда //рассчитываем все строки
		Для каждого СтрокаПартии Из ТаблицаПартий Цикл
			Если ЗначениеЗаполнено(СтрокаПартии.Участник1) И ЗначениеЗаполнено(СтрокаПартии.Участник2) Тогда
				СтрокаПартии.Итог1 = 0;
				СтрокаПартии.Итог2 = 0;
				РассчитатьСтрокуПартийПоПартиям(СтрокаПартии);
			КонецЕсли; 
		КонецЦикла;
	Иначе //рассчитываем переданную строчку
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) И ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			ТекСтрока.Итог1 = 0;
			ТекСтрока.Итог2 = 0;
			РассчитатьСтрокуПартийПоПартиям(ТекСтрока);
		КонецЕсли; 
	КонецЕсли; 	
	
	ОбновитьИтоговыеОчки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговыеОчки()
	СуммаИтогов1 = ТаблицаПартий.Итог("Итог1");
	СуммаИтогов2 = ТаблицаПартий.Итог("Итог2");
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтрокуПартийПоПартиям(СтрокаПартии)
	
	мВсегоПартийДляВыигрыша = ОпределитьКолПартий();
	//считаем по этой строке все значения
	мИтогПартий1 = 0;
	мИтогПартий2 = 0;
	ПартияЗакончилась = Ложь;
	Для Партии = 1 По КолПартий Цикл
		//Если СтрокаПартии.Расстановка1 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара")
		//	Или СтрокаПартии.Расстановка2 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара") Тогда
		//Иначе		
			ЗначСтрокиПартии = СокрЛП(СтрокаПартии["Игра"+Партии]);
			Если ЗначСтрокиПартии <> "" Тогда
				Если Лев(ЗначСтрокиПартии,1) = "-" Тогда //очко для второй команды
					мИтогПартий2 = мИтогПартий2 + 1;
				Иначе //выиграл первый
					мИтогПартий1 = мИтогПартий1 + 1;
				КонецЕсли; 
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла; 
	//определим выигравшего и проигравшего
	Если мИтогПартий1 = мВсегоПартийДляВыигрыша Тогда
		ПартияЗакончилась = Истина;
		ИтогСтроки1 = 1;
		ИтогСтроки2 = 0;
	ИначеЕсли мИтогПартий2 = мВсегоПартийДляВыигрыша Тогда 
		ПартияЗакончилась = Истина;
		ИтогСтроки1 = 0;
		ИтогСтроки2 = 1;
	Иначе
		ПартияЗакончилась = Ложь;
	КонецЕсли;
	СтрокаПартии.ОбщийРезультат1 = мИтогПартий1;
	СтрокаПартии.ОбщийРезультат2 = мИтогПартий2;
	
	Если ПартияЗакончилась Тогда
		//ставим единичку
		СтрокаПартии.Итог1 = ИтогСтроки1;
		СтрокаПартии.Итог2 = ИтогСтроки2;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПоискСсылкиНаИгрокаТаДок(НомерИгры)
	
	Данные = Новый Структура;
	МассивСтрок = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгры));
	Если МассивСтрок.Количество() > 0 Тогда
		Строка = МассивСтрок[0];
		Данные.Вставить("Игрок1",Строка.Команда1);
		Данные.Вставить("Игрок2",Строка.Команда2);
		Данные.Вставить("Очки1", Строка.Итог1);
		Данные.Вставить("Очки2", Строка.Итог2);
		Данные.Вставить("КолПартий",КолПартий);
		Данные.Вставить("ТехническоеВ",Строка.ТехническоеВ);
		Данные.Вставить("ТехническоеП",Строка.ТехническоеП);
	Иначе
		Данные.Вставить("Игрок1",Неопределено);
		Данные.Вставить("Игрок2",Неопределено);
		Данные.Вставить("ТехническоеВ",Ложь);
		Данные.Вставить("ТехническоеП",Ложь);
		Данные.Вставить("Очки1", 0);
		Данные.Вставить("Очки2", 0);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Функция ПоискИгроковПоРасшифровкеНомера(НомерИгры,ДляИгрока = Ложь)
	
	//определим кого будем искать выигравшего или проигравшего
	Если ДляИгрока Тогда //в расшифровке было Игрок
		Данные = Новый Структура;
		МассивСтроки = НачальныеИгры.НайтиСтроки(Новый Структура("ЭтапВСхеме",НомерИгры));
		Если МассивСтроки.Количество() > 0 Тогда
			Строка = МассивСтроки[0];
			Данные.Вставить("Игрок1",Строка.Команда1);
			Данные.Вставить("Игрок2",Строка.Команда2);
		Иначе
			Данные.Вставить("Игрок1",Неопределено);
			Данные.Вставить("Игрок2",Неопределено);
		КонецЕсли;
		
		Возврат Данные;
	Иначе //ищем участников которые выиграли
		//НомерИгры - структура
		//	Данные = Новый Структура;
		//	МассивСтроки = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("ЭтапВСхеме",НомерИгры.Игра1));
		//	МассивСтроки2 = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("ЭтапВСхеме",НомерИгры.Игра2));
		//	Если МассивСтроки.Количество() > 0 Тогда
		//		Строка = МассивСтроки[0];
		//		Данные.Вставить("Игрок1",Строка.Выигравший);
		//	Иначе
		//		Данные.Вставить("Игрок1",Неопределено);
		//	КонецЕсли;
		//	Если МассивСтроки2.Количество() > 0 Тогда
		//		Строка = МассивСтроки2[0];
		//		Данные.Вставить("Игрок2",Строка.Выигравший);
		//	Иначе
		//		Данные.Вставить("Игрок2",Неопределено);
		//	КонецЕсли;
		//	
		//	Возврат Данные;
		//КонецЕсли;
		ТекРасшифровка = НомерИгры;
		Если Найти(ТекРасшифровка,"ИграМ") > 0 Тогда
			ИскатьВыиграшего = Ложь;
			НомерИгры = СтрЗаменить(ТекРасшифровка,"ИграМ","");
		Иначе
			ИскатьВыиграшего = Истина;
			НомерИгры = СтрЗаменить(ТекРасшифровка,"Игра","");
		КонецЕсли;
		
		МассивСтроки = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",Число(НомерИгры)));
		Если МассивСтроки.Количество() > 0 Тогда
			СтрокаДанных = МассивСтроки[0];
			Если СтрокаДанных.Итог1 > СтрокаДанных.Итог2 Тогда
				Если ИскатьВыиграшего Тогда
					Возврат МассивСтроки[0].Команда1;	
				Иначе
					Возврат МассивСтроки[0].Команда2;	
				КонецЕсли;
			Иначе
				Если ИскатьВыиграшего Тогда
					Возврат МассивСтроки[0].Команда2;	
				Иначе
					Возврат МассивСтроки[0].Команда1;	
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьПараметрыТабличногоДокумента()
	
	ТабДок.Очистить();
	Макет = Документы.ПроведениеСоревнования.ПолучитьМакет(ИмяМакета);
	//заполним участников из тч Участники по жеребьевке
	ЗаполнитьКомандыВТаблице(Макет);	
	//все данные у нас уже есть, поэтому просто перебираем их
	Результат = ТаблицаОбщихДанных.Выгрузить();
	Если Результат.Количество() > 0 Тогда //проверяем данные
		ЗаполнениеСетки(Макет,Результат);
	КонецЕсли;
	//заголовок
	МакетЗаголовкаИПодвала = Документы.ПроведениеСоревнования.ПолучитьМакет("ТаблицаГрупп");
	ОбластьЗаголовка = Документы.ПроведениеСоревнования.ПолучитьОбластьЗаголовка(ТекстЗаголовкаТабДока,СсылкаНаДок.ДопИнф);
	ТабДок.Вывести(ОбластьЗаголовка);
	ТабДок.Вывести(Макет);
	//подвал
	ОбластьПодвал = МакетЗаголовкаИПодвала.ПолучитьОбласть("Подвал");
	Если ЗначениеЗаполнено(СсылкаНаДок.ГлавныйСудья) Тогда
		ОбластьПодвал.Параметры.глСудья = ОбщийКлиентСервер.СформироватьИмяИгрока(СсылкаНаДок.ГлавныйСудья);
	КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаНаДок.Секретарь) Тогда
		ОбластьПодвал.Параметры.Секретарь = ОбщийКлиентСервер.СформироватьИмяИгрока(СсылкаНаДок.Секретарь);
	КонецЕсли;
	ТабДок.Вывести(ОбластьПодвал);
	//выведем в список игр количество
	ЗаполнитьЗаголовокСпискаИгр();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводнуюТаблицу()
	
	ТаблицаОбщихДанных.Очистить();
	Результат = ПолучитьСводнуюТаблицаИзОбщей();
	ЗначениеВРеквизитФормы(Результат,"ТаблицаОбщихДанных");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовокСпискаИгр()
	
	Текст = "";
	втТекст = "";
	
	ВсегоИгр = СоответствияИгр.Количество();
	мСводнаяТаблица = ПолучитьСводнуюТаблицаИзОбщей();
	
	Сыграно = мСводнаяТаблица.Количество();
	Остаток = ВсегоИгр - Сыграно;
	Текст = "Всего: "+ВсегоИгр+"   Сыграно: "+Сыграно+"   Осталось: "+Остаток;
	Если КолПартий = 3 Тогда
		мВремя = 17*60; //17 минут
	ИначеЕсли КолПартий = 5 Тогда
		мВремя = 27*60;//27 минут
	ИначеЕсли КолПартий = 7 Тогда
		мВремя = 35*60;//35 минут
	КонецЕсли; 
	Если Остаток <> 0 И КолСтолов <> 0 Тогда
		мИгр = Цел(Остаток/КолСтолов);
		мОстатокИгр = Остаток - мИгр*КолСтолов;
		ОбщееВремя = мИгр*мВремя + мОстатокИгр*мВремя;
		втТекст = Символ(8776)+" "+ОбщийКлиентСервер.ОбработатьСекундыНаВремя(ОбщееВремя);
		Если ЗначениеЗаполнено(СсылкаНаДок.ДатаНачала) Тогда
			мДата = НачалоДня(СсылкаНаДок.Дата);	
			втДата = Дата(Год(мДата),Месяц(мДата),День(мДата),Час(СсылкаНаДок.ДатаНачала),Минута(СсылкаНаДок.ДатаНачала),Секунда(СсылкаНаДок.ДатаНачала));
			втДата = Формат(втДата + ОбщееВремя,"ДЛФ=DT");
			втТекст = втТекст+", "+Символ(8776)+" дата окончания: "+втДата;
		КонецЕсли;
		Текст = Текст+" "+втТекст;
	КонецЕсли; 
	ЗаголовокКоличества = Текст;
	//Элементы.ЗаголовокКоличества.Заголовок = Текст;
	      
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеСетки(Область,Таблица)
	
	Для Каждого ТекЗначение Из Таблица Цикл
		//по номеру найдем все очки
		Если ТекЗначение.Итог1 > ТекЗначение.Итог2 Тогда
			мВыигравшаяКоманда 		= ТекЗначение.Команда1;
			мПроигравшаяКоманда 	= ТекЗначение.Команда2;
			мСчетВыигравшего			= ТекЗначение.Итог1;
			мСчетПроигравшего			= ТекЗначение.Итог2;
		Иначе
			мВыигравшаяКоманда =  ТекЗначение.Команда2;
			мПроигравшаяКоманда = ТекЗначение.Команда1;
			мСчетВыигравшего			= ТекЗначение.Итог2;
			мСчетПроигравшего			= ТекЗначение.Итог1;
		КонецЕсли; 
		//сначала определим куда записать выигравшего
		ПредставлениеВыигравшего = СоответствияИгроков.НайтиСтроки(Новый Структура("НазваниеКоманды",мВыигравшаяКоманда));
		Если ПредставлениеВыигравшего.Количество() > 0 Тогда
			ПредставлениеИгрока = ПредставлениеВыигравшего[0].ПредставлениеИгрока;
		Иначе
			ПредставлениеИгрока= Строка(мВыигравшаяКоманда);
		КонецЕсли;
		Если ТекЗначение.ТехническоеП Тогда
			ПредставлениеИгрока = ПредставлениеИгрока;// + " (Техн.)";
		Иначе
			ПредставлениеИгрока = ПредставлениеИгрока + " "+Строка(мСчетВыигравшего)+":"+ Строка(мСчетПроигравшего);
		КонецЕсли;
				
		Область.Параметры["Игра"+ТекЗначение.НомерГруппы] = ПредставлениеИгрока;
		
		ДанныеРасшифровки = СоответствияИгр.НайтиСтроки(Новый Структура("Игра",ТекЗначение.НомерГруппы))[0].Расшифровка;
		Область.Параметры["РИгра"+ТекЗначение.НомерГруппы] = ДанныеРасшифровки;
		
		//теперь проигравшего                                                                                              
		ПредставлениеПроигравшего = СоответствияИгроков.НайтиСтроки(Новый Структура("НазваниеКоманды",мПроигравшаяКоманда));
		Если ПредставлениеПроигравшего.Количество() > 0 Тогда
			ПредставлениеИгрока = ПредставлениеПроигравшего[0].ПредставлениеИгрока;
		Иначе
			ПредставлениеИгрока= Строка(мПроигравшаяКоманда);
		КонецЕсли;
		
		Если РежимТура <> Перечисления.РежимыТуровСоревнования.Олимпийка Тогда
			Если Не ЗначениеЗаполнено(ПредставлениеИгрока) Тогда
				//просто заполним данные расшифровки 
				Область.Параметры["РИграМ"+ТекЗначение.НомерГруппы] = ДанныеРасшифровки;
				Продолжить;
			КонецЕсли;
			
			Если ТекЗначение.ТехническоеВ Тогда
				ПредставлениеИгрока = ПредставлениеИгрока;// + " (Техн.)";
			Иначе
				ПредставлениеИгрока = ПредставлениеИгрока + " "+Строка(мСчетПроигравшего)+":"+ Строка(мСчетВыигравшего);
			КонецЕсли;
						
			Область.Параметры["ИграМ"+ТекЗначение.НомерГруппы] = ПредставлениеИгрока;
			Область.Параметры["РИграМ"+ТекЗначение.НомерГруппы] = ДанныеРасшифровки;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьНеопределенныеРасшифровки(Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПартию(ИДСтроки = Неопределено)
	
	СтрокаДанных = ТаблицаПартий.НайтиПоИдентификатору(ИДСтроки);
	ДанныеПоСтроке = РазложитьСтрокуНаДанные(СтрокаДанных);	
	
	ЭтотОбъект.Модифицированность = Истина;
	ТЧДока = ВсяТаблицаОбщихДанных;
	//попробуем найти эту пару
	Отбор = Новый Структура;                               
	Отбор.Вставить("Расстановка1",ДанныеПоСтроке.Расстановка1);
	Отбор.Вставить("Расстановка2",ДанныеПоСтроке.Расстановка2);
	Отбор.Вставить("НомерТура",НомерТура);
	Отбор.Вставить("НомерГруппы",НомерИгрыТабДока);
	ИскомыеСтроки = ТЧДока.НайтиСтроки(Отбор);
	Если ИскомыеСтроки.Количество() > 0 Тогда //строки уже есть перезаполняем
		Для Каждого ТекСтрока Из ИскомыеСтроки Цикл
			ТЧДока.Удалить(ТЧДока.Индекс(ТекСтрока));
		КонецЦикла;
	КонецЕсли;
	СчЗаписанныхПартий = 0;
	Для Н = 1 По КолПартий Цикл
		ЗначПартии= ДанныеПоСтроке["Партия"+Н];
		Если ЗначПартии = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СчЗаписанныхПартий = СчЗаписанныхПартий + 1;
		Если ДанныеПоСтроке.Расстановка1 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара")
			И ДанныеПоСтроке.Расстановка2 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара") Тогда
			Для П = 0 По 1 Цикл
				НовСтрока = ТЧДока.Добавить();
				НовСтрока.НомерТура = НомерТура;
				НовСтрока.РежимТура = РежимТура;
				НовСтрока.Команда1 = НаименованиеКоманда1;
				НовСтрока.Расстановка1 = ДанныеПоСтроке.Расстановка1;
				НовСтрока.Команда2 = НаименованиеКоманда2;
				НовСтрока.Расстановка2 = ДанныеПоСтроке.Расстановка2;
				НовСтрока.НомерГруппы = НомерИгрыТабДока;
				НовСтрока.НомерСета = Н;
				Если ДанныеПоСтроке.Участник1.Количество() = 0 Тогда
					НовСтрока.Участник1 = ПредопределенноеЗначение("Справочник.Участники.ПустаяСсылка");
				Иначе
					НовСтрока.Участник1 = ДанныеПоСтроке.Участник1[П].Значение;
				КонецЕсли;
				Если ДанныеПоСтроке.Участник2.Количество() = 0 Тогда
					НовСтрока.Участник2 = ПредопределенноеЗначение("Справочник.Участники.ПустаяСсылка");
				Иначе
					НовСтрока.Участник2 = ДанныеПоСтроке.Участник2[П].Значение;
				КонецЕсли;
				НовСтрока.КолШаров	   = Число(ЗначПартии);
				Если Лев(ЗначПартии,1) = "-" Тогда
					НовСтрока.ОчкиВыигравшего = 0;
					НовСтрока.ОчкиПроигравшего= 1;
				Иначе
					НовСтрока.ОчкиВыигравшего = 1;
					НовСтрока.ОчкиПроигравшего= 0;
				КонецЕсли;
				НовСтрока.ТехническоеВ = ДанныеПоСтроке.Техническое1;
				НовСтрока.ТехническоеП = ДанныеПоСтроке.Техническое2; 
			КонецЦикла; 
		Иначе
			НовСтрока = ТЧДока.Добавить();
			НовСтрока.НомерТура = НомерТура;
			НовСтрока.РежимТура = РежимТура;
			НовСтрока.Команда1 = НаименованиеКоманда1;
			НовСтрока.Расстановка1 = ДанныеПоСтроке.Расстановка1;
			НовСтрока.Команда2 = НаименованиеКоманда2;
			НовСтрока.Расстановка2 = ДанныеПоСтроке.Расстановка2;
			НовСтрока.НомерГруппы = НомерИгрыТабДока;
			НовСтрока.НомерСета = Н;
			НовСтрока.Участник1 = ДанныеПоСтроке.Участник1;
			НовСтрока.Участник2 = ДанныеПоСтроке.Участник2;
			НовСтрока.КолШаров	   = Число(ЗначПартии);
			Если Лев(ЗначПартии,1) = "-" Тогда
				НовСтрока.ОчкиВыигравшего = 0;
				НовСтрока.ОчкиПроигравшего= 1;
			Иначе
				НовСтрока.ОчкиВыигравшего = 1;
				НовСтрока.ОчкиПроигравшего= 0;
			КонецЕсли; 
			НовСтрока.ТехническоеВ = ДанныеПоСтроке.Техническое1;
			НовСтрока.ТехническоеП = ДанныеПоСтроке.Техническое2; 
		КонецЕсли; 
	КонецЦикла;
	Если СчЗаписанныхПартий = 0 Тогда //ввод по партиям или техническое
		Если ДанныеПоСтроке.Расстановка1 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара")
			И ДанныеПоСтроке.Расстановка2 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара") Тогда
			Для П = 0 По 1 Цикл
				НовСтрока = ТЧДока.Добавить();
				НовСтрока.НомерТура = НомерТура;
				НовСтрока.РежимТура = РежимТура;
				НовСтрока.Команда1 = НаименованиеКоманда1;
				НовСтрока.Расстановка1 = ДанныеПоСтроке.Расстановка1;
				НовСтрока.Команда2 = НаименованиеКоманда2;
				НовСтрока.Расстановка2 = ДанныеПоСтроке.Расстановка2;
				НовСтрока.НомерГруппы = НомерИгрыТабДока;
				НовСтрока.НомерСета = 1;
				Если ДанныеПоСтроке.Участник1.Количество() = 0 Тогда
					НовСтрока.Участник1 = ПредопределенноеЗначение("Справочник.Участники.ПустаяСсылка");
				Иначе
					НовСтрока.Участник1 = ДанныеПоСтроке.Участник1[П].Значение;
				КонецЕсли; 
				Если ДанныеПоСтроке.Участник2.Количество() = 0 Тогда
					НовСтрока.Участник2 = ПредопределенноеЗначение("Справочник.Участники.ПустаяСсылка");
				Иначе
					НовСтрока.Участник2 = ДанныеПоСтроке.Участник2[П].Значение;
				КонецЕсли;
				НовСтрока.ОчкиВыигравшего = ДанныеПоСтроке.Итог1;
				НовСтрока.ОчкиПроигравшего= ДанныеПоСтроке.Итог2;
				НовСтрока.ТехническоеВ = ДанныеПоСтроке.Техническое1;
				НовСтрока.ТехническоеП = ДанныеПоСтроке.Техническое2; 
			КонецЦикла; 
		Иначе
			НовСтрока = ТЧДока.Добавить();
			НовСтрока.НомерТура = НомерТура;
			НовСтрока.РежимТура = РежимТура;
			НовСтрока.Команда1 = НаименованиеКоманда1;
			НовСтрока.Расстановка1 = ДанныеПоСтроке.Расстановка1;
			НовСтрока.Команда2 = НаименованиеКоманда2;
			НовСтрока.Расстановка2 = ДанныеПоСтроке.Расстановка2;
			НовСтрока.НомерГруппы = НомерИгрыТабДока;
			НовСтрока.НомерСета = 1;
			НовСтрока.Участник1 = ДанныеПоСтроке.Участник1;
			НовСтрока.Участник2 = ДанныеПоСтроке.Участник2;
			НовСтрока.ОчкиВыигравшего = ДанныеПоСтроке.Итог1;
			НовСтрока.ОчкиПроигравшего= ДанныеПоСтроке.Итог2;
			НовСтрока.ТехническоеВ = ДанныеПоСтроке.Техническое1;
			НовСтрока.ТехническоеП = ДанныеПоСтроке.Техническое2; 
		КонецЕсли; 
	КонецЕсли; 
	//---
	//обновить сводную таблицу из общей
	ВыполнитьДействияПослеЗаписиИгры();
	//
	////теперь очистим игру в таблице столов если она там есть
	//ОчиститьТаблицуМониторинга(НомерИгрыТабДока);
	
КонецПроцедуры

&НаКлиенте
Функция РазложитьСтрокуНаДанные(СтрокаТаблицы)
	
	мИтогПартий1 = 0;
	мИтогПартий2 = 0;
	Данные = Новый Структура;
	СчЗаписанныхПартий = 0;
	Для Н = 1 По КолПартий Цикл
		ЗначСтрокиПартии = СокрЛП(СтрокаТаблицы["Игра"+Н]);
		Если ЗначСтрокиПартии <> "" Тогда
			Если Лев(ЗначСтрокиПартии,1) = "-" Тогда //очко для второй команды
				мИтогПартий2 = мИтогПартий2 + 1;
			Иначе //выиграл первый
				мИтогПартий1 = мИтогПартий1 + 1;
			КонецЕсли; 
			Данные.Вставить("Партия"+Н,ЗначСтрокиПартии);
			СчЗаписанныхПартий = СчЗаписанныхПартий + 1;
		Иначе
			Данные.Вставить("Партия"+Н,Неопределено);
		КонецЕсли;
	КонецЦикла;
	Если СчЗаписанныхПартий = 0 Тогда
		мИтогПартий1 = СтрокаТаблицы.ОбщийРезультат1;
		мИтогПартий2 = СтрокаТаблицы.ОбщийРезультат2;
	КонецЕсли; 
	
	Если мИтогПартий1 > мИтогПартий2 Тогда
		Данные.Вставить("Выигравший",СтрокаТаблицы.Участник1);
		Данные.Вставить("Проигравший",СтрокаТаблицы.Участник2);
		Данные.Вставить("ИтогВыигравшего",мИтогПартий1);
		Данные.Вставить("ИтогПроигравшего",мИтогПартий2);
	Иначе
		Данные.Вставить("Выигравший",СтрокаТаблицы.Участник2);
		Данные.Вставить("Проигравший",СтрокаТаблицы.Участник1);
		Данные.Вставить("ИтогВыигравшего",мИтогПартий2);
		Данные.Вставить("ИтогПроигравшего",мИтогПартий1);
	КонецЕсли; 
	Данные.Вставить("Расстановка1",СтрокаТаблицы.Расстановка1);
	Данные.Вставить("Расстановка2",СтрокаТаблицы.Расстановка2);
	Данные.Вставить("Участник1",СтрокаТаблицы.Участник1);
	Данные.Вставить("Участник2",СтрокаТаблицы.Участник2);
	Данные.Вставить("Итог1",мИтогПартий1);
	Данные.Вставить("Итог2",мИтогПартий2);
	Данные.Вставить("Техническое1",СтрокаТаблицы.Техническое1);
	Данные.Вставить("Техническое2",СтрокаТаблицы.Техническое2);
	
	Возврат Данные;
	
КонецФункции
 
&НаКлиенте
Процедура АктивироватьТекущуюИгруВтаблице()
	//процедура вызывается всегда ДО обнуления номера игры
	//ищем в сводной только что добавленую игру
	//МассивИгры = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгрыТабДока));
	//Если МассивИгры.Количество() > 0 Тогда
	//	Элементы.ТаблицаОбщихДанных.ТекущаяСтрока = МассивИгры[0].ПолучитьИдентификатор();
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗакрыть(Команда)
	//Если ЭтотОбъект.Модифицированность Тогда
	//	Ответ = Вопрос("Данные НЕ БУДУТ СОХРАНЕНЫ. Закрыть форму?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		ЭтотОбъект.Закрыть();
	//	КонецЕсли;
	//Иначе
		ЭтотОбъект.Закрыть();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПартию(Команда)
	
	ТекСтрока = Элементы.ТаблицаПартий.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеПоСтроке = РазложитьСтрокуНаДанные(ТекСтрока); 
		
	ОчкиПартии1Табл = ДанныеПоСтроке.Итог1;
	ОчкиПартии2Табл = ДанныеПоСтроке.Итог2;
	
	Выигравший  = ДанныеПоСтроке.Выигравший;
	Проигравший = ДанныеПоСтроке.Проигравший;
	ОчкиВыигравшего  = ДанныеПоСтроке.ИтогВыигравшего;
	ОчкиПроигравшего = ДанныеПоСтроке.ИтогПроигравшего;
	
	Если ОчкиПартии1Табл = 0 И ОчкиПартии2Табл = 0 Тогда
		Возврат;
	КонецЕсли; 
		
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьПартиюЗавершение", ЭтотОбъект,
		Новый Структура("ДанныеПоСтроке, ТекСтрока", ДанныеПоСтроке, ТекСтрока)), "Вы уверены, что хотите удалить результат игры между
																				  |" + Выигравший + " "
		+ ОчкиВыигравшего + ":" + ОчкиПроигравшего + " " + Проигравший + "", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПартиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ДанныеПоСтроке = ДополнительныеПараметры.ДанныеПоСтроке;
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	Отбор = Новый Структура;                               
	Отбор.Вставить("Расстановка1",ДанныеПоСтроке.Расстановка1);
	Отбор.Вставить("Расстановка2",ДанныеПоСтроке.Расстановка2);
	Отбор.Вставить("НомерТура",НомерТура);
	Отбор.Вставить("НомерГруппы",НомерИгрыТабДока);
	ИскомыеСтроки = ВсяТаблицаОбщихДанных.НайтиСтроки(Отбор);
	Для СтрМ = 0 По ИскомыеСтроки.ВГраница() Цикл
		ТекСтрокаУдаления = ИскомыеСтроки[СтрМ];
		Если СтрМ = (ИскомыеСтроки.Количество() - 1) Тогда
			//удалять не будем
			ТекСтрокаУдаления.КолШаров = 0;
			ТекСтрокаУдаления.НомерСета = 1;
			ТекСтрокаУдаления.ОчкиПроигравшего = 0;
			ТекСтрокаУдаления.ОчкиВыигравшего = 0;
		Иначе
			ВсяТаблицаОбщихДанных.Удалить(ВсяТаблицаОбщихДанных.Индекс(ТекСтрокаУдаления));		
		КонецЕсли; 
	КонецЦикла;
	
	Для Н = 1 По КолПартий Цикл
		ТекСтрока["Игра"+Н] = "";
	КонецЦикла; 
	ТекСтрока.Итог1 = 0;
	ТекСтрока.Итог2 = 0;
	ТекСтрока.ОбщийРезультат1 = 0;
	ТекСтрока.ОбщийРезультат2 = 0;
	ТекСтрока.Техническое1 = Ложь;
	ТекСтрока.Техническое2 = Ложь;
	ОбновитьИтоговыеОчки();
	
	ЭтотОбъект.Модифицированность = Истина;
	
	ВыполнитьДействияПослеЗаписиИгры();

КонецПроцедуры

&НаКлиенте
Функция ОпределитьКолПартий()
	
	Если КолПартий = 3 Тогда
		ИтогСтроки = 2;
	ИначеЕсли КолПартий = 5 Тогда
		ИтогСтроки = 3;
	ИначеЕсли КолПартий = 7 Тогда
		ИтогСтроки = 4;
	КонецЕсли;
	Возврат ИтогСтроки;
	
КонецФункции

&НаСервере
Функция ОпределитьКолПартийНаСервере()
	
	Если КолПартий = 3 Тогда
		ИтогСтроки = 2;
	ИначеЕсли КолПартий = 5 Тогда
		ИтогСтроки = 3;
	ИначеЕсли КолПартий = 7 Тогда
		ИтогСтроки = 4;
	КонецЕсли;
	Возврат ИтогСтроки;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаОбщихДанныхПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбщихДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьСписокИгр(Команда)
	Если Элементы.Группа7.Видимость Тогда
		Элементы.Группа7.Видимость = Ложь;
		Элементы.ВызватьНаСтол.Видимость = Ложь;
	Иначе
		Элементы.Группа7.Видимость = Истина;
		Элементы.ВызватьНаСтол.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбщихДанныхПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.ТаблицаОбщихДанных.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ДанныеИгры = Новый Структура;
		ДанныеИгры.Вставить("Игрок1",ТекСтрока.Выигравший);
		ДанныеИгры.Вставить("Игрок2",ТекСтрока.Проигравший);
		ДанныеИгры.Вставить("КолПартий",КолПартий);
		ДанныеИгры.Вставить("Очки1",ТекСтрока.ОчкиВыигравшего);
		ДанныеИгры.Вставить("Очки2",ТекСтрока.ОчкиПроигравшего);
		ДанныеИгры.Вставить("ТехническоеВ",ТекСтрока.ТехническоеВ);
		ДанныеИгры.Вставить("ТехническоеП",ТекСтрока.ТехническоеП);
		НомерИгрыТабДока = ТекСтрока.НомерГруппы;
		ЗаполнениеТабличкиПартий(ДанныеИгры);
		//	ИскомаяОбласть = ТабДок.НайтиТекст(ТекСтрока.НомерГруппы,,,,Истина,,Истина);
		//	Если ИскомаяОбласть <> Неопределено Тогда
		//		ТабДок.ТекущаяОбласть = ТабДок.Область(ИскомаяОбласть.Имя);
		//	КонецЕсли;
	КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтоловПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтоловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВызватьНаСтол(Команда)
	
	//ТекСтрокаСтола = Элементы.ТаблицаСтолов.ТекущиеДанные;
	//Если ТекСтрокаСтола = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	////стол уже может быть занят проверим
	//Если ТекСтрокаСтола.НомерИгры <> 0 Тогда
	//	//проверим, а есть ли свободные столы
	//	ЕстьСвободные = Ложь;
	//	Для каждого ТекСтол Из ТаблицаСтолов Цикл
	//		Если ТекСтол.НомерИгры = 0 Тогда
	//			ЕстьСвободные = Истина;
	//			Прервать;
	//		КонецЕсли; 
	//	КонецЦикла;
	//	Если ЕстьСвободные Тогда
	//		ТекСтрокаСтола = ТекСтол;
	//	Иначе
	//		ПоказатьОповещениеПользователя("Ошибка",,"На столе уже играют!",БиблиотекаКартинок.Информация);
	//		Возврат;
	//	КонецЕсли; 
	//КонецЕсли;
	
	//теперь проверим есть ли эта игра уже в общей таблице
	МассивИгр = ВсяТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгрыТабДока));
	Если МассивИгр.Количество() > 0 Тогда //игра уже есть вызывать не нужно
		Возврат;
	КонецЕсли;
	////и есть ли эта игра уже в списке столов
	//МассивИгр = ТаблицаСтолов.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
	//Если МассивИгр.Количество() > 0 Тогда //игра уже есть вызывать не нужно
	//	Возврат;
	//КонецЕсли;
	СписокСвободныхСтолов = Новый СписокЗначений;
	Для М = 1 По КолСтолов Цикл
		СписокСвободныхСтолов.Добавить(М,,,БиблиотекаКартинок.СтолПоНастольномуТеннису);
	КонецЦикла;
	//посмотрим какие столы заняты
	Для каждого ТекСтр Из ТаблицаМониторинга Цикл 
		Если ТекСтр.НомерСтола = 0 Тогда
			Продолжить;
		КонецЕсли; 
		Искомый = СписокСвободныхСтолов.НайтиПоЗначению(ТекСтр.НомерСтола);
		Если Искомый <> Неопределено Тогда
			СписокСвободныхСтолов.Удалить(Искомый);	
		КонецЕсли; 
	КонецЦикла; 
	Если СписокСвободныхСтолов.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Нет свободных столов!");
		Возврат;
	КонецЕсли; 
		
	СписокСвободныхСтолов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВызватьНаСтолЗавершение", ЭтотОбъект),
		"Какой стол?");

КонецПроцедуры

&НаКлиенте
Процедура ВызватьНаСтолЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранныйСтол = ВыбранныйЭлемент;
	Если ВыбранныйСтол <> Неопределено Тогда
		ИскомаяИгра = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
		Если ИскомаяИгра.Количество() > 0 Тогда
			ИскомаяИгра[0].Участник1 = ПервыйИгрокТабл;
			ИскомаяИгра[0].Участник2 = ВторойИгрокТабл;
			ИскомаяИгра[0].НомерСтола = ВыбранныйСтол.Значение;
			ИскомаяИгра[0].ВремяВызова = ТекущаяДата();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтоловПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.ТаблицаСтолов.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) И ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			ДанныеИгры = Новый Структура;
			ДанныеИгры.Вставить("Игрок1",ТекСтрока.Участник1);
			ДанныеИгры.Вставить("Игрок2",ТекСтрока.Участник2);
			ДанныеИгры.Вставить("КолПартий",КолПартий);
			ДанныеИгры.Вставить("Очки1",0);
			ДанныеИгры.Вставить("Очки2",0);
			ДанныеИгры.Вставить("ТехническоеВ",Ложь);
			ДанныеИгры.Вставить("ТехническоеП",Ложь);
			НомерИгрыТабДока = ТекСтрока.НомерИгры;
			ЗаполнениеТабличкиПартий(ДанныеИгры);
			//пока Контекстное меню оставим на потом
			////и обновим контекстное меню
			//МаксимумПартий = ОпределитьКолПартий();
			//Для М = 0 По МаксимумПартий-1 Цикл
			//	СтрокаЗаголовка = Строка(ТекСтрока.Участник1)+" "+МаксимумПартий+":"+М+" "+Строка(ТекСтрока.Участник2);
			//	Элементы["ТаблицаСтоловКонтекстноеМенюКомандаБыстрыйВвод"+М].Заголовок = СтрокаЗаголовка;
			//КонецЦикла; 
			////2 вариант
			////Для М = 0 По МаксимумПартий-1 Цикл
			////	мСписок.Добавить("2_"+М,Строка(парУчастник2)+" "+МаксимумПартий+":"+М+" "+Строка(парУчастник1)+Пробел10);
			////КонецЦикла; 
			////мСписок.Добавить("2_W",Строка(парУчастник2)+" W/L "+Строка(парУчастник1)+Пробел10);
		Иначе
			ТаблицаПартий.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьВремяВызоваПоСтрокам()
	
	Для каждого ТекСтол Из ТаблицаМониторинга Цикл РассчитатьСтрокуСоВременем(ТекСтол); КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтрокуСоВременем(ТекСтрокаСтола)
	
	Если ТекСтрокаСтола.ВремяВызова <> Дата('00010101') Тогда
		ТекСтрокаСтола.ПрошлоСекунд = ТекСтрокаСтола.ПрошлоСекунд + 1;
		ТекСтрокаСтола.СколькоВремениПрошло = ОбщийКлиентСервер.ОбработатьСекундыНаВремя(ТекСтрокаСтола.ПрошлоСекунд);
		МассивПроверенныхОбластей = Новый Массив;
		ИскатьЯчеку = Истина;
		//раскрасим область
		Пока ИскатьЯчеку Цикл
			Если МассивПроверенныхОбластей.Количество() = 0 Тогда
				ИскомаяОбласть = ТабДок.НайтиТекст(ТекСтрокаСтола.НомерИгры,,,,Истина,,Истина);
			Иначе
				ИскомаяОбласть = ТабДок.НайтиТекст(ТекСтрокаСтола.НомерИгры,МассивПроверенныхОбластей[МассивПроверенныхОбластей.Количество()-1],,,Истина,,Истина);
			КонецЕсли; 
			//НайтиТекст(<Строка>, <Начало>, <Где>, <ИскатьПоСтрокам>, <ЯчейкаЦеликом>, <ИскатьВперед>, <ИгнорироватьРегистр>) 
			//это может быть как номер участника, так и номер игры
			//сместимся вправо на одну ячейку и если там пусто тогда это наша
			Если ИскомаяОбласть <> Неопределено Тогда
				мИмяОбласти = ИскомаяОбласть.Имя;
				НомКолонка = Найти(мИмяОбласти,"C");
				ИмяСледОбластиВправо = Лев(мИмяОбласти,НомКолонка-1);
				ЗначКолонки = Число(Сред(мИмяОбласти,НомКолонка+1,СтрДлина(мИмяОбласти)))+1;
				ИмяСледОбластиВправо = ИмяСледОбластиВправо +"C"+ЗначКолонки; 
				
				СледОбласть = ТабДок.Область(ИмяСледОбластиВправо); 
				ТекстСледОбласти = СледОбласть.Текст;
				Если ТекстСледОбласти = "" Тогда
					СледОбласть.ЦветФона = WebЦвета.БледноЗеленый;
					//ТабДок.ТекущаяОбласть = ТабДок.Область(ИскомаяОбласть.Имя);
					ИскатьЯчеку = Ложь;
				Иначе
					МассивПроверенныхОбластей.Добавить(СледОбласть);
				КонецЕсли; 	
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мЗакрытиеФормы = Истина;
	//Если ТаблицаСтолов.Количество() > 0 Тогда
		//ПодключитьОбработчикОжидания("ПосчитатьВремяВызоваПоСтрокам",1);
	//КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьИгрокаС(Команда)
	
	ТекТекст = Элементы.ТабДок.ТекущаяОбласть.Текст;
	Если ТекТекст = "" Тогда
		Возврат;
	КонецЕсли; 
	МассивСтроки = СоответствияИгроков.НайтиСтроки(Новый Структура("ПредставлениеВСетке",ТекТекст));
	Если МассивСтроки.Количество() > 0 Тогда
		ТекУчастник = МассивСтроки[0].Участник;
	Иначе
		МассивСтроки = СоответствияИгроков.НайтиСтроки(Новый Структура("ПредставлениеИгрока",ТекТекст));
		Если МассивСтроки.Количество() > 0 Тогда
			ТекУчастник = МассивСтроки[0].Участник;
		Иначе 
			ТекУчастник = ПредопределенноеЗначение("Справочник.Участники.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли; 
	СписокУчастниковПоНомеру = ПолучитьСписокУчастниковСНомеромИгры(ТекУчастник);
	Если ТипЗнч(СписокУчастниковПоНомеру) = Тип("Строка") Тогда
		ПоказатьПредупреждение(Неопределено, СписокУчастниковПоНомеру);
		Возврат;
	КонецЕсли; 
	ВыбранноеЗначение = СписокУчастниковПоНомеру.ВыбратьЭлемент("Выберите замену...");
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДанныеДляОбработки = Новый Структура;
		ДанныеДляОбработки.Вставить("РежимТура",РежимТура);
		ДанныеДляОбработки.Вставить("НомерТура",НомерТура);
		ДанныеДляОбработки.Вставить("НомерДляЗамены",ВыбранноеЗначение.Значение);
		ДанныеДляОбработки.Вставить("УчастникЗамены",ТекУчастник);
		ОповеститьОВыборе(ДанныеДляОбработки);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокУчастниковСНомеромИгры(ТекУчастник)
	
	//проверим таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ втВсеДанные ИЗ &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",ТаблицаОбщихДанных.Выгрузить());
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ
	|	втВсеДанные.НомерГруппы,
	|	втВсеДанные.ТехническоеВ,
	|	втВсеДанные.ТехническоеП
	|ИЗ
	|	втВсеДанные КАК втВсеДанные
	|ГДЕ
	|	втВсеДанные.ТехническоеВ = ЛОЖЬ
	|			И втВсеДанные.ТехническоеП = ЛОЖЬ";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Возврат "Нельзя перемещать игроков, когда уже есть сыгранные игры";
	КонецЕсли; 
	
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ Из &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",СсылкаНаДок.УчастникиПоЖеребьевке.Выгрузить());
	Запрос.Выполнить();	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.НомерИгры,
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.Участник
	|ИЗ
	|	ТЗ КАК ПроведениеСоревнованияУчастникиПоЖеребьевке
	|ГДЕ
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.НомерГруппы = 0
	|	И ПроведениеСоревнованияУчастникиПоЖеребьевке.РежимТура = &Режим
	|	И ПроведениеСоревнованияУчастникиПоЖеребьевке.НомерТура = &НомерТура
	|	И ПроведениеСоревнованияУчастникиПоЖеребьевке.Участник <> &Участник";
	Запрос.УстановитьПараметр("Режим",РежимТура);
	Запрос.УстановитьПараметр("НомерТура",НомерТура);
	Запрос.УстановитьПараметр("Участник",ТекУчастник);
	Игроки = Запрос.Выполнить().Выгрузить();
	втСписокСНомерами = Новый СписокЗначений;
	Для каждого ТекСтр Из Игроки Цикл
		втСписокСНомерами .Добавить(ТекСтр.НомерИгры,""+ТекСтр.НомерИгры+" "+ТекСтр.Участник);
	КонецЦикла; 
	
	Возврат втСписокСНомерами;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаПартийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если Число(СуммаИтогов1) = КоличествоПобедВКоманднойИгре Или Число(СуммаИтогов2) = КоличествоПобедВКоманднойИгре Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(,"Командная игра уже сыграна!");
	КонецЕсли; 
	Если Найти(Элемент.ТекущийЭлемент.Имя,"ТаблицаПартийИгра") > 0 Тогда
		Если ТекСтрока.Итог1 = 1 Или ТекСтрока.Итог2 = 1 Тогда
			ИмяЭлемента = Элемент.ТекущийЭлемент.Имя; 
			ЭлИгры = СтрЗаменить(ИмяЭлемента,"ТаблицаПартий","");
			Если ТекСтрока[ЭлИгры] = "" Тогда
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(ТекСтрока.Участник1) ИЛИ 
			Не ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = "Заполните участника(ов) игры!";
			//Сообщение.Поле = "ТаблицаПартий["+ТекСтрока.ПолучитьИдентификатор()+"].Участник1"; 
			//Сообщение.Сообщить(); 
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = "Заполните участника(ов) игры!";
			//Сообщение.Поле = "ТаблицаПартий["+ТекСтрока.ПолучитьИдентификатор()+"].Участник2"; 
			//Сообщение.Сообщить(); 
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли Найти(Элемент.ТекущийЭлемент.Имя,"ТаблицаПартийУчастник") > 0 Тогда
		//проверим результат
		Если ТекСтрока.Итог1 <> 0 Или ТекСтрока.Итог2 <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нельзя изменять данные встречи. Для изменения необходимо удалить результат встречи!";
			//Сообщение.Поле = "ТаблицаПартий["+ТекСтрока.ПолучитьИдентификатор()+"].Участник1"; 
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли  Найти(Элемент.ТекущийЭлемент.Имя,"ТаблицаПартийОбщийРезультат") > 0 Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) ИЛИ ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			//Отказ = Истина;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийИгра1ПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ТаблицаПартий.ТекущиеДанные;	
	ТекНомерЭлемента = Число(Прав(Элемент.Имя,1));
	СледЭлемент = ТекНомерЭлемента+1;
	Если СледЭлемент <= КолПартий Тогда //продвигаем
		ЭтотОбъект.ТекущийЭлемент = Элементы["ТаблицаПартийИгра"+СледЭлемент];
	КонецЕсли; 
	ПосчитатьИтогиПартийДляТаблицы(ТекСтрока);
	Если ТекСтрока.Итог1 = 1 Или ТекСтрока.Итог2 = 1 Тогда
		//записываем партию по строке
		ЗаписатьПартию(ТекСтрока.ПолучитьИдентификатор());
		//активируем след.строку
		ИДТекСтроки = ТаблицаПартий.Индекс(ТекСтрока);
		Если ИДТекСтроки < ТаблицаПартий.Количество() - 1 Тогда
			Элементы.ТаблицаПартий.ТекущаяСтрока = ТаблицаПартий.Получить(ИДТекСтроки+1).ПолучитьИдентификатор();
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТаблицаПартийИгра1;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуМониторинга(мНомерТабДока)
	
	//теперь очистим игру в таблице столов если она там есть
	МассивСтрокВТаблицеСтолов = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
	Если МассивСтрокВТаблицеСтолов.Количество() > 0 Тогда
		//освобождаем стол
		СтрокаТаблицы = МассивСтрокВТаблицеСтолов[0];
		//СтрокаТаблицы.Участник1 = Неопределено;
		//СтрокаТаблицы.Участник2 = Неопределено;
		//СтрокаТаблицы.НомерИгры = 0;
		СтрокаТаблицы.НомерСтола = 0;
		СтрокаТаблицы.ВремяВызова = Дата('00010101');
		СтрокаТаблицы.ПрошлоСекунд = 0;
		СтрокаТаблицы.СколькоВремениПрошло = "";
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура КомандаУбратьСоСтола(Команда)
	СтрокаТаблицы = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		//СтрокаТаблицы.Участник1 = Неопределено;
		//СтрокаТаблицы.Участник2 = Неопределено;
		//СтрокаТаблицы.НомерИгры = 0;
		СтрокаТаблицы.НомерСтола = 0;
		СтрокаТаблицы.ВремяВызова = Дата('00010101');
		СтрокаТаблицы.ПрошлоСекунд = 0;
		СтрокаТаблицы.СколькоВремениПрошло = "";
		НомерИгрыТабДока = СтрокаТаблицы.НомерИгры;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтоловУчастник1НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ТаблицаСтолов.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) И ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			СписокКоманд = ОбновитьКМБыстрогоВвода(ТекСтрока.Участник1,ТекСтрока.Участник2);
			парМаксШирина = 0;
			Элемент.СписокВыбора.Очистить();
			Для каждого ТекЗнач Из СписокКоманд Цикл
				Если СтрДлина(ТекЗнач.Представление) > парМаксШирина Тогда
					парМаксШирина = СтрДлина(ТекЗнач.Представление);
				КонецЕсли;
				Элемент.СписокВыбора.Добавить(ТекЗнач.Значение,ТекЗнач.Представление);
			КонецЦикла; 
			Элемент.ШиринаСпискаВыбора = парМаксШирина;
		КонецЕсли;			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтоловУчастник2НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ТаблицаСтолов.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) И ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			СписокКоманд = ОбновитьКМБыстрогоВвода(ТекСтрока.Участник2,ТекСтрока.Участник1);
			парМаксШирина = 0;
			Элемент.СписокВыбора.Очистить();
			Для каждого ТекЗнач Из СписокКоманд Цикл
				Если СтрДлина(ТекЗнач.Представление) > парМаксШирина Тогда
					парМаксШирина = СтрДлина(ТекЗнач.Представление);
				КонецЕсли;
				Элемент.СписокВыбора.Добавить(ТекЗнач.Значение,ТекЗнач.Представление);
			КонецЦикла; 
			Элемент.ШиринаСпискаВыбора = парМаксШирина;
		КонецЕсли;			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтоловУчастник1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаСтолов.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Данные = Новый Структура;
		Данные.Вставить("ЗначениеСписка",ВыбранноеЗначение);
		Данные.Вставить("СсылкаИгрок1",ТекСтрока.Участник1);
		Данные.Вставить("СсылкаИгрок2",ТекСтрока.Участник2);
		ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтоловУчастник2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаСтолов.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Данные = Новый Структура;
		Данные.Вставить("ЗначениеСписка",ВыбранноеЗначение);
		Данные.Вставить("СсылкаИгрок1",ТекСтрока.Участник2);
		Данные.Вставить("СсылкаИгрок2",ТекСтрока.Участник1);
		ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные);
	КонецЕсли;	
	
КонецПроцедуры

//------------------------------МОНИТОРИНГ--------------------------------
&НаСервере
Процедура ЗаполнитьМониторингИгр()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПорядокИгр.ПриоритетВызова,
	|	ПорядокИгр.НомерИгры
	|ИЗ
	|	РегистрСведений.ПорядокИгр КАК ПорядокИгр
	|ГДЕ
	|	ПорядокИгр.РежимТура = &РежимТура
	|	И ПорядокИгр.КоличествоУчастников = &КоличествоУчастников";
	Запрос.УстановитьПараметр("РежимТура",РежимТура);
	Запрос.УстановитьПараметр("КоличествоУчастников",НумерацияИгроков);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаМониторинга.Очистить();
	Если Результат.Количество() > 0 Тогда
		Для каждого ТекСтр Из Результат Цикл
			НовСтрока = ТаблицаМониторинга.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтр);
		КонецЦикла;
	Иначе
		ВсегоИгр = СоответствияИгр.Количество();
		Для Н = 1 По ВсегоИгр Цикл
			НовСтрока = ТаблицаМониторинга.Добавить();
			НовСтрока.НомерИгры = Н;
		КонецЦикла; 	
	КонецЕсли; 
	
	ОбновитьТаблицуМониторинга();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуМониторинга()
	
	//очистим все значения кроме, номера игры и приоритета вызова
	Для каждого ТекСтр Из ТаблицаМониторинга Цикл
		Если ТекСтр.ВремяВызова <> Дата('00010101') Тогда
			Продолжить;	
		КонецЕсли; 		
		ТекСтр.Очки1										= 0;
		ТекСтр.Очки2										= 0;
		ТекСтр.ТехническоеВ						= Ложь;
		ТекСтр.ТехническоеП						= Ложь;
		ТекСтр.НомерСтола							= 0;
		ТекСтр.ВремяВызова						= Дата('00010101');
		ТекСтр.ПрошлоСекунд						= 0;
		ТекСтр.СколькоВремениПрошло	= "";
		ТекСтр.Участник1								= Справочники.Участники.ПустаяСсылка();
		ТекСтр.Участник2								= Справочники.Участники.ПустаяСсылка();
	КонецЦикла; 
	
	//НачальныеИгры сначала отсюда ставим игры
	Для каждого ТекСтр Из НачальныеИгры Цикл
		ИскомыйНомер = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",ТекСтр.ЭтапВСхеме));
		Если ИскомыйНомер.Количество() > 0 Тогда
			СтрокаМониторинга = ИскомыйНомер[0];
			СтрокаМониторинга.Участник1 = ТекСтр.Выигравший;
			СтрокаМониторинга.Участник2 = ТекСтр.Проигравший;
		КонецЕсли; 
	КонецЦикла; 
	
	//потом заполняем отсюда, для начальных игр будет заполнен счет
	//ВсяТаблицаОбщихДанных
	мСводнаяТаблица = ПолучитьСводнуюТаблицаИзОбщей();
	//сначала заполним мониторинг
	Для каждого СтрокаСводной Из мСводнаяТаблица Цикл
		ИскомыйНомер = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",СтрокаСводной.НомерИгры));
		Если ИскомыйНомер.Количество() > 0 Тогда
			СтрокаМониторинга = ИскомыйНомер[0];
			ЗаполнитьЗначенияСвойств(СтрокаМониторинга,СтрокаСводной);
		КонецЕсли;
	КонецЦикла;
	//придется 2-мя циклами
	//а теперь проставим участников, кто одиночки
	//т.е. раскидаем уже сыгранные игры на другие номера игр
	Для каждого СтрокаСводной Из мСводнаяТаблица Цикл
		//а теперь следующую игру
		//Если СтрокаСводной.ТехническоеВ Или СтрокаСводной.ТехническоеП Тогда
		//это техническое значит участник будет в поле участник1
		//парВыигравший 	= СтрокаСводной.Участник1;
		//парПроигравший	= СтрокаСводной.Участник2;
		//ТекРасшифровкаВыигравш = "Игра"+СтрокаСводной.НомерИгры;
		//ТекРасшифровкаПроигравш = "ИграМ"+СтрокаСводной.НомерИгры; //все равно он будет пустой
		//Иначе
		парВыигравший 	= СтрокаСводной.Участник1;
		парПроигравший	= СтрокаСводной.Участник2;
		ТекРасшифровкаВыигравш 		 = "Игра"+СтрокаСводной.НомерИгры;
		ТекРасшифровкаПроигравш		 = "ИграМ"+СтрокаСводной.НомерИгры;
		
		СледИграВыигравшего 	= НайтиНомерИгрыПоРасшифровке(ТекРасшифровкаВыигравш);
		СледИграПроигравшего 	= НайтиНомерИгрыПоРасшифровке(ТекРасшифровкаПроигравш);
		//теперь ищем эти игры в мониторинге и ставим участников в не заполненное место
		ИскомыйНомер = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",СледИграВыигравшего));
		Если ИскомыйНомер.Количество() > 0 Тогда
			СтрокаМониторингаВыигравшего = ИскомыйНомер[0];
			Если ЗначениеЗаполнено(СтрокаМониторингаВыигравшего.Очки1) или
				ЗначениеЗаполнено(СтрокаМониторингаВыигравшего.Очки2) Или
				СтрокаМониторингаВыигравшего.ТехническоеВ Или 
				СтрокаМониторингаВыигравшего.ТехническоеП Тогда
				//ничего ни делаем эта игра следующая уже сыграна
			Иначе	
				Если Не ЗначениеЗаполнено(СтрокаМониторингаВыигравшего.Участник1) Тогда
					СтрокаМониторингаВыигравшего.Участник1 = парВыигравший;	
				Иначе
					СтрокаМониторингаВыигравшего.Участник2	 = парВыигравший;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;	
		ИскомыйНомер = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",СледИграПроигравшего));
		Если ИскомыйНомер.Количество() > 0 Тогда
			СтрокаМониторингаПроигравшего = ИскомыйНомер[0];
			Если ЗначениеЗаполнено(СтрокаМониторингаПроигравшего.Очки1) или
				ЗначениеЗаполнено(СтрокаМониторингаПроигравшего.Очки2) Или
				СтрокаМониторингаПроигравшего.ТехническоеВ Или 
				СтрокаМониторингаПроигравшего.ТехническоеП Тогда
				//ничего ни делаем эта игра следующая уже сыграна
			Иначе	
				Если Не ЗначениеЗаполнено(СтрокаМониторингаПроигравшего.Участник1) Тогда
					СтрокаМониторингаПроигравшего.Участник1 = парПроигравший;	
				Иначе
					СтрокаМониторингаПроигравшего.Участник2 = парПроигравший;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСводнуюТаблицаИзОбщей()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ втТЗ ИЗ &Внеш КАК Внеш ";
	Запрос.УстановитьПараметр("Внеш",ВсяТаблицаОбщихДанных.Выгрузить());
	Запрос.Выполнить();
	Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.КолШаров,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ОчкиВыигравшего) КАК ОчкиВыигравшего,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ОчкиПроигравшего) КАК ОчкиПроигравшего,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеП
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	втТЗ КАК ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.КолШаров,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.ТехническоеП,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка1,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.НомерТура,
	|	ТЗ.РежимТура,
	|	ТЗ.НомерГруппы КАК НомерГруппы,
	|	ТЗ.Команда1,
	|	ТЗ.ОчкиВыигравшего КАК Итог1,
	|	ТЗ.Команда2,
	|	ТЗ.ОчкиПроигравшего КАК Итог2,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.ТехническоеП
	|ПОМЕСТИТЬ втНачальныеИгры
	|ИЗ
	|	ТЗ КАК ТЗ
	|ГДЕ
	|	ТЗ.Расстановка1 = ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.ПустаяСсылка)
	|	И ТЗ.Расстановка2 = ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ.НомерТура,
	|	ТЗ.РежимТура,
	|	ТЗ.НомерГруппы,
	|	ТЗ.Команда1,
	|	ТЗ.Команда2,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.ТехническоеП,
	|	ТЗ.ОчкиВыигравшего,
	|	ТЗ.ОчкиПроигравшего
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.НомерТура,
	|	ТЗ.РежимТура,
	|	ТЗ.НомерГруппы,
	|	ТЗ.Команда1,
	|	ТЗ.Команда2,
	|	ТЗ.ОчкиВыигравшего КАК Итог1,
	|	ТЗ.ОчкиПроигравшего КАК Итог2,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.ТехническоеП
	|ПОМЕСТИТЬ втТехническиеИгры
	|ИЗ
	|	ТЗ КАК ТЗ
	|ГДЕ
	|	ТЗ.Расстановка1 <> ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.ПустаяСсылка)
	|	И ТЗ.Расстановка2 <> ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.ПустаяСсылка)
	|	И (ТЗ.ТехническоеВ = ИСТИНА
	|			ИЛИ ТЗ.ТехническоеП = ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ.НомерТура,
	|	ТЗ.РежимТура,
	|	ТЗ.НомерГруппы,
	|	ТЗ.Команда1,
	|	ТЗ.Команда2,
	|	ТЗ.ОчкиВыигравшего,
	|	ТЗ.ОчкиПроигравшего,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.ТехническоеП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.НомерТура,
	|	ТЗ.РежимТура,
	|	ТЗ.НомерГруппы,
	|	ТЗ.Команда1,
	|	ТЗ.Расстановка1,
	|	ТЗ.Команда2,
	|	ТЗ.Расстановка2,
	|	СУММА(ТЗ.ОчкиВыигравшего) КАК ОчкиВыигравшего,
	|	СУММА(ТЗ.ОчкиПроигравшего) КАК ОчкиПроигравшего,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.ТехническоеП
	|ПОМЕСТИТЬ втТаблицаОбычныхИгр
	|ИЗ
	|	ТЗ КАК ТЗ
	|ГДЕ
	|	ТЗ.Расстановка1 <> ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)
	|	И ТЗ.Расстановка2 <> ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)
	|	И ТЗ.ТехническоеВ = ЛОЖЬ
	|	И ТЗ.ТехническоеП = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ.НомерТура,
	|	ТЗ.РежимТура,
	|	ТЗ.НомерГруппы,
	|	ТЗ.Команда1,
	|	ТЗ.Расстановка1,
	|	ТЗ.Команда2,
	|	ТЗ.Расстановка2,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.ТехническоеП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаОбычныхИгр.НомерТура,
	|	втТаблицаОбычныхИгр.РежимТура,
	|	втТаблицаОбычныхИгр.НомерГруппы,
	|	втТаблицаОбычныхИгр.Команда1,
	|	втТаблицаОбычныхИгр.Команда2,
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаОбычныхИгр.ОчкиВыигравшего > втТаблицаОбычныхИгр.ОчкиПроигравшего
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Итог1,
	|	СУММА(ВЫБОР
	|			КОГДА втТаблицаОбычныхИгр.ОчкиПроигравшего > втТаблицаОбычныхИгр.ОчкиВыигравшего
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Итог2,
	|	втТаблицаОбычныхИгр.ТехническоеВ,
	|	втТаблицаОбычныхИгр.ТехническоеП
	|ПОМЕСТИТЬ втИтоговаяНормальныхИгр
	|ИЗ
	|	втТаблицаОбычныхИгр КАК втТаблицаОбычныхИгр
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаОбычныхИгр.НомерТура,
	|	втТаблицаОбычныхИгр.РежимТура,
	|	втТаблицаОбычныхИгр.НомерГруппы,
	|	втТаблицаОбычныхИгр.Команда1,
	|	втТаблицаОбычныхИгр.Команда2,
	|	втТаблицаОбычныхИгр.ТехническоеВ,
	|	втТаблицаОбычныхИгр.ТехническоеП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.НомерТура,
	|	ТЗ.РежимТура,
	|	ТЗ.НомерГруппы,
	|	ТЗ.Команда1,
	|	ТЗ.Команда2,
	|	ТЗ.НомерСета,
	|	ТЗ.КолШаров,
	|	ТЗ.ОчкиВыигравшего,
	|	ТЗ.ОчкиПроигравшего,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.ТехническоеП
	|ПОМЕСТИТЬ втДанныеПоПарам
	|ИЗ
	|	ТЗ КАК ТЗ
	|ГДЕ
	|	ТЗ.Расстановка1 = ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)
	|	И ТЗ.Расстановка2 = ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЗ.РежимТура,
	|	ТЗ.Команда1,
	|	ТЗ.Команда2,
	|	ТЗ.ТехническоеВ,
	|	ТЗ.ТехническоеП,
	|	ТЗ.НомерТура,
	|	ТЗ.НомерГруппы,
	|	ТЗ.НомерСета,
	|	ТЗ.КолШаров,
	|	ТЗ.ОчкиВыигравшего,
	|	ТЗ.ОчкиПроигравшего
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|  ВЫБРАТЬ
	|	втДанныеПоПарам.НомерТура,
	|	втДанныеПоПарам.РежимТура,
	|	втДанныеПоПарам.НомерГруппы,
	|	втДанныеПоПарам.Команда1,
	|	втДанныеПоПарам.Команда2,
	|	втДанныеПоПарам.ТехническоеВ,
	|	втДанныеПоПарам.ТехническоеП,
	|	втДанныеПоПарам.ОчкиВыигравшего КАК ОчкиВыигравшего,
	|	втДанныеПоПарам.ОчкиПроигравшего КАК ОчкиПроигравшего
	|ПОМЕСТИТЬ втИтоговаяПоПарам
	|ИЗ
	|	втДанныеПоПарам КАК втДанныеПоПарам
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеПоПарам.НомерТура,
	|	втДанныеПоПарам.РежимТура,
	|	втДанныеПоПарам.НомерГруппы,
	|	втДанныеПоПарам.Команда1,
	|	втДанныеПоПарам.Команда2,
	|	втДанныеПоПарам.ТехническоеВ,
	|	втДанныеПоПарам.ТехническоеП,
	|	втДанныеПоПарам.ОчкиВыигравшего,
	|	втДанныеПоПарам.ОчкиПроигравшего
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяПоПарам.НомерТура,
	|	втИтоговаяПоПарам.РежимТура,
	|	втИтоговаяПоПарам.НомерГруппы,
	|	втИтоговаяПоПарам.Команда1,
	|	втИтоговаяПоПарам.Команда2,
	|	ВЫБОР
	|		КОГДА втИтоговаяПоПарам.ОчкиВыигравшего > втИтоговаяПоПарам.ОчкиПроигравшего
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Итог1,
	|	ВЫБОР
	|		КОГДА втИтоговаяПоПарам.ОчкиПроигравшего > втИтоговаяПоПарам.ОчкиВыигравшего
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Итог2,
	|	втИтоговаяПоПарам.ТехническоеВ,
	|	втИтоговаяПоПарам.ТехническоеП
	|ПОМЕСТИТЬ втКонечнаяПоПарам
	|ИЗ
	|	втИтоговаяПоПарам КАК втИтоговаяПоПарам
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговаяПоПарам.РежимТура,
	|	втИтоговаяПоПарам.Команда1,
	|	втИтоговаяПоПарам.Команда2,
	|	втИтоговаяПоПарам.ТехническоеВ,
	|	втИтоговаяПоПарам.ТехническоеП,
	|	втИтоговаяПоПарам.НомерТура,
	|	втИтоговаяПоПарам.НомерГруппы,
	|	ВЫБОР
	|		КОГДА втИтоговаяПоПарам.ОчкиВыигравшего > втИтоговаяПоПарам.ОчкиПроигравшего
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втИтоговаяПоПарам.ОчкиПроигравшего > втИтоговаяПоПарам.ОчкиВыигравшего
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачальныеИгры.НомерТура,
	|	втНачальныеИгры.РежимТура,
	|	втНачальныеИгры.НомерГруппы КАК НомерГруппы,
	|	втНачальныеИгры.Команда1,
	|	втНачальныеИгры.Итог1,
	|	втНачальныеИгры.Команда2,
	|	втНачальныеИгры.Итог2,
	|	втНачальныеИгры.ТехническоеВ,
	|	втНачальныеИгры.ТехническоеП
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втНачальныеИгры КАК втНачальныеИгры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТехническиеИгры.НомерТура,
	|	втТехническиеИгры.РежимТура,
	|	втТехническиеИгры.НомерГруппы,
	|	втТехническиеИгры.Команда1,
	|	втТехническиеИгры.Итог1,
	|	втТехническиеИгры.Команда2,
	|	втТехническиеИгры.Итог2,
	|	втТехническиеИгры.ТехническоеВ,
	|	втТехническиеИгры.ТехническоеП
	|ИЗ
	|	втТехническиеИгры КАК втТехническиеИгры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втИтоговаяНормальныхИгр.НомерТура,
	|	втИтоговаяНормальныхИгр.РежимТура,
	|	втИтоговаяНормальныхИгр.НомерГруппы,
	|	втИтоговаяНормальныхИгр.Команда1,
	|	втИтоговаяНормальныхИгр.Итог1,
	|	втИтоговаяНормальныхИгр.Команда2,
	|	втИтоговаяНормальныхИгр.Итог2,
	|	втИтоговаяНормальныхИгр.ТехническоеВ,
	|	втИтоговаяНормальныхИгр.ТехническоеП
	|ИЗ
	|	втИтоговаяНормальныхИгр КАК втИтоговаяНормальныхИгр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втКонечнаяПоПарам.НомерТура,
	|	втКонечнаяПоПарам.РежимТура,
	|	втКонечнаяПоПарам.НомерГруппы,
	|	втКонечнаяПоПарам.Команда1,
	|	втКонечнаяПоПарам.Итог1,
	|	втКонечнаяПоПарам.Команда2,
	|	втКонечнаяПоПарам.Итог2,
	|	втКонечнаяПоПарам.ТехническоеВ,
	|	втКонечнаяПоПарам.ТехническоеП
	|ИЗ
	|	втКонечнаяПоПарам КАК втКонечнаяПоПарам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.НомерТура,
	|	втИтоговая.РежимТура,
	|	втИтоговая.НомерГруппы,
	|	втИтоговая.Команда1,
	|	СУММА(втИтоговая.Итог1) КАК Итог1,
	|	втИтоговая.Команда2,
	|	СУММА(втИтоговая.Итог2) КАК Итог2,
	|	втИтоговая.ТехническоеВ,
	|	втИтоговая.ТехническоеП
	|ПОМЕСТИТЬ втИтоговаяПослеСуммирования
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.НомерТура,
	|	втИтоговая.РежимТура,
	|	втИтоговая.НомерГруппы,
	|	втИтоговая.Команда1,
	|	втИтоговая.ТехническоеВ,
	|	втИтоговая.ТехническоеП,
	|	втИтоговая.Команда2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяПослеСуммирования.НомерТура,
	|	втИтоговаяПослеСуммирования.РежимТура,
	|	втИтоговаяПослеСуммирования.НомерГруппы,
	|	втИтоговаяПослеСуммирования.Команда1,
	|	втИтоговаяПослеСуммирования.Итог1,
	|	втИтоговаяПослеСуммирования.Команда2,
	|	втИтоговаяПослеСуммирования.Итог2,
	|	втИтоговаяПослеСуммирования.ТехническоеВ,
	|	втИтоговаяПослеСуммирования.ТехническоеП
	|ИЗ
	|	втИтоговаяПослеСуммирования КАК втИтоговаяПослеСуммирования
	|ГДЕ
	|	(втИтоговаяПослеСуммирования.Итог1 = &МаксПобед
	|			ИЛИ втИтоговаяПослеСуммирования.Итог2 = &МаксПобед)";
	Запрос.УстановитьПараметр("МаксПобед",ЖеребьевкаКоманд.КоличествоПобед);
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выгрузить();
	//отладка
	//Запрос.Текст = "ВЫБРАТЬ * ИЗ втИтоговая КАК втИтоговая";
	//втИтоговая = Запрос.Выполнить().Выгрузить();
	Возврат Результат;

КонецФункции
 
&НаСервере
Функция НайтиНомерИгрыПоРасшифровке(мРасшифровка)
	
	парИгра = Неопределено;
	Для каждого ТекИгра Из СоответствияИгр Цикл
		Если Найти(ТекИгра.Расшифровка,мРасшифровка) > 0 Тогда
			парИгра	= ТекИгра.Игра;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат парИгра;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаМониторингаУчастник1НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) И ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			СписокКоманд = ОбновитьКМБыстрогоВвода(ТекСтрока.Участник1,ТекСтрока.Участник2);
			парМаксШирина = 0;
			Элемент.СписокВыбора.Очистить();
			Для каждого ТекЗнач Из СписокКоманд Цикл
				Если СтрДлина(ТекЗнач.Представление) > парМаксШирина Тогда
					парМаксШирина = СтрДлина(ТекЗнач.Представление);
				КонецЕсли;
				Элемент.СписокВыбора.Добавить(ТекЗнач.Значение,ТекЗнач.Представление);
			КонецЦикла; 
			Элемент.ШиринаСпискаВыбора = парМаксШирина;
		Иначе
			Элемент.СписокВыбора.Очистить();
		КонецЕсли;			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаУчастник1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Данные = Новый Структура;
		Данные.Вставить("ЗначениеСписка",ВыбранноеЗначение);
		Данные.Вставить("СсылкаИгрок1",ТекСтрока.Участник1);
		Данные.Вставить("СсылкаИгрок2",ТекСтрока.Участник2);
		ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаУчастник2НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) И ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			СписокКоманд = ОбновитьКМБыстрогоВвода(ТекСтрока.Участник2,ТекСтрока.Участник1);
			парМаксШирина = 0;
			Элемент.СписокВыбора.Очистить();
			Для каждого ТекЗнач Из СписокКоманд Цикл
				Если СтрДлина(ТекЗнач.Представление) > парМаксШирина Тогда
					парМаксШирина = СтрДлина(ТекЗнач.Представление);
				КонецЕсли;
				Элемент.СписокВыбора.Добавить(ТекЗнач.Значение,ТекЗнач.Представление);
			КонецЦикла; 
			Элемент.ШиринаСпискаВыбора = парМаксШирина;
		Иначе
			Элемент.СписокВыбора.Очистить();
		КонецЕсли;			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаУчастник2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Данные = Новый Структура;
		Данные.Вставить("ЗначениеСписка",ВыбранноеЗначение);
		Данные.Вставить("СсылкаИгрок1",ТекСтрока.Участник2);
		Данные.Вставить("СсылкаИгрок2",ТекСтрока.Участник1);
		ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) Или ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			ДанныеИгры = Новый Структура;
			ДанныеИгры.Вставить("Игрок1",ТекСтрока.Участник1);
			ДанныеИгры.Вставить("Игрок2",ТекСтрока.Участник2);
			ДанныеИгры.Вставить("КолПартий",КолПартий);
			ДанныеИгры.Вставить("Очки1",ТекСтрока.Очки1);
			ДанныеИгры.Вставить("Очки2",ТекСтрока.Очки2);
			ДанныеИгры.Вставить("ТехническоеВ",ТекСтрока.ТехническоеВ);
			ДанныеИгры.Вставить("ТехническоеП",ТекСтрока.ТехническоеП);
			НомерИгрыТабДока = ТекСтрока.НомерИгры;
			ЗаполнениеТабличкиПартий(ДанныеИгры);
		Иначе
			ТаблицаПартий.Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаНомерСтолаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивИгр = ВсяТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгрыТабДока));
	Если МассивИгр.Количество() > 0 Тогда //игра уже есть вызывать не нужно
		Возврат;
	КонецЕсли;
	////и есть ли эта игра уже в списке столов
	//МассивИгр = ТаблицаСтолов.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
	//Если МассивИгр.Количество() > 0 Тогда //игра уже есть вызывать не нужно
	//	Возврат;
	//КонецЕсли;
	СписокСвободныхСтолов = Новый СписокЗначений;
	Для М = 1 По КолСтолов Цикл
		СписокСвободныхСтолов.Добавить(М,,,БиблиотекаКартинок.СтолПоНастольномуТеннису);
	КонецЦикла;
	//посмотрим какие столы заняты
	Для каждого ТекСтр Из ТаблицаМониторинга Цикл 
		Если ТекСтр.НомерСтола = 0 Тогда
			Продолжить;
		КонецЕсли; 
		Искомый = СписокСвободныхСтолов.НайтиПоЗначению(ТекСтр.НомерСтола);
		Если Искомый <> Неопределено Тогда
			СписокСвободныхСтолов.Удалить(Искомый);	
		КонецЕсли; 
	КонецЦикла; 
	Если СписокСвободныхСтолов.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Нет свободных столов!");
		Возврат;
	КонецЕсли;

	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТаблицаМониторингаНомерСтолаНачалоВыбораИзСпискаЗавершение",
		ЭтотОбъект), СписокСвободныхСтолов, Элемент); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаНомерСтолаНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранныйСтол = ВыбранныйЭлемент;
	Если ВыбранныйСтол <> Неопределено Тогда
		ИскомаяИгра = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
		Если ИскомаяИгра.Количество() > 0 Тогда
			ИскомаяИгра[0].Участник1 = ПервыйИгрокТабл;
			ИскомаяИгра[0].Участник2 = ВторойИгрокТабл;
			ИскомаяИгра[0].НомерСтола = ВыбранныйСтол.Значение;
			ИскомаяИгра[0].ВремяВызова = ТекущаяДата();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаБегунки(Команда)
	
	ДанныеДляФормы = Новый Структура;
	ДанныеДляФормы.Вставить("ТабДок",ПолучитьТабличныйДокументПоБегункам());
	ДанныеДляФормы.Вставить("Заголовок","Бегунки");
	ДанныеДляФормы.Вставить("Ссылка",СсылкаНаДок.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ФормаВыводаНаПечать",ДанныеДляФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокументПоБегункам()
	
	КопияТаблицы = ТаблицаМониторинга.Выгрузить();
	КопияТаблицы.Колонки.Добавить("НомерПоПорядку");
	Сч = 0;
	Для каждого ТекСтр Из КопияТаблицы Цикл
		Сч = Сч + 1;
		ТекСтр.НомерПоПорядку = Сч;
	КонецЦикла; 
	
	Макет = Документы.ПроведениеСоревнования.ПолучитьМакет("Бегунки");
	
	ТабДокументБегунков = Новый ТабличныйДокумент;
	ТабДокументБегунков.АвтоМасштаб = Истина;
	ТабДокументБегунков.ПолеСверху = 0;
	ТабДокументБегунков.ПолеСлева = 0;
	ТабДокументБегунков.ПолеСнизу = 0;
	ТабДокументБегунков.ПолеСправа = 0;
	
	МассивДляПечати = Новый Массив;
	СЧБегунков = 0;
	Для каждого ТекСтрокаИгры Из КопияТаблицы Цикл
		//печатаем только те, которые полностью заполнены	
		Попытка
			ПервыйУчастникПары = ТекСтрокаИгры.Участник1;
		Исключение
			ПервыйУчастникПары = Неопределено;
		КонецПопытки; 
		Попытка
			ВторойУчастникПары = ТекСтрокаИгры.Участник2;
		Исключение
			ВторойУчастникПары = Неопределено;
		КонецПопытки; 
		Если ПервыйУчастникПары = Неопределено Или ВторойУчастникПары = Неопределено Тогда
			Продолжить; //нет смысла его печатать	
		КонецЕсли;
		Если ЗначениеЗаполнено(ПервыйУчастникПары) И ЗначениеЗаполнено(ВторойУчастникПары)
			И ТекСтрокаИгры.Очки1 = 0 И ТекСтрокаИгры.Очки2 = 0
			И ТекСтрокаИгры.ТехническоеП = Ложь И ТекСтрокаИгры.ТехническоеВ = Ложь Тогда
			
			ПервыйБегунок	= Макет.ПолучитьОбласть("ГоризонтальнаяОбластьБегунка | ПервыйБегунок");
			ПервыйБегунок.Параметры.ДатаВремя 							= Формат(ТекущаяДата(),"ДФ=dd.MM.yy");
			ПервыйБегунок.Параметры.НазваниеСоревнования	= СсылкаНаДок.НазваниеСоревнования;
			ПервыйБегунок.Параметры.НомУчастника1					= "";
			ПервыйБегунок.Параметры.НомУчастника2					= "";
			ПервыйБегунок.Параметры.НомерМатча						= ТекСтрокаИгры.НомерПоПорядку;
			ПервыйБегунок.Параметры.НомерТура							= НомерТура;
			ПервыйБегунок.Параметры.Участник1							= ОбщийКлиентСервер.СформироватьИмяИгрока(ПервыйУчастникПары);
			ПервыйБегунок.Параметры.Участник2							= ОбщийКлиентСервер.СформироватьИмяИгрока(ВторойУчастникПары);
			
			МассивДляПечати.Добавить(ПервыйБегунок);
			Если МассивДляПечати.Количество() = 2 Тогда
				Если СЧБегунков = 5 Тогда
					ТабДокументБегунков.ВывестиГоризонтальныйРазделительСтраниц();
					СЧБегунков = 0;
				КонецЕсли;
				СЧБегунков = СЧБегунков + 1;;
				ТабДокументБегунков.Вывести(МассивДляПечати.Получить(0));
				ТабДокументБегунков.Присоединить(МассивДляПечати.Получить(1));
				МассивДляПечати.Очистить();
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	//выводим остаток
	Если МассивДляПечати.Количество() = 1 Тогда
		ТабДокументБегунков.Вывести(МассивДляПечати.Получить(0));
	КонецЕсли;
	
	Возврат ТабДокументБегунков;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаПартийУчастник1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаПартий.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мПеремСписок = Новый СписокЗначений;
	Массив = СсылкаНаДок.ТаблицаКоманд.НайтиСтроки(Новый Структура("НазваниеКоманды",НаименованиеКоманда1));
	Если ТекСтрока.Расстановка1 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара") Тогда
		Для каждого ТекСтр Из Массив Цикл
			Для каждого ТекСтр1 Из Массив Цикл
				Если ТекСтр.Участник = ТекСтр1.Участник Тогда
					Продолжить;
				КонецЕсли; 
				СуммаРейтинга = ТекСтр.ТекущийРейтинг + ТекСтр1.ТекущийРейтинг;
				ПредставлениеПары = Строка(ТекСтр.Участник)+"-"+Строка(ТекСтр1.Участник)+" ("+СуммаРейтинга+")";
				ПараУчастников = Новый СписокЗначений;
				ПараУчастников.Добавить(ТекСтр.Участник,Строка(ТекСтр.Участник));
				ПараУчастников.Добавить(ТекСтр1.Участник,Строка(ТекСтр1.Участник));
				Если ПроверкаПарыУчастниковВСписке(ПараУчастников,мПеремСписок) Тогда
					мПеремСписок.Добавить(ПараУчастников,ПредставлениеПары,,БиблиотекаКартинок.Пары);				
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	Иначе
		мСписокВыбранных = Новый СписокЗначений;
		Для Каждого СтрПартий Из ТаблицаПартий Цикл
			Если СтрПартий.Расстановка1 <> ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара") Тогда
				мСписокВыбранных.Добавить(СтрПартий.Участник1);
			КонецЕсли; 
		КонецЦикла;
		Для Каждого ТекСтр Из Массив Цикл
			Искомый = мСписокВыбранных.НайтиПоЗначению(ТекСтр.Участник);
			Если Искомый = Неопределено Тогда
				мПеремСписок.Добавить(ТекСтр.Участник,Строка(ТекСтр.Участник)+" ("+ТекСтр.ТекущийРейтинг+")",,БиблиотекаКартинок.Пользователь);
			Иначе
				//мПеремСписок.Добавить(ТекСтр.Участник,Строка(ТекСтр.Участник)+" ("+ТекСтр.ТекущийРейтинг+")",,БиблиотекаКартинок.ПользовательСАутентификацией);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
 
	ЭтотОбъект.ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТаблицаПартийУчастник1НачалоВыбораЗавершение",
		ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), мПеремСписок, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийУчастник1НачалоВыбораЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	ВыбранныйЭлемент = ВыбранныйЭлемент1;
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ТекСтрока.Участник1 = ВыбранныйЭлемент.Значение;
		Для каждого ТекСтрПартии Из ТаблицаПартий Цикл
			ИДТекСтроки = ТекСтрока.ПолучитьИдентификатор();
			ИДСтрПартии = ТекСтрПартии.ПолучитьИдентификатор();
			Если ИДТекСтроки <> ИДСтрПартии Тогда
				Если ТекСтрПартии.Расстановка1 = ТекСтрока.Расстановка1 Тогда
					ТекСтрПартии.Участник1 = ВыбранныйЭлемент.Значение;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		ТаблицаПартийУчастникПриИзменении();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверкаПарыУчастниковВСписке(СписокДляПроверки,СписокВсехПар)
	
	ПарыНет = Истина;
	Для каждого ТекПара Из СписокВсехПар Цикл
		Уч1 = ТекПара.Значение[0].Значение;
		Уч2 = ТекПара.Значение[1].Значение;
		
		Уч1Проверка = СписокДляПроверки[0].Значение;
		Уч2Проверка = СписокДляПроверки[1].Значение;
		
		Если (Уч1 = Уч1Проверка И Уч2 = Уч2Проверка) 
			Или (Уч1 = Уч2Проверка И Уч2 = Уч1Проверка) Тогда
			ПарыНет = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ПарыНет;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаПартийУчастник2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаПартий.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мПеремСписок = Новый СписокЗначений;
	Массив = СсылкаНаДок.ТаблицаКоманд.НайтиСтроки(Новый Структура("НазваниеКоманды",НаименованиеКоманда2));
	Если ТекСтрока.Расстановка2 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара") Тогда
		Для каждого ТекСтр Из Массив Цикл
			Для каждого ТекСтр1 Из Массив Цикл
				Если ТекСтр.Участник = ТекСтр1.Участник Тогда
					Продолжить;
				КонецЕсли; 
				СуммаРейтинга = ТекСтр.ТекущийРейтинг + ТекСтр1.ТекущийРейтинг;
				ПредставлениеПары = Строка(ТекСтр.Участник)+"-"+Строка(ТекСтр1.Участник)+" ("+СуммаРейтинга+")";
				ПараУчастников = Новый СписокЗначений;
				ПараУчастников.Добавить(ТекСтр.Участник,Строка(ТекСтр.Участник));
				ПараУчастников.Добавить(ТекСтр1.Участник,Строка(ТекСтр1.Участник));
				Если ПроверкаПарыУчастниковВСписке(ПараУчастников,мПеремСписок) Тогда
					мПеремСписок.Добавить(ПараУчастников,ПредставлениеПары,,БиблиотекаКартинок.Пары);				
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	Иначе
		мСписокВыбранных = Новый СписокЗначений;
		Для Каждого СтрПартий Из ТаблицаПартий Цикл
			Если СтрПартий.Расстановка2 <> ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара") Тогда
				мСписокВыбранных.Добавить(СтрПартий.Участник2);
			КонецЕсли; 
		КонецЦикла;
		Для Каждого ТекСтр Из Массив Цикл
			Искомый = мСписокВыбранных.НайтиПоЗначению(ТекСтр.Участник);
			Если Искомый = Неопределено Тогда
				мПеремСписок.Добавить(ТекСтр.Участник,Строка(ТекСтр.Участник)+" ("+ТекСтр.ТекущийРейтинг+")",,БиблиотекаКартинок.Пользователь);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;

	ЭтотОбъект.ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТаблицаПартийУчастник2НачалоВыбораЗавершение",
		ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), мПеремСписок, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийУчастник2НачалоВыбораЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	ВыбранныйЭлемент = ВыбранныйЭлемент1;
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ТекСтрока.Участник2 = ВыбранныйЭлемент.Значение;
		Для каждого ТекСтрПартии Из ТаблицаПартий Цикл
			ИДТекСтроки = ТекСтрока.ПолучитьИдентификатор();
			ИДСтрПартии = ТекСтрПартии.ПолучитьИдентификатор();
			Если ИДТекСтроки <> ИДСтрПартии Тогда
				Если ТекСтрПартии.Расстановка2 = ТекСтрока.Расстановка2 Тогда
					ТекСтрПартии.Участник2 = ВыбранныйЭлемент.Значение;
					Прервать;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
		ТаблицаПартийУчастникПриИзменении();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийУчастникПриИзменении()
	
	Для каждого ТекСтр Из ТаблицаПартий Цикл
		Если ЗначениеЗаполнено(ТекСтр.Участник1) Или ЗначениеЗаполнено(ТекСтр.Участник2) Тогда
			//найдем в таблице и заменим
			Отбор = Новый Структура;
			Отбор.Вставить("НомерТура",НомерТура);
			Отбор.Вставить("НомерГруппы",НомерИгрыТабДока);
			Отбор.Вставить("Расстановка1",ТекСтр.Расстановка1);
			Отбор.Вставить("Расстановка2",ТекСтр.Расстановка2);
			МассивСтрок = ВсяТаблицаОбщихДанных.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() >  0 Тогда
				Для каждого СтрМассива Из МассивСтрок Цикл
					СтрМассива.Участник1 = ТекСтр.Участник1;
					СтрМассива.Участник2 = ТекСтр.Участник2;
				КонецЦикла; 
			Иначе
				Если ТекСтр.Расстановка1 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара") И
					ТекСтр.Расстановка2 = ПредопределенноеЗначение("Перечисление.ВариантыРасстановки.Пара") Тогда
					Для Н = 0 По 1 Цикл
						НовСтрока = ВсяТаблицаОбщихДанных.Добавить();
						НовСтрока.НомерТура		= НомерТура;
						НовСтрока.НомерГруппы	= НомерИгрыТабДока;
						НовСтрока.НомерСета		= 1;
						Если ТекСтр.Участник1.Количество() > 0 Тогда
							НовСтрока.Участник1		= ТекСтр.Участник1[Н].Значение;							
						КонецЕсли; 
						Если ТекСтр.Участник2.Количество() > 0 Тогда
							НовСтрока.Участник2		= ТекСтр.Участник2[Н].Значение;
						КонецЕсли;
						НовСтрока.РежимТура		= РежимТура;
						НовСтрока.Команда1		= НаименованиеКоманда1;
						НовСтрока.Команда2		= НаименованиеКоманда2;
						НовСтрока.Расстановка1	= ТекСтр.Расстановка1;
						НовСтрока.Расстановка2	= ТекСтр.Расстановка2;
					КонецЦикла; 
				Иначе
					//это чисто данные по жеребьевке
					НовСтрока = ВсяТаблицаОбщихДанных.Добавить();
					НовСтрока.НомерТура		= НомерТура;
					НовСтрока.НомерГруппы	= НомерИгрыТабДока;
					НовСтрока.НомерСета		= 1;
					НовСтрока.Участник1		= ТекСтр.Участник1;
					НовСтрока.Участник2		= ТекСтр.Участник2;
					НовСтрока.РежимТура		= РежимТура;
					НовСтрока.Команда1		= НаименованиеКоманда1;
					НовСтрока.Команда2		= НаименованиеКоманда2;
					НовСтрока.Расстановка1	= ТекСтр.Расстановка1;
					НовСтрока.Расстановка2	= ТекСтр.Расстановка2;
				КонецЕсли; 
			КонецЕсли;
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийУчастник1Очистка(Элемент, СтандартнаяОбработка)
	ЗначУчастника = Элементы.ТаблицаПартий.ТекущиеДанные.Участник1;
	Для Каждого ТекСтр Из ТаблицаПартий Цикл
		Если ТекСтр.Участник1 = ЗначУчастника Тогда
			ТекСтр.Участник1 = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийУчастник2Очистка(Элемент, СтандартнаяОбработка)
	ЗначУчастника = Элементы.ТаблицаПартий.ТекущиеДанные.Участник2;
	Для Каждого ТекСтр Из ТаблицаПартий Цикл
		Если ТекСтр.Участник2 = ЗначУчастника Тогда
			ТекСтр.Участник2 = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийОбщийРезультатПриИзменении(Элемент)
	
	ТекСтр = Элементы.ТаблицаПартий.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПартийДляПобеды = ОпределитьКолПартий();
	Если Найти(Элемент.Имя,"Результат1") > 0 Тогда
		ТекЗначение = ТекСтр.ОбщийРезультат1;
		Если ТекЗначение < 0 Тогда
			ТекЗначение = -ТекЗначение;
			Если ТекЗначение = ПартийДляПобеды Тогда
				ПоказатьПредупреждение(Новый ОписаниеОповещения("ТаблицаПартийОбщийРезультатПриИзмененииЗавершение1", ЭтотОбъект, Новый Структура("ТекСтр", ТекСтр)), "Ошибка! Максимальное количество партий "+ПартийДляПобеды);
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		Если ТекЗначение < ПартийДляПобеды Тогда
			ТекСтр.ОбщийРезультат1 = ТекЗначение;
			ТекСтр.ОбщийРезультат2 = ПартийДляПобеды;
		Иначе
			ТекСтр.ОбщийРезультат1 = ТекЗначение;
			ТекСтр.ОбщийРезультат2 = ТекСтр.ОбщийРезультат2;
		КонецЕсли; 
	ИначеЕсли Найти(Элемент.Имя,"Результат2") > 0 Тогда
		ТекЗначение = ТекСтр.ОбщийРезультат2;	
		Если ТекЗначение < 0 Тогда
			ТекЗначение = -ТекЗначение;
			Если ТекЗначение = ПартийДляПобеды Тогда
				ПоказатьПредупреждение(Новый ОписаниеОповещения("ТаблицаПартийОбщийРезультатПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекСтр", ТекСтр)), "Ошибка! Максимальное количество партий "+ПартийДляПобеды);
				Возврат;
			КонецЕсли; 
		КонецЕсли;
		Если ТекЗначение < ПартийДляПобеды Тогда
			ТекСтр.ОбщийРезультат2 = ТекЗначение;
			ТекСтр.ОбщийРезультат1 = ПартийДляПобеды;
		Иначе
			ТекСтр.ОбщийРезультат2 = ТекЗначение;
			ТекСтр.ОбщийРезультат1 = ТекСтр.ОбщийРезультат2;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТекСтр.ОбщийРезультат1 = ПартийДляПобеды Или ТекСтр.ОбщийРезультат2 = ПартийДляПобеды Тогда
		ЗаписатьПартию(ТекСтр.ПолучитьИдентификатор());
		Если ТекСтр.ОбщийРезультат1 > ТекСтр.ОбщийРезультат2 Тогда
			ТекСтр.Итог1 = 1;
			ТекСтр.Итог2 = 0;
		Иначе
			ТекСтр.Итог1 = 0;
			ТекСтр.Итог2 = 1;
		КонецЕсли;
		ОбновитьИтоговыеОчки();
		//активируем след.строку
		ИДТекСтроки = ТаблицаПартий.Индекс(ТекСтр);
		Если ИДТекСтроки < ТаблицаПартий.Количество() - 1 Тогда
			Элементы.ТаблицаПартий.ТекущаяСтрока = ТаблицаПартий.Получить(ИДТекСтроки+1).ПолучитьИдентификатор();
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТаблицаПартийОбщийРезультат1;
		КонецЕсли; 
	Иначе 
		Если Найти(Элемент.Имя,"Результат1") > 0 Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТаблицаПартийОбщийРезультат2;	
		ИначеЕсли Найти(Элемент.Имя,"Результат2") > 0 Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТаблицаПартийОбщийРезультат1;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийОбщийРезультатПриИзмененииЗавершение1(ДополнительныеПараметры) Экспорт
	
	ТекСтр = ДополнительныеПараметры.ТекСтр;
	
	
	ТекСтр.ОбщийРезультат1 = 0;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийОбщийРезультатПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	ТекСтр = ДополнительныеПараметры.ТекСтр;
	
	
	ТекСтр.ОбщийРезультат2 = 0;

КонецПроцедуры

&НаКлиенте
Процедура ПоменятьРасстановку(Команда)
	
	МассивСтрок = ВсяТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгрыТабДока));
	Если МассивСтрок.Количество() > 0 Тогда
		СписокОтветов = Новый СписокЗначений;
		СписокОтветов.Добавить("УдалитьЖеребьевку","Удалить жеребьевку");
		СписокОтветов.Добавить("УдалитьЖеребьевкуИПоменятьМестами", "Удалить жеребьевку и поменять расстановку");
		СписокОтветов.Добавить("Отмена", "Отмена");

		ПоказатьВопрос(Новый ОписаниеОповещения("ПоменятьРасстановкуЗавершение", ЭтотОбъект,
			Новый Структура("МассивСтрок", МассивСтрок)), "У этих команд уже есть данные, по жеребьевке участников.",
			СписокОтветов);
	Иначе
		ПоменятьРасстановкуКомандИОбновитьФорму();		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьРасстановкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивСтрок = ДополнительныеПараметры.МассивСтрок;
	
	
	Ответ = РезультатВопроса;
	Если Ответ = "УдалитьЖеребьевкуИПоменятьМестами" Или Ответ = "УдалитьЖеребьевку" Тогда //меняем местами
		Для Каждого ТекСтр Из МассивСтрок Цикл //удаляем 
			ВсяТаблицаОбщихДанных.Удалить(ТекСтр);
		КонецЦикла; 	
		Если Ответ = "УдалитьЖеребьевкуИПоменятьМестами" Тогда
			ПоменятьРасстановкуКомандИОбновитьФорму(); //меняем расстановку				
		КонецЕсли;
		//перезаполняем табличку партий
		ДанныеИгры = Новый Структура;	
		ДанныеИгры.Вставить("Игрок1",НаименованиеКоманда1);
		ДанныеИгры.Вставить("Игрок2",НаименованиеКоманда2);
		ДанныеИгры.Вставить("КолПартий",КолПартий);
		ЗаполнениеТабличкиПартий(ДанныеИгры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоменятьРасстановкуКомандИОбновитьФорму()
	
	втНаименованиеКоманда1 = НаименованиеКоманда1;
	втНаименованиеКоманда2 = НаименованиеКоманда2;
	
	НаименованиеКоманда1 = втНаименованиеКоманда2;
	НаименованиеКоманда2 = втНаименованиеКоманда1;
	Элементы.ТаблицаПартийУчастник1.Заголовок = НаименованиеКоманда1;
	Элементы.ТаблицаПартийУчастник2.Заголовок = НаименованиеКоманда2;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьПредыдущуюРасстановку(Команда)
	
	СписокОтветов = Новый СписокЗначений;
	Если Не ПустаяСтрока(НаименованиеКоманда1) Тогда
		СписокОтветов.Добавить("Команда1",НаименованиеКоманда1,,БиблиотекаКартинок.КомандныеСоревнования);		
	КонецЕсли; 
	Если Не ПустаяСтрока(НаименованиеКоманда2) Тогда
		СписокОтветов.Добавить("Команда2",НаименованиеКоманда2,,БиблиотекаКартинок.КомандныеСоревнования);
	КонецЕсли;
	Если ЗначениеЗаполнено(НаименованиеКоманда1) И ЗначениеЗаполнено(НаименованиеКоманда2) Тогда
		СписокОтветов.Добавить("Обе",Строка(НаименованиеКоманда1)+" и "+НаименованиеКоманда2);		
	КонецЕсли; 
	СписокОтветов.Добавить("Отмена",,,БиблиотекаКартинок.УдалитьЭлементСписка);

	СписокОтветов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("КомандаСкопироватьПредыдущуюРасстановкуЗавершение",
		ЭтотОбъект), "Выберите команду?");

КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьПредыдущуюРасстановкуЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ОтветСписка  = ВыбранныйЭлемент;
	Если ОтветСписка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Ответ = ОтветСписка.Значение;
	Если Ответ = "Отмена" Тогда
		Возврат;
	Иначе
		Если Ответ = "Команда1" Тогда
			ЗаполнитьЖеребьевкуПоКоманде(1,НаименованиеКоманда1);
		ИначеЕсли Ответ = "Команда2" Тогда
			ЗаполнитьЖеребьевкуПоКоманде(2,НаименованиеКоманда2);
		Иначе //обе команды
			ЗаполнитьЖеребьевкуПоКоманде(1,НаименованиеКоманда1);
			ЗаполнитьЖеребьевкуПоКоманде(2,НаименованиеКоманда2);
		КонецЕсли;
		ТаблицаПартийУчастникПриИзменении();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийТехническое1ПриИзменении(Элемент)
	ТекСтр = Элементы.ТаблицаПартий.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекСтр.Участник1) Или ЗначениеЗаполнено(ТекСтр.Участник2) Тогда
		Если ТекСтр.Техническое1 Тогда
			ТекСтр.ОбщийРезультат2 = ОпределитьКолПартий();
			Если ТекСтр.ОбщийРезультат1 > ТекСтр.ОбщийРезультат2 Тогда
				ТекСтр.Итог1 = 1;
				ТекСтр.Итог2 = 0;
			Иначе
				ТекСтр.Итог1 = 0;
				ТекСтр.Итог2 = 1;
			КонецЕсли;
			ОбновитьИтоговыеОчки();
			ЗаписатьПартию(ТекСтр.ПолучитьИдентификатор());
		КонецЕсли; 
	Иначе
		ТекСтр.Техническое1 = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПартийТехническое2ПриИзменении(Элемент)
	ТекСтр = Элементы.ТаблицаПартий.ТекущиеДанные;
	Если ТекСтр = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ТекСтр.Участник1) Или ЗначениеЗаполнено(ТекСтр.Участник2) Тогда
		Если ТекСтр.Техническое2 Тогда
			ТекСтр.ОбщийРезультат1 = ОпределитьКолПартий();
			ЗаписатьПартию(ТекСтр.ПолучитьИдентификатор());
			Если ТекСтр.ОбщийРезультат1 > ТекСтр.ОбщийРезультат2 Тогда
				ТекСтр.Итог1 = 1;
				ТекСтр.Итог2 = 0;
			Иначе
				ТекСтр.Итог1 = 0;
				ТекСтр.Итог2 = 1;
			КонецЕсли;
			ОбновитьИтоговыеОчки();
		КонецЕсли; 
	Иначе
		ТекСтр.Техническое2 = Ложь;
	КонецЕсли;
КонецПроцедуры

//НомКолонкиКоманды - первая колонка или вторая
&НаСервере
Процедура ЗаполнитьЖеребьевкуПоКоманде(НомКолонкиКоманды = 1,парКоманда = "")
	
	Если парКоманда = "" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ втТЗ ИЗ &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",ВсяТаблицаОбщихДанных.Выгрузить());
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда1 КАК Команда,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник1 КАК Участник,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка1 КАК Расстановка,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерГруппы
	|ПОМЕСТИТЬ втДанныеПоКоманде
	|ИЗ
	|	втТЗ КАК ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам
	|ГДЕ
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда1 = &Команда
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Участник2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Расстановка2,
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.НомерГруппы
	|ИЗ
	|	втТЗ КАК ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам
	|ГДЕ
	|	ПроведениеСоревнованияОбщаяТаблицаДанныхПоКомандам.Команда2 = &Команда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеПоКоманде.НомерТура,
	|	втДанныеПоКоманде.РежимТура,
	|	втДанныеПоКоманде.Команда,
	|	втДанныеПоКоманде.Участник,
	|	втДанныеПоКоманде.Расстановка,
	|	МАКСИМУМ(втДанныеПоКоманде.НомерГруппы) КАК НомерГруппы
	|ПОМЕСТИТЬ втВсеИтоговыеДанные
	|ИЗ
	|	втДанныеПоКоманде КАК втДанныеПоКоманде
	|ГДЕ
	|	втДанныеПоКоманде.НомерГруппы < &НомерГруппы
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеПоКоманде.РежимТура,
	|	втДанныеПоКоманде.Команда,
	|	втДанныеПоКоманде.Участник,
	|	втДанныеПоКоманде.Расстановка,
	|	втДанныеПоКоманде.НомерТура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеИтоговыеДанные.НомерТура,
	|	втВсеИтоговыеДанные.РежимТура,
	|	втВсеИтоговыеДанные.Команда,
	|	втВсеИтоговыеДанные.Участник,
	|	втВсеИтоговыеДанные.Расстановка,
	|	втВсеИтоговыеДанные.НомерГруппы
	|ПОМЕСТИТЬ втДанныеПоПарам
	|ИЗ
	|	втВсеИтоговыеДанные КАК втВсеИтоговыеДанные
	|ГДЕ
	|	втВсеИтоговыеДанные.Расстановка = ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеИтоговыеДанные.НомерТура,
	|	втВсеИтоговыеДанные.РежимТура,
	|	втВсеИтоговыеДанные.Команда,
	|	втВсеИтоговыеДанные.Участник,
	|	втВсеИтоговыеДанные.Расстановка,
	|	втВсеИтоговыеДанные.НомерГруппы
	|ИЗ
	|	втВсеИтоговыеДанные КАК втВсеИтоговыеДанные
	|ГДЕ
	|	втВсеИтоговыеДанные.Расстановка <> ЗНАЧЕНИЕ(Перечисление.ВариантыРасстановки.Пара)";
	Запрос.УстановитьПараметр("Команда",парКоманда);
	Запрос.УстановитьПараметр("НомерГруппы",НомерИгрыТабДока);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ втДанныеПоПарам КАК втДанныеПоПарам";
	втДанныеПоПарам = Запрос.Выполнить().Выгрузить(); //по идее должно быть всегд 2 строки
	
	Для Каждого ТекСтр Из Результат Цикл
		Отбор = Новый Структура("Расстановка"+НомКолонкиКоманды,ТекСтр.Расстановка);
		МассивСтрок = ТаблицаПартий.НайтиСтроки(Отбор);
		Для Каждого СтрМассива Из МассивСтрок Цикл
			СтрМассива["Участник"+НомКолонкиКоманды] = ТекСтр.Участник;	
		КонецЦикла; 
	КонецЦикла; 	
	
	ИскомыеСтрокиСпарой = ТаблицаПартий.НайтиСтроки(Новый Структура("Расстановка"+НомКолонкиКоманды,Перечисления.ВариантыРасстановки.Пара));
	СписокПары = Новый СписокЗначений;
	СписокПары.ЗагрузитьЗначения(втДанныеПоПарам.ВыгрузитьКолонку("Участник"));
	Если ИскомыеСтрокиСпарой.Количество() > 0 Тогда
		ИскомыеСтрокиСпарой[0]["Участник"+НомКолонкиКоманды] = СписокПары;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьПротокол(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаВыводаНаПечать",Новый Структура("ТабДок,Заголовок,Ссылка",ТабДок,ТекстЗаголовкаТабДока,СсылкаНаДок.Ссылка),ЭтотОбъект,Новый УникальныйИдентификатор);
КонецПроцедуры
 
 

