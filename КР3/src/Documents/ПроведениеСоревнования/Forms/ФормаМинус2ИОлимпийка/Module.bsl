&НаКлиенте
Перем глСписокПоследнихИгр;
&НаСервере
Перем глТаблицаИгроков; //для заполнения при открытии игроков
&НаКлиенте
Перем глСтароеЗначениеКолонки;
&НаКлиенте
Перем мЗакрытиеФормы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПеремОбъектДокумента = ДанныеФормыВЗначение(Параметры.ОбъектДок, Тип("ДокументОбъект.ПроведениеСоревнования"));
	ЗначениеВРеквизитФормы(ПеремОбъектДокумента, "СсылкаНаДок");
	НомерТура   = Параметры.НомерТура;
	РежимТура   = Параметры.РежимТура;
	КолПартий	= Параметры.КолПартий;
	ВидСоревнований = Параметры.ВидСоревнований;
	
	КолСтолов = СсылкаНаДок.КолСтолов;
	Параметры.Свойство("СеткаНа",глОбщаяСетка);
	
	Параметры.Свойство("ВыводитьПолноеФИО", ВыводитьПолноеФИО);
	
	Если ВыводитьПолноеФИО Тогда
		Элементы.ФормаКомандаВыводитьПолноеФИО.Пометка = Истина;
	КонецЕсли; 
	
	глВыводПоОчкам = Константы.ВыводитьСчетПоОчкамВСетках.Получить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("РежимТура",РежимТура);
	Отбор.Вставить("НомерТура",НомерТура);
	МассивУчастниковТура = СсылкаНаДок.УчастникиПоЖеребьевке.НайтиСтроки(Отбор);
	ЗаполнениеСоответствийИгроков(МассивУчастниковТура);
	
	КолУчастников = МассивУчастниковТура.Количество();
	Если глОбщаяСетка <> 0 Тогда
		КолУчастников = глОбщаяСетка;
	КонецЕсли; 
	Если РежимТура = Перечисления.РежимыТуровСоревнования.МинусДва Тогда
		Если КолУчастников >= 4 И КолУчастников <= 8 Тогда //схема 8
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На8");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На8");
			ИмяМакета = "Минус2На8";
			НумерацияИгроков = 8;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр8(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,8);
		ИначеЕсли КолУчастников > 8 И КолУчастников <= 16 Тогда //схема на 16
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На16");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На16");
			ИмяМакета = "Минус2На16"; 
			НумерацияИгроков = 16;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр16(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,16);
		ИначеЕсли КолУчастников > 16 И КолУчастников <= 24 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На24");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На24");
			ИмяМакета = "Минус2На24";
			НумерацияИгроков = 24;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр24(СоответствияИгр,РежимТура,СсылкаНаДок.НумерацияВСетке);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,24);
		ИначеЕсли КолУчастников > 24 И КолУчастников <= 32 Тогда
			ПрямойСнос = Константы.Сетка32ПрямойСнос.Получить();
			Если ПрямойСнос Тогда
				МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На32ПрямойСнос");
				Область = МакетТабДока.ПолучитьОбласть("Минус2На32");
				ИмяМакета = "Минус2На32ПрямойСнос";
				НумерацияИгроков = 32;
				Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр32ПрямойСнос(СоответствияИгр,РежимТура);
				Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,32);
			Иначе
				МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На32");
				Область = МакетТабДока.ПолучитьОбласть("Минус2На32");
				ИмяМакета = "Минус2На32";
				НумерацияИгроков = 32;
				Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр32(СоответствияИгр,РежимТура);
				Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,32);
			КонецЕсли; 
		ИначеЕсли КолУчастников > 32 И КолУчастников <= 48 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На48");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На48");
			ИмяМакета = "Минус2На48";
			НумерацияИгроков = 48;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр48(СоответствияИгр,РежимТура,СсылкаНаДок.НумерацияВСетке);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,48);
		ИначеЕсли КолУчастников > 48 И КолУчастников <= 64 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("Минус2На64");
			Область = МакетТабДока.ПолучитьОбласть("Минус2На64");
			ИмяМакета = "Минус2На64";
			НумерацияИгроков = 64;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр64(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,64);
		КонецЕсли;
	ИначеЕсли РежимТура = Перечисления.РежимыТуровСоревнования.Олимпийка Тогда
		Если КолУчастников >= 4 И КолУчастников <= 8 Тогда //схема 8
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа8");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа8");
			ИмяМакета = "ОлимпийкаНа8"; 
			НумерацияИгроков = 8;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр8(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,8);
		ИначеЕсли КолУчастников > 8 И КолУчастников <= 16 Тогда //схема на 16
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа16");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа16");
			ИмяМакета = "ОлимпийкаНа16";
			НумерацияИгроков = 16;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр16(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,16);
		ИначеЕсли КолУчастников > 16 И КолУчастников <= 24 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа24");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа24");
			ИмяМакета = "ОлимпийкаНа24";
			НумерацияИгроков = 24;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр24(СоответствияИгр,РежимТура,СсылкаНаДок.НумерацияВСетке);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,24);
		ИначеЕсли КолУчастников > 24 И КолУчастников <= 32 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа32");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа32");
			ИмяМакета = "ОлимпийкаНа32";
			НумерацияИгроков = 32;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр32(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,32);
		ИначеЕсли КолУчастников > 32 И КолУчастников <= 48 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа48");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа32");
			ИмяМакета = "ОлимпийкаНа48";
			НумерацияИгроков = 48;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр48(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,48);
		ИначеЕсли КолУчастников > 48 И КолУчастников <= 64 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ОлимпийкаНа64");
			Область = МакетТабДока.ПолучитьОбласть("ОлимпийкаНа64");
			ИмяМакета = "ОлимпийкаНа64";
			НумерацияИгроков = 64;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр64(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,64);
		КонецЕсли;
	ИначеЕсли РежимТура = Перечисления.РежимыТуровСоревнования.Прогрессивная Тогда
		Если КолУчастников >= 4 И КолУчастников <= 8 Тогда //схема 8
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ПрогрессивнаяНа8");
			Область = МакетТабДока.ПолучитьОбласть("ПрогрессивнаяНа8");
			НумерацияИгроков = 8;
			ИмяМакета = "ПрогрессивнаяНа8"; 
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр8ПрогрессивнаяСетка(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,8);
		ИначеЕсли КолУчастников > 8 И КолУчастников <= 16 Тогда //схема на 16
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ПрогрессивнаяНа16");
			Область = МакетТабДока.ПолучитьОбласть("ПрогрессивнаяНа16");
			ИмяМакета = "ПрогрессивнаяНа16";
			НумерацияИгроков = 16;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр16ПрогрессивнаяСетка(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,16);
		ИначеЕсли КолУчастников > 16 И КолУчастников <= 24 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ПрогрессивнаяНа24");
			Область = МакетТабДока.ПолучитьОбласть("ПрогрессивнаяНа24");
			ИмяМакета = "ПрогрессивнаяНа24";
			НумерацияИгроков = 24;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр24ПрогрессивнаяСетка(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,24);
		ИначеЕсли КолУчастников > 24 И КолУчастников <= 32 Тогда
			МакетТабДока = Документы.ПроведениеСоревнования.ПолучитьМакет("ПрогрессивнаяНа32");
			Область = МакетТабДока.ПолучитьОбласть("ПрогрессивнаяНа32");
			ИмяМакета = "ПрогрессивнаяНа32";
			НумерацияИгроков = 32;
			Документы.ПроведениеСоревнования.ЗаполнениеСоответствийИгр32ПрогрессивнаяСетка(СоответствияИгр,РежимТура);
			Документы.ПроведениеСоревнования.ТаблицаМестКонечныхИгр(ТаблицаМестИгр,РежимТура,32);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	ТекстЗаголовка = "Тур № "+НомерТура+" "+Строка(СсылкаНаДок.НазваниеСоревнования)+", "+Параметры.Коммент; 
	ЭтотОбъект.Заголовок = ТекстЗаголовка;
	//заголовок области
	Если Параметры.Коммент = "" Тогда //заполняем из названия соревнования
		ТекстЗаголовкаТабДока = Строка(СсылкаНаДок.НазваниеСоревнования);
	Иначе
		ТекстЗаголовкаТабДока = Параметры.Коммент;
	КонецЕсли;
	//заголовок
	КомментТура = "от "+Формат(СсылкаНаДок.Дата,"ДЛФ=DD")+" "+Параметры.Коммент+" "+СсылкаНаДок.ДопИнф;
	МакетЗаголовкаИПодвала = Документы.ПроведениеСоревнования.ПолучитьМакет("ТаблицаГрупп");
	ОбластьЗаголовка = Документы.ПроведениеСоревнования.ПолучитьОбластьЗаголовка(СсылкаНаДок.НазваниеСоревнования,КомментТура);
	ТабДок.Вывести(ОбластьЗаголовка);
	//основная часть
	ЗаполнениеТаблицУчастниковИИгр(Область);
	ТабДок.Вывести(Область);
	//подвал
	
	Если ЗначениеЗаполнено(СсылкаНаДок.ГлавныйСудья) Или ЗначениеЗаполнено(СсылкаНаДок.Секретарь) Тогда
		ОбластьПодвал = МакетЗаголовкаИПодвала.ПолучитьОбласть("Подвал");
		Если ЗначениеЗаполнено(СсылкаНаДок.ГлавныйСудья) Тогда
			ОбластьПодвал.Параметры.глСудья = КР_ОбщийКлиентСервер.СформироватьИмяИгрока(СсылкаНаДок.ГлавныйСудья);
		КонецЕсли;
		Если ЗначениеЗаполнено(СсылкаНаДок.Секретарь) Тогда
			ОбластьПодвал.Параметры.Секретарь = КР_ОбщийКлиентСервер.СформироватьИмяИгрока(СсылкаНаДок.Секретарь);
		КонецЕсли;
		ТабДок.Вывести(ОбластьПодвал);
	КонецЕсли;
	
	ЗаполнитьЗаголовокСпискаИгр();		
	ЗаполнитьМониторингИгр();
	
	//ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина; 
	ТабДок.ПолеСверху = 5;
	ТабДок.ПолеСлева = 5;
	ТабДок.ПолеСнизу = 5;
	ТабДок.ПолеСправа = 5;
	ТаблицаОбщихДанных.Сортировать("НомерГруппы ВОЗР");
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если мЗакрытиеФормы И Не ЗавершениеРаботы Тогда
		Если ЭтотОбъект.Модифицированность Тогда
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), "Данные НЕ БУДУТ СОХРАНЕНЫ. Закрыть форму?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнениеСоответствийИгроков(Участники)
	
	СоответствияИгроков.Очистить();
	
	ВыводитьРейтингВТаблицу = Константы.ВыводитьРейтинг.Получить();
	Для Каждого ТекИгрок Из Участники Цикл
		//Если ТекИгрок.НомерГруппы <> 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		НовСтрока = СоответствияИгроков.Добавить();
		НовСтрока.ПредставлениеИгрока = КР_ОбщийКлиентСервер.СформироватьИмяИгрока(ТекИгрок.Участник, ВыводитьПолноеФИО);
		НовСтрока.Участник = ТекИгрок.Участник;
		СтрокиСРейтингом = СсылкаНаДок.СписокУчастников.НайтиСтроки(Новый Структура("Участник",НовСтрока.Участник));
		Если СтрокиСРейтингом.Количество() > 0 Тогда
			НовСтрока.ПредставлениеВСетке =  Строка(НовСтрока.ПредставлениеИгрока)+?(ВыводитьРейтингВТаблицу,"("+СтрокиСРейтингом[0].ТекущийРейтинг+")","");			
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

//ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ
&НаСервере
Процедура ЗаполнениеТаблицУчастниковИИгр(Область)
	
	//заполним участников из тч Участники по жеребьевке
	ЗаполнитьИгроковВТаблице(Область);
	//найдем все данные по играм и заполним их
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ Общая Из &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",СсылкаНаДок.ОбщаяТаблицаДанных.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ втОбщиеДанные Из &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",ВсяТаблицаОбщихДанных.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Выигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Проигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.КолШаров,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанных.ОчкиВыигравшего) КАК ОчкиВыигравшего,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанных.ОчкиПроигравшего) КАК ОчкиПроигравшего,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеП,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерГруппы КАК НомерГруппы
	|ПОМЕСТИТЬ втТЗ
	|ИЗ
	|	Общая КАК ПроведениеСоревнованияОбщаяТаблицаДанных
	|ГДЕ
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерТура = &НомТура
	|	И ПроведениеСоревнованияОбщаяТаблицаДанных.РежимТура = &РежимТура
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.РежимТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Проигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Выигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.КолШаров,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеП,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерГруппы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОбщиеДанные.НомерТура,
	|	&РежимТура,
	|	втОбщиеДанные.НомерСета,
	|	втОбщиеДанные.Выигравший,
	|	втОбщиеДанные.Проигравший,
	|	втОбщиеДанные.КолШаров,
	|	СУММА(втОбщиеДанные.ОчкиВыигравшего),
	|	СУММА(втОбщиеДанные.ОчкиПроигравшего),
	|	втОбщиеДанные.ТехническоеВ,
	|	втОбщиеДанные.ТехническоеП,
	|	втОбщиеДанные.НомерГруппы
	|ИЗ
	|	втОбщиеДанные КАК втОбщиеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбщиеДанные.Проигравший,
	|	втОбщиеДанные.ТехническоеВ,
	|	втОбщиеДанные.КолШаров,
	|	втОбщиеДанные.ТехническоеП,
	|	втОбщиеДанные.НомерСета,
	|	втОбщиеДанные.Выигравший,
	|	втОбщиеДанные.НомерТура,
	|	втОбщиеДанные.НомерГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТЗ.НомерТура,
	|	втТЗ.РежимТура,
	|	втТЗ.НомерСета,
	|	втТЗ.Выигравший,
	|	втТЗ.Проигравший,
	|	втТЗ.ОчкиВыигравшего,
	|	втТЗ.ОчкиПроигравшего,
	|	втТЗ.ТехническоеВ,
	|	втТЗ.ТехническоеП,
	|	втТЗ.КолШаров,
	|	втТЗ.НомерГруппы
	|ПОМЕСТИТЬ втОбщая
	|ИЗ
	|	втТЗ КАК втТЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	втТЗ.НомерТура,
	|	втТЗ.РежимТура,
	|	втТЗ.НомерСета,
	|	втТЗ.Выигравший,
	|	втТЗ.Проигравший,
	|	втТЗ.ОчкиВыигравшего,
	|	втТЗ.ОчкиПроигравшего,
	|	втТЗ.ТехническоеВ,
	|	втТЗ.ТехническоеП,
	|	втТЗ.КолШаров,
	|	втТЗ.НомерГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбщая.НомерТура,
	|	втОбщая.РежимТура,
	|	втОбщая.Выигравший,
	|	втОбщая.Проигравший,
	|	СУММА(втОбщая.ОчкиВыигравшего) КАК ОчкиВыигравшего,
	|	СУММА(втОбщая.ОчкиПроигравшего) КАК ОчкиПроигравшего,
	|	втОбщая.ТехническоеВ,
	|	втОбщая.ТехническоеП,
	|	втОбщая.НомерГруппы КАК НомерГруппы
	|ИЗ
	|	втОбщая КАК втОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбщая.НомерТура,
	|	втОбщая.РежимТура,
	|	втОбщая.Выигравший,
	|	втОбщая.Проигравший,
	|	втОбщая.ТехническоеВ,
	|	втОбщая.ТехническоеП,
	|	втОбщая.НомерГруппы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппы";
	Запрос.УстановитьПараметр("НомТура",НомерТура);
	Запрос.УстановитьПараметр("РежимТура",РежимТура);
	СводнаяТаблица= Запрос.Выполнить().Выгрузить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ втОбщая КАК втОбщая";
	втОбщая = Запрос.Выполнить().Выгрузить();
	//с этой таблицы получили данные теперь можем ее очистить
	//она могла быть заполнены в начальной процедуре ЗаполнитьИгроковВТаблице
	ВсяТаблицаОбщихДанных.Очистить();
	Если втОбщая.Количество() > 0 Тогда //проверяем данные
		Для Каждого ТекЗначение Из втОбщая Цикл
			//и в главную таблицу
			НовСтрока = ВсяТаблицаОбщихДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,ТекЗначение);
		КонецЦикла;
		ВсяТаблицаОбщихДанных.Сортировать("НомерГруппы ВОЗР, НомерСета ВОЗР");
		ЗаполнениеСетки(Область,СводнаяТаблица);
		ЗаполнитьСводнуюТаблицу();
	Иначе
		ЗаполнитьНеопределенныеРасшифровки(Область);
	КонецЕсли;
	
КонецПроцедуры

//заполняет параметры таб дока Игрок1, Игрок2 и т.д.
&НаСервере
Процедура ЗаполнитьИгроковВТаблице(Область)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ Из &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",СсылкаНаДок.УчастникиПоЖеребьевке.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.НомерИгры,
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.Участник,
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.ТекущийРейтинг КАК ТекущийРейтинг,
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.Пропускает1Тур,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(70)) КАК Представление
	|ИЗ
	|	ТЗ КАК ПроведениеСоревнованияУчастникиПоЖеребьевке
	|ГДЕ
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.РежимТура = &Режим
	|	И ПроведениеСоревнованияУчастникиПоЖеребьевке.НомерТура = &НомерТура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТекущийРейтинг УБЫВ";
	Запрос.УстановитьПараметр("Режим",РежимТура);
	Запрос.УстановитьПараметр("НомерТура",НомерТура);
	Игроки = Запрос.Выполнить().Выгрузить();
	ВыводитьРейтингВТаблицу = Константы.ВыводитьРейтинг.Получить();
	Если Игроки.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из Игроки Цикл
			//найдем представление игрока
			Искомый = СоответствияИгроков.НайтиСтроки(Новый Структура("Участник",ТекСтрока.Участник));
			Если Искомый.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(Строка(Искомый[0].ПредставлениеИгрока)) Тогда
					ПредставлениеИгрока = Строка(Искомый[0].ПредставлениеИгрока)+?(ВыводитьРейтингВТаблицу,"("+ТекСтрока.ТекущийРейтинг+")","");
				Иначе
					ПредставлениеИгрока = "";
				КонецЕсли;
			Иначе
				ПредставлениеИгрока= "";
			КонецЕсли;
			ТекСтрока.Представление = СокрЛП(ПредставлениеИгрока);
			//Область.Параметры["Игрок"+ТекСтрока.НомерИгры] = ПредставлениеИгрока;
		КонецЦикла;
		глТаблицаИгроков = Игроки;
		ЗаполнениеНумерацииУчастников(Область);
		ЗаполнитьНачальныеИгры(Игроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеНумерацииУчастников(Область)
	
	НумерацияИгр = СсылкаНаДок.НумерацияВСетке;
	СоответствияНомеровИгроков.Очистить();
	Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
		//это взято с жеребьевки там сделано по индексу поэтому просто будем прибавлять +1
		Если НумерацияИгроков = 8 Тогда
			УстановитьНомерУчастника(0,1,1,8,Область);
			УстановитьНомерУчастника(2,3,5,4,Область);
			УстановитьНомерУчастника(4,5,3,6,Область);
			УстановитьНомерУчастника(6,7,7,2,Область);
		ИначеЕсли НумерацияИгроков = 16 Тогда
			УстановитьНомерУчастника(0,1,		1,16,Область);
			УстановитьНомерУчастника(2,3,		9,8,Область);
			УстановитьНомерУчастника(4,5,		5,12,Область);
			УстановитьНомерУчастника(6,7,		13,4,Область);
			УстановитьНомерУчастника(8,9,		3,14,Область);
			УстановитьНомерУчастника(10,11,	11,6,Область);
			УстановитьНомерУчастника(12,13,	7,10,Область);
			УстановитьНомерУчастника(14,15,	15,2,Область);
		ИначеЕсли НумерацияИгроков = 24 Тогда
			УстановитьНомерУчастника(0,9999,		1,0,Область);//1
			УстановитьНомерУчастника(1,2,		17,16,Область);//17-16
			УстановитьНомерУчастника(3,4,		9,24,Область);
			УстановитьНомерУчастника(5,9999,	8,0,Область);//8
			УстановитьНомерУчастника(6,9999,	5,0,Область);//5
			УстановитьНомерУчастника(7,8,		21,12,Область);
			УстановитьНомерУчастника(9,10,	13,20,Область);
			УстановитьНомерУчастника(11,9999,	4,0,Область);//4
			УстановитьНомерУчастника(12,9999,	3,0,Область);//3
			УстановитьНомерУчастника(13,14,	19,14,Область);
			УстановитьНомерУчастника(15,16,	11,22,Область);
			УстановитьНомерУчастника(17,9999,	6,0,Область);//6
			УстановитьНомерУчастника(18,9999,	7,0,Область);//7
			УстановитьНомерУчастника(19,20,	23,10,Область);
			УстановитьНомерУчастника(21,22,	15,18,Область);
			УстановитьНомерУчастника(23,9999,	2,0,Область);//2
		ИначеЕсли НумерацияИгроков = 32 Тогда
			УстановитьНомерУчастника(0,1,		1,32,Область);
			УстановитьНомерУчастника(2,3,		17,16,Область);
			УстановитьНомерУчастника(4,5,		9,24,Область);
			УстановитьНомерУчастника(6,7,		25,8,Область);
			УстановитьНомерУчастника(8,9,		5,28,Область);
			УстановитьНомерУчастника(10,11,	21,12,Область);
			УстановитьНомерУчастника(12,13,	13,20,Область);
			УстановитьНомерУчастника(14,15,	29,4,Область);
			УстановитьНомерУчастника(16,17,		3,30,Область);
			УстановитьНомерУчастника(18,19,		19,14,Область);
			УстановитьНомерУчастника(20,21,		11,22,Область);
			УстановитьНомерУчастника(22,23,		27,6,Область);
			УстановитьНомерУчастника(24,25,		7,26,Область);
			УстановитьНомерУчастника(26,27,	23,10,Область);
			УстановитьНомерУчастника(28,29,	15,18,Область);
			УстановитьНомерУчастника(30,31,	31,2,Область);
		ИначеЕсли НумерацияИгроков = 48 Тогда
			УстановитьНомерУчастника(0,9999,		1,0,Область);
			УстановитьНомерУчастника(1,2,		32,33,Область);
			УстановитьНомерУчастника(3,4,		17,48,Область);
			УстановитьНомерУчастника(5,9999,	16,0,Область);
			УстановитьНомерУчастника(6,9999,	9,0,Область);
			УстановитьНомерУчастника(7,8,		24,41,Область);
			УстановитьНомерУчастника(9,10,	25,40,Область);
			УстановитьНомерУчастника(11,9999,	8,0,Область);
			УстановитьНомерУчастника(12,9999,	5,0,Область);
			УстановитьНомерУчастника(13,14,	28,37,Область);
			УстановитьНомерУчастника(15,16,	21,44,Область);
			УстановитьНомерУчастника(17,9999,	12,0,Область);
			УстановитьНомерУчастника(18,9999,	13,0,Область);
			УстановитьНомерУчастника(19,20,	20,45,Область);
			УстановитьНомерУчастника(21,22,	29,36,Область);
			УстановитьНомерУчастника(23,9999,	4,0,Область);
			
			УстановитьНомерУчастника(24,9999,		3,0,Область);
			УстановитьНомерУчастника(25,26,		30,35,Область);
			УстановитьНомерУчастника(27,28,		19,46,Область);
			УстановитьНомерУчастника(29,9999,	14,0,Область);
			УстановитьНомерУчастника(30,9999,	11,0,Область);
			УстановитьНомерУчастника(31,32,		22,43,Область);
			УстановитьНомерУчастника(33,34,	37,38,Область);
			УстановитьНомерУчастника(35,9999,	6,0,Область);
			УстановитьНомерУчастника(36,9999,	7,0,Область);
			УстановитьНомерУчастника(37,38,	26,39,Область);
			УстановитьНомерУчастника(39,40,	23,42,Область);
			УстановитьНомерУчастника(41,9999,	10,0,Область);
			УстановитьНомерУчастника(42,9999,	15,0,Область);
			УстановитьНомерУчастника(43,44,	18,47,Область);
			УстановитьНомерУчастника(45,46,	31,34,Область);
			УстановитьНомерУчастника(47,9999,	2,0,Область);
		ИначеЕсли НумерацияИгроков = 64 Тогда
			УстановитьНомерУчастника(0,1,		1,64,Область);
			УстановитьНомерУчастника(2,3,		33,32,Область);
			УстановитьНомерУчастника(4,5,		17,48,Область);
			УстановитьНомерУчастника(6,7,		49,16,Область);
			УстановитьНомерУчастника(8,9,		9,56,Область);
			УстановитьНомерУчастника(10,11,	41,24,Область);
			УстановитьНомерУчастника(12,13,	25,40,Область);
			УстановитьНомерУчастника(14,15,	57,8,Область);
			УстановитьНомерУчастника(16,17,	5,60,Область);
			УстановитьНомерУчастника(18,19,	37,28,Область);
			УстановитьНомерУчастника(20,21,	21,44,Область);
			УстановитьНомерУчастника(22,23,	53,12,Область);
			УстановитьНомерУчастника(24,25,	13,52,Область);
			УстановитьНомерУчастника(26,27,	45,20,Область);
			УстановитьНомерУчастника(28,29,	29,36,Область);
			УстановитьНомерУчастника(30,31,	61,4,Область);
			УстановитьНомерУчастника(32,33,	3,62,Область);
			УстановитьНомерУчастника(34,35,	35,30,Область);
			УстановитьНомерУчастника(36,37,	19,46,Область);
			УстановитьНомерУчастника(38,39,	51,14,Область);
			УстановитьНомерУчастника(40,41,	11,54,Область);
			УстановитьНомерУчастника(42,43,	43,22,Область);
			УстановитьНомерУчастника(44,45,	27,38,Область);
			УстановитьНомерУчастника(46,47,	59,6,Область);
			УстановитьНомерУчастника(48,49,	7,58,Область);
			УстановитьНомерУчастника(50,51,	39,26,Область);
			УстановитьНомерУчастника(52,53,	23,42,Область);
			УстановитьНомерУчастника(54,55,	55,10,Область);
			УстановитьНомерУчастника(56,57,	15,50,Область);
			УстановитьНомерУчастника(58,59,	47,18,Область);
			УстановитьНомерУчастника(60,61,	31,34,Область);
			УстановитьНомерУчастника(62,63,	63,2,Область);
		КонецЕсли;
	ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
		Для Каждого ТекУчастник Из глТаблицаИгроков Цикл
			Если ТекУчастник.НомерИгры <> 0 Тогда
				Область.Параметры["Игрок"+ТекУчастник.НомерИгры] = ТекУчастник.Представление;			
			КонецЕсли; 
		КонецЦикла;
		//теперь ставим сами номера
		Для Сч = 1 По НумерацияИгроков Цикл
			Область.Параметры["Сч"+Сч] = Сч;
			НовСтрока = СоответствияНомеровИгроков.Добавить();
			НовСтрока.НомерИгрока				 = Сч;
			НовСтрока.НомерСоответствия = Сч;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьНомерУчастника(Индекс1,Индекс2,Номер1,Номер2,парОбласть)
	//глТаблицаИгроков
	Индекс1 = Индекс1 + 1;
	Индекс2 = Индекс2 + 1;
	ПервыйУчастник = глТаблицаИгроков.Найти(Номер1,"НомерИгры");
	ВторойУчастник = глТаблицаИгроков.Найти(Номер2,"НомерИгры");
	//установим участников
	Попытка
		парОбласть.Параметры["Игрок"+Индекс1] = ?(ПервыйУчастник = Неопределено,"",ПервыйУчастник.Представление);
		НовСтрока1 = СоответствияНомеровИгроков.Добавить();
		НовСтрока1.НомерИгрока				= Индекс1;
		НовСтрока1.НомерСоответствия	= Номер1;
	Исключение	
	КонецПопытки;
	Попытка
		парОбласть.Параметры["Игрок"+Индекс2] = ?(ВторойУчастник = Неопределено,"",ВторойУчастник.Представление);
		НовСтрока2 = СоответствияНомеровИгроков.Добавить();
		НовСтрока2.НомерИгрока				= Индекс2;
		НовСтрока2.НомерСоответствия	= Номер2;
	Исключение	
	КонецПопытки;
	
	Попытка
		парОбласть.Параметры["Сч"+Индекс1] = Номер1;
	Исключение
	КонецПопытки;
	
	Попытка
		парОбласть.Параметры["Сч"+Индекс2] = Номер2;
	Исключение
	КонецПопытки;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьНачальныеИгры(Игроки)
	
	НумерацияИгр = СсылкаНаДок.НумерацияВСетке;
	//Игроки.Сортировать("НомерИгры ВОЗР");
	Если НумерацияИгроков <= 8 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//1. 1-8
			//2. 5-4
			//3. 3-6
			//4. 7-2
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,5,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,3,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,2,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,2,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,3,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,8,Игроки));
		КонецЕсли;
	ИначеЕсли НумерацияИгроков > 8 И НумерацияИгроков <= 16 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//1. 1-16
			//2. 9-8
			//3. 5-12
			//4. 13-4
			//5. 3-14
			//6. 11-6
			//7. 7-10
			//8. 15-2
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,9,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,13,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,3,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,7,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,2,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,2,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,3,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,9,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,13,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,16,Игроки));
		КонецЕсли;	
	ИначеЕсли НумерацияИгроков > 16 И НумерацияИгроков <= 24 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//|1. 1
			//|2. 17-16
			//|3. 9-24
			//|4. 8
			//|5. 5
			//|6. 21-12
			//|7. 13-20
			//|8. 4
			//|9. 3
			//|10. 19-14
			//|11. 11-22
			//|12. 6
			//|13. 7
			//|14. 23-10
			//|15. 15-18
			//|16. 2";
			ДобавитьНачальнуюИгру(СтруктураДанных(1,17,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,9,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,21,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,13,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,19,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,23,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,18,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,2,3,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,4,5,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,8,9,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,10,11,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,14,15,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,16,17,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,20,21,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,22,23,Игроки));
		КонецЕсли;
		ДобавитьНачальнуюИгру(СтруктураДанных(9,1,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(10,6,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(11,7,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(12,12,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(13,13,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(14,18,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(15,19,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(16,24,0,Игроки));
	ИначеЕсли НумерацияИгроков > 24 И НумерацияИгроков <= 32 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//1. 1-32
			//2. 17-16
			//3. 9-24
			//4. 25-8
			//5. 5-28
			//6. 21-12
			//7. 13-20
			//8. 29-4
			//9. 3-30
			//10. 19-14
			//11. 11-22
			//12. 27-6
			//13. 7-26
			//14. 23-10
			//15. 15-18
			//16. 31-2
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,32,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,17,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,9,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,25,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,5,28,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,21,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,13,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,29,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,3,30,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,19,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,11,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,27,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,7,26,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,23,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,15,18,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,31,2,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,2,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,3,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,9,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,13,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,17,18,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,19,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,21,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,23,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,25,26,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,27,28,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,29,30,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,31,32,Игроки));
		КонецЕсли;
	ИначеЕсли НумерацияИгроков > 32 И НумерацияИгроков <= 48 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,32,33,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,17,48,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,24,41,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,25,40,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,28,37,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,21,44,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,20,45,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,29,36,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,30,35,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,19,46,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,22,43,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,27,38,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,26,39,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,23,42,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,18,47,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,31,34,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,2,3,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,4,5,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,8,9,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,10,11,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,14,15,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,16,17,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,20,21,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,22,23,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,26,27,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,28,29,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,32,33,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,34,35,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,38,39,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,40,41,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,44,45,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,46,47,Игроки));
		КонецЕсли;
		//это одиночки
		ДобавитьНачальнуюИгру(СтруктураДанных(17,1,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(18,6,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(19,7,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(20,12,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(21,13,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(22,18,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(23,19,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(24,24,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(25,25,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(26,30,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(27,31,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(28,36,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(29,37,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(30,42,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(31,43,0,Игроки));
		ДобавитьНачальнуюИгру(СтруктураДанных(32,48,0,Игроки));
	ИначеЕсли НумерацияИгроков > 48 И НумерацияИгроков <= 64 Тогда
		Если НумерацияИгр = Перечисления.НумерацияВСетке.ПервыйПоследний Тогда
			//1. 1-64
			//2. 33-32
			//3. 17-48
			//4. 49-16
			//5. 9-56
			//6. 41-24
			//7. 25-40
			//8. 57-8
			//9. 5-60
			//10. 37-28
			//11. 21-44
			//12. 53-12
			//13. 13-52
			//14. 45-20
			//15. 29-36
			//16. 61-4
			//17. 3-62
			//18. 35-30
			//19. 19-46
			//20. 51-14
			//21. 11-54
			//22. 43-22
			//23. 27-38
			//24. 59-6
			//25. 7-58
			//26. 39-26
			//27. 23-42
			//28. 55-10
			//29. 15-50
			//30. 47-18
			//31. 31-34
			//32. 63-2
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,64,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,33,32,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,17,48,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,49,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,9,56,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,41,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,25,40,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,57,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,5,60,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,37,28,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,21,44,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,53,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,13,52,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,45,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,29,36,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,61,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(17,3,62,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(18,35,30,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(19,19,46,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(20,51,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(21,11,54,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(22,43,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(23,27,38,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(24,59,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(25,7,58,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(26,39,26,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(27,23,42,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(28,55,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(29,15,50,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(30,47,18,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(31,31,34,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(32,63,2,Игроки));
		ИначеЕсли НумерацияИгр = Перечисления.НумерацияВСетке.ПоПорядку Тогда
			ДобавитьНачальнуюИгру(СтруктураДанных(1,1,2,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(2,3,4,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(3,5,6,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(4,7,8,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(5,9,10,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(6,11,12,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(7,13,14,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(8,15,16,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(9,17,18,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(10,19,20,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(11,21,22,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(12,23,24,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(13,25,26,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(14,27,28,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(15,29,30,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(16,31,32,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(17,33,34,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(18,35,36,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(19,37,38,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(20,39,40,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(21,41,42,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(22,43,44,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(23,45,46,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(24,47,48,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(25,49,50,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(26,51,52,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(27,53,54,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(28,55,56,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(29,57,58,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(30,59,60,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(31,61,62,Игроки));
			ДобавитьНачальнуюИгру(СтруктураДанных(32,63,64,Игроки));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//функция получает структуру данных для добавления
//НомИгры = номеры игры
//Номер1 = номер первого игрока в паре
//Номер2 = номер второго игрока в паре
//Игроки = все игроки
&НаСервере
Функция СтруктураДанных(НомИгры,Знач Номер1,Знач Номер2,Игроки)
	
	//Номер1 = Номер1 - 1;
	//Номер2 = Номер2 - 1;
	Если Номер1 = 0 Или Номер2 = 0 Тогда
		парСоответ1 = СоответствияНомеровИгроков.НайтиСтроки(Новый Структура("НомерИгрока",Номер1));
		Если парСоответ1.Количество() > 0 Тогда
			Номер1 = парСоответ1[0].НомерСоответствия;
		КонецЕсли; 
		парСоответ2 = СоответствияНомеровИгроков.НайтиСтроки(Новый Структура("НомерИгрока",Номер2));
		Если парСоответ2.Количество() > 0 Тогда
			Номер2 = парСоответ2[0].НомерСоответствия;
		КонецЕсли; 
	КонецЕсли; 
	
	Попытка
		стрПервый 	= Игроки.Найти(Номер1,"НомерИгры");//Получить(Номер1);
		Первый 			=	стрПервый.Участник; 
		Пропуск1 		= стрПервый.Пропускает1Тур; 
	Исключение
		стрПервый	= Неопределено;
		Первый			= Справочники.Участники.ПустаяСсылка();
		Пропуск1 		= Ложь; 
	КонецПопытки;
	
	Попытка
		стрВторой 	= Игроки.Найти(Номер2,"НомерИгры");
		Второй			= стрВторой.Участник;	 
		Пропуск2 		= стрВторой.Пропускает1Тур; 
	Исключение
		стрВторой 	= Неопределено;
		Второй 			= Справочники.Участники.ПустаяСсылка();
		Пропуск2 		= Ложь; 
	КонецПопытки;
	
	Если Пропуск1 И Пропуск2 Тогда
		//такого быть не может
	ИначеЕсли Пропуск1 Или Пропуск2 Тогда
		//и в главную таблицу
		Если Пропуск1 Тогда
			ВыигравшийУчастник = Первый;
		Иначе
			ВыигравшийУчастник = Второй;
		КонецЕсли;
		//Для Н = 1 По КолПартий -2 Цикл
		//перед этим проверим есть ли уже эти данные
		Отбор = Новый Структура;
		Отбор.Вставить("Выигравший",ВыигравшийУчастник);
		Отбор.Вставить("Проигравший",Справочники.Участники.ПустаяСсылка());
		Отбор.Вставить("НомерГруппы",НомИгры);
		Отбор.Вставить("НомерТура",НомерТура);
		МассивИскомыхСтрок = ВсяТаблицаОбщихДанных.НайтиСтроки(Отбор);
		Если МассивИскомыхСтрок.Количество() = 0 Тогда
			НовСтрока = ВсяТаблицаОбщихДанных.Добавить();
			НовСтрока.Выигравший  = ВыигравшийУчастник;
			НовСтрока.Проигравший = Справочники.Участники.ПустаяСсылка();
			НовСтрока.ОчкиВыигравшего  = 0;
			НовСтрока.ОчкиПроигравшего = 0;
			НовСтрока.НомерГруппы	= НомИгры;
			НовСтрока.НомерСета	   = 1;
			НовСтрока.НомерТура		   = НомерТура;
			НовСтрока.ТехническоеВ   = Ложь;
			НовСтрока.ТехническоеП	= Истина;
		КонецЕсли;
		//КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("Первый,Второй,Этап",Первый,Второй,НомИгры);
	
КонецФункции

&НаСервере
Процедура ДобавитьНачальнуюИгру(Данные)
	
	НовСтрока = НачальныеИгры.Добавить();
	НовСтрока.Выигравший  		= Данные.Первый;
	НовСтрока.Проигравший 		= Данные.Второй;
	НовСтрока.ЭтапВСхеме	   	= Данные.Этап;
	НовСтрока.НомерТура		  	= НомерТура;
	
КонецПроцедуры

//процедура заполняет все параметры которые неопределены текущими расшифровками
//что бы можно было обработать в событии расшифровки табдока
&НаСервере
Процедура ЗаполнитьНеопределенныеРасшифровки(Область)
	//пройдемся по всем параметрам таб дока нам нужны только расшифровка
	Для Каждого ТекПараметр Из СоответствияИгр Цикл
		Если Область.Параметры["РИгра"+ТекПараметр.Игра] = Неопределено Тогда
			Область.Параметры["РИгра"+ТекПараметр.Игра] = ТекПараметр.Расшифровка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// если есть участники которых 100% можно продвинуть, то нужно сделать это автоматически
// пока для того что бы не забыть потом сделать 
&НаСервере
Процедура ПродвинутьУчастниковДальшеПоСетке(ПараметрыПродвижения)
	
	Если РежимТура = Перечисления.РежимыТуровСоревнования.Олимпийка Тогда
		Возврат;
	КонецЕсли; 
	
	//всегда будем пытаться продвигать двоих участников
	перемВыигравший 		= ПараметрыПродвижения.перемВыигравший;
	перемПроигравший 	= ПараметрыПродвижения.перемПроигравший;
	парНомерИгры			= ПараметрыПродвижения.втНомерИгры;
	
	втСвернутаяТаблица = ВсяТаблицаОбщихДанных.Выгрузить(,"Выигравший,Проигравший,НомерГруппы");
	втСвернутаяТаблица.Свернуть("Выигравший,Проигравший,НомерГруппы");
	
	Если ЗначениеЗаполнено(перемВыигравший) Тогда
		//ПродвинутьУчастникаДальше(втСвернутаяТаблица,парНомерИгры,перемВыигравший);		
	КонецЕсли; 
	Если ЗначениеЗаполнено(перемПроигравший) Тогда
		ПродвинутьУчастникаДальше(втСвернутаяТаблица,парНомерИгры,перемПроигравший,Ложь);
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПродвинутьУчастникаДальше(мВсяТаблица,парНомерИгры,УчастникПродвижения,ДвигатьВыигравшего = Истина)
	
	ПробоватьПродвинуть = Истина;
	
	Пока ПробоватьПродвинуть Цикл
		//т.к. он проигравший то игра будет с буквой М
		Если ДвигатьВыигравшего Тогда
			ТекРасшифровкаПеремещения = "Игра"+парНомерИгры;
		Иначе
			ТекРасшифровкаПеремещения = "ИграМ"+парНомерИгры;
		КонецЕсли; 
		СледНомИгрыПеремещения = 0;
		СледРасшифровкаИгры = "";
		Для каждого ТекИгра Из СоответствияИгр Цикл
			Если Найти(ТекИгра.Расшифровка,ТекРасшифровкаПеремещения) > 0 Тогда
				СледНомИгрыПеремещения 	= ТекИгра.Игра;
				СледРасшифровкаИгры 			= ТекИгра.Расшифровка;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		РасшифровкаИгры = СледРасшифровкаИгры;
		//из расшифровки выцепим игры из которых должна состояться партия СчНомераИгры
		Решетка = Найти(РасшифровкаИгры,"#");
		ПервыйИгрок = Сред(РасшифровкаИгры,1,Решетка-1);
		ВторойИгрок = СокрЛП(Сред(РасшифровкаИгры,Решетка+1,СтрДлина(РасшифровкаИгры)));
		//выделим цифры из расшифровок
		ПерваяЦифраИгры = "";
		ВтораяЦифраИгры = "";
		Для НомСимвола = 1 По СтрДлина(ПервыйИгрок) Цикл
			мКодСимвола = КодСимвола(ПервыйИгрок,НомСимвола);
			//48 - 57 
			Если мКодСимвола >= 48 и мКодСимвола <= 57 Тогда //это цифра
				ПерваяЦифраИгры = ПерваяЦифраИгры + Сред(ПервыйИгрок,НомСимвола,1); 	
			КонецЕсли;
		КонецЦикла; 
		Для НомСимвола = 1 По СтрДлина(ВторойИгрок) Цикл
			мКодСимвола = КодСимвола(ВторойИгрок,НомСимвола);
			//48 - 57 
			Если мКодСимвола >= 48 и мКодСимвола <= 57 Тогда //это цифра
				ВтораяЦифраИгры = ВтораяЦифраИгры + Сред(ВторойИгрок,НомСимвола,1); 	
			КонецЕсли;
		КонецЦикла; 
		ПерваяЦифраИгры = Число(ПерваяЦифраИгры);
		ВтораяЦифраИгры = Число(ВтораяЦифраИгры);
		//ищем проигравших по этим играм
		Массив1 = мВсяТаблица.НайтиСтроки(Новый Структура("НомерГруппы",ПерваяЦифраИгры));
		Если Массив1.Количество() > 0 Тогда
			Если ДвигатьВыигравшего Тогда
				втУчастникДляДвиженияВСетке	= Массив1[0].Выигравший;
			Иначе
				втУчастникДляДвиженияВСетке 	= Массив1[0].Проигравший;
			КонецЕсли;
		КонецЕсли; 
		Массив2 = мВсяТаблица.НайтиСтроки(Новый Структура("НомерГруппы",ВтораяЦифраИгры));
		Если Массив2.Количество() > 0 Тогда
			Если ДвигатьВыигравшего Тогда
				втУчастникДляДвиженияВСетке1	= Массив2[0].Выигравший;
			Иначе
				втУчастникДляДвиженияВСетке1	= Массив2[0].Проигравший;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(втУчастникДляДвиженияВСетке) И ЗначениеЗаполнено(втУчастникДляДвиженияВСетке1) Тогда 
			//они еще могут играть
			ПробоватьПродвинуть = Ложь;
			Продолжить;
		Иначе
			Если Не ЗначениеЗаполнено(втУчастникДляДвиженияВСетке) И НЕ ЗначениеЗаполнено(втУчастникДляДвиженияВСетке1) Тогда
				//хрень какая то, такого не должно быть
				ПробоватьПродвинуть = Ложь;
				Продолжить;
			КонецЕсли; 
			//можем продвинуть того кто заполнен
			Если ЗначениеЗаполнено(втУчастникДляДвиженияВСетке) Тогда
				ПродвигаемыйИгрок = втУчастникДляДвиженияВСетке;
			Иначе
				ПродвигаемыйИгрок = втУчастникДляДвиженияВСетке1;
			КонецЕсли;
			//продвигаем участника
			НовСтрока = ВсяТаблицаОбщихДанных.Добавить();
			НовСтрока.РежимТура = РежимТура;
			НовСтрока.НомерТура = НомерТура;
			НовСтрока.НомерГруппы = СледНомИгрыПеремещения;
			НовСтрока.НомерСета = 1;
			НовСтрока.Выигравший  = ПродвигаемыйИгрок;
			НовСтрока.Проигравший = Справочники.Участники.ПустаяСсылка();
			НовСтрока.КолШаров	   = 0;
			НовСтрока.ОчкиВыигравшего = КР_ОбщийКлиентСервер.ОпределитьКолПартий(КолПартий);
			НовСтрока.ОчкиПроигравшего= 0;
			НовСтрока.ТехническоеВ = Ложь;
			НовСтрока.ТехническоеП = Истина;
			
			ПробоватьПродвинуть = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		мЗакрытиеФормы = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	
	Если ЭтотОбъект.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
	ЭтотОбъект.Закрыть();
	ОповеститьОВыборе(ВсяТаблицаОбщихДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьБезЗакрытия(Команда)
	
	Если ЭтотОбъект.Модифицированность Тогда
		ЭтотОбъект.ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(ВсяТаблицаОбщихДанных);
		ПоказатьОповещениеПользователя("Внимание",,"Данные таблицы успешно записаны",БиблиотекаКартинок.Информация);
		ЭтотОбъект.ЗакрыватьПриВыборе = Истина;
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// расшифруем игру
	НомерИгрыТабДока = СоответствияИгр.НайтиСтроки(Новый Структура("Расшифровка", Расшифровка))[0].Игра;
	// определим откуда брать игроков
	ИскомаяИгра = Расшифровка;
	Решетка = Найти(ИскомаяИгра, "#");
	ПервыйИгрок = Сред(ИскомаяИгра, 1, Решетка - 1);
	ВторойИгрок = СокрЛП(Сред(ИскомаяИгра, Решетка + 1, СтрДлина(ИскомаяИгра)));
	// по сокращенному названию ищем в таблице соответствий игроков ссылочные данные
	Если Элемент.ТекущаяОбласть.Текст <> "" Тогда
		ДанныеИгры 	= ПоискСсылкиНаИгрокаТаДок(НомерИгрыТабДока);
		СсылкаИгрок1 = ДанныеИгры.Игрок1;
		СсылкаИгрок2 = ДанныеИгры.Игрок2;
		ДанныеИгры.Вставить("ТехническоеВ", ДанныеИгры.ТехническоеВ);
		ДанныеИгры.Вставить("ТехническоеП", ДанныеИгры.ТехническоеП);
	Иначе//для пустых значений
		Если Найти(ПервыйИгрок, "Игрок") > 0 И Найти(ВторойИгрок, "Игрок") > 0 Тогда
			//начальные игры
			ДанныеИгры 	= ПоискИгроковПоРасшифровкеНомера(НомерИгрыТабДока, Истина);
			СсылкаИгрок1 = ДанныеИгры.Игрок1;
			СсылкаИгрок2 = ДанныеИгры.Игрок2;
		ИначеЕсли (Найти(ПервыйИгрок, "Игрок") > 0 И Найти(ВторойИгрок, "Игра") > 0) Или (Найти(ПервыйИгрок, "Игра")
			> 0 И Найти(ВторойИгрок, "Игрок") > 0) Тогда
			//пока что только для макета с 24
			//определим где игрок , а где игра
			ДанныеИгры 	= Новый Структура;
			Если Найти(ПервыйИгрок, "Игрок") > 0 Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("НомерИгрока", Число(СтрЗаменить(ПервыйИгрок, "Игрок", "")));
				ДанныеСоответствия = СоответствияНомеровИгроков.НайтиСтроки(Отбор);
				Если ДанныеСоответствия.Количество() > 0 Тогда
					парНомерИгры = ДанныеСоответствия[0].НомерСоответствия;
				Иначе
					парНомерИгры = Число(СтрЗаменить(ПервыйИгрок, "Игрок", ""));
				КонецЕсли; 
				//1. игрок а соперник из игры
				Отбор = Новый Структура;
				Отбор.Вставить("НомерГруппы", 0);
				Отбор.Вставить("РежимТура", РежимТура);
				Отбор.Вставить("НомерТура", НомерТура);
				Отбор.Вставить("НомерИгры", парНомерИгры);
				МассивУчастниковТура = СсылкаНаДок.УчастникиПоЖеребьевке.НайтиСтроки(Отбор);
				Если МассивУчастниковТура.Количество() = 0 Тогда
					СсылкаИгрок1 = Неопределено;
				Иначе
					СсылкаИгрок1 = МассивУчастниковТура[0].Участник;
				КонецЕсли;
				СсылкаИгрок2 = ПоискСсылкиНаИгрокаТаДок(Число(СтрЗаменить(ВторойИгрок, "Игра", ""))).Игрок1;
			Иначе
				Отбор = Новый Структура;
				Отбор.Вставить("НомерИгрока", Число(СтрЗаменить(ВторойИгрок, "Игрок", "")));
				ДанныеСоответствия = СоответствияНомеровИгроков.НайтиСтроки(Отбор);
				Если ДанныеСоответствия.Количество() > 0 Тогда
					парНомерИгры = ДанныеСоответствия[0].НомерСоответствия;
				Иначе
					парНомерИгры = Число(СтрЗаменить(ВторойИгрок, "Игрок", ""));
				КонецЕсли; 
				//в этом случае первая ссылка из игры, а вторая из игрока
				Отбор = Новый Структура;
				Отбор.Вставить("НомерГруппы", 0);
				Отбор.Вставить("РежимТура", РежимТура);
				Отбор.Вставить("НомерТура", НомерТура);
				Отбор.Вставить("НомерИгры", парНомерИгры);
				МассивУчастниковТура = СсылкаНаДок.УчастникиПоЖеребьевке.НайтиСтроки(Отбор);
				Если МассивУчастниковТура.Количество() = 0 Тогда
					СсылкаИгрок1 = Неопределено;
				Иначе
					СсылкаИгрок1 = МассивУчастниковТура[0].Участник;
				КонецЕсли;
				СсылкаИгрок2 = ПоискСсылкиНаИгрокаТаДок(Число(СтрЗаменить(ПервыйИгрок, "Игра", ""))).Игрок1;
			КонецЕсли;
		Иначе
			ДанныеИгры 	= Новый Структура;
			СсылкаИгрок1 = ПоискИгроковПоРасшифровкеНомера(ПервыйИгрок);
			СсылкаИгрок2 = ПоискИгроковПоРасшифровкеНомера(ВторойИгрок);
		КонецЕсли;
	КонецЕсли;
	ДанныеИгры.Вставить("Игрок1", СсылкаИгрок1);
	ДанныеИгры.Вставить("Игрок2", СсылкаИгрок2);
	ДанныеИгры.Вставить("КолПартий", КолПартий);
	Если СсылкаИгрок1 <> Неопределено Или СсылкаИгрок2 <> Неопределено Тогда

		ДляЗаполненияРезультата = КР_ОбщийКлиентСервер.ШаблонСтруктураДляВыбораРезультата();
		ДляЗаполненияРезультата.НомерТура 		= НомерТура;
		ДляЗаполненияРезультата.НомерГруппы 	= НомерИгрыТабДока;
		ДляЗаполненияРезультата.Выигравший		= СсылкаИгрок1;
		ДляЗаполненияРезультата.Проигравший 	= СсылкаИгрок2;
		ДляЗаполненияРезультата.КолПартий 		= КолПартий;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерТура", НомерТура);
		СтруктураПоиска.Вставить("РежимТура", РежимТура);
		СтруктураПоиска.Вставить("Участник", СсылкаИгрок1);
		ПоискРейтинга1 = СсылкаНаДок.УчастникиПоЖеребьевке.НайтиСтроки(СтруктураПоиска);
		Если ПоискРейтинга1.Количество() > 0 Тогда
			ДляЗаполненияРезультата.РейтингВыигравший	= ПоискРейтинга1[0].ТекущийРейтинг;
		КонецЕсли;
		СтруктураПоиска.Участник = СсылкаИгрок2;
		ПоискРейтинга2 = СсылкаНаДок.УчастникиПоЖеребьевке.НайтиСтроки(СтруктураПоиска);
		Если ПоискРейтинга2.Количество() > 0 Тогда
			ДляЗаполненияРезультата.РейтингПроигравший 	= ПоискРейтинга2[0].ТекущийРейтинг;
		КонецЕсли;

		Если ЗначениеЗаполнено(СсылкаИгрок1) И ЗначениеЗаполнено(СсылкаИгрок2) Тогда
			СтандартнаяОбработка = Ложь;

			ДляЗаполненияРезультата.АдресОбщейТаблицы = ПолучитьАдресХраненияВсейТаблицы();

			ОткрытьФорму("Документ.ПроведениеСоревнования.Форма.ВыборРезультата", ДляЗаполненияРезультата, ЭтотОбъект,
				УникальныйИдентификатор, , , Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораРезультата", ЭтотОбъект));
		Иначе
			Если Не ЗначениеЗаполнено(СсылкаИгрок1) И Не ЗначениеЗаполнено(СсылкаИгрок2) Тогда
				Возврат;
			КонецЕсли; 
			// кто то не сыграл, тогда предложим продвинуть вперед с помощью технического поражения с пустой ссылкой
			Если ЗначениеЗаполнено(СсылкаИгрок1) И Не ЗначениеЗаполнено(СсылкаИгрок2) Тогда
				ТекстВопроса = "У " + СсылкаИгрок1 + " нет соперника, продвинуть его вперед ?";
			ИначеЕсли Не ЗначениеЗаполнено(СсылкаИгрок1) И ЗначениеЗаполнено(СсылкаИгрок2) Тогда
				ТекстВопроса = "У " + СсылкаИгрок2 + " нет соперника, продвинуть его вперед ?";
			КонецЕсли;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеОтветаНаВопросПроПродвижение", ЭтотОбъект,
				ДляЗаполненияРезультата), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ,
				КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
	НомерИгрыТабДока = СоответствияИгр.НайтиСтроки(Новый Структура("Расшифровка",Расшифровка))[0].Игра;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросПроПродвижение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> Неопределено Тогда
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			ДанныеДляЗаполнения = ДопПараметры;
			
			Если ЗначениеЗаполнено(ДанныеДляЗаполнения.Проигравший) Тогда 
				ДанныеДляЗаполнения.Выигравший = ДанныеДляЗаполнения.Проигравший;
			КонецЕсли; 
			ДанныеДляЗаполнения.Проигравший = ПредопределенноеЗначение("Справочник.Участники.ПустаяСсылка");				
			
			ДанныеДляЗаполнения.Вставить("КолПартийВ",КР_ОбщийКлиентСервер.ОпределитьКолПартий(ДанныеДляЗаполнения.КолПартий));
			ДанныеДляЗаполнения.Вставить("КолПартийП",0);
			ДанныеДляЗаполнения.Вставить("ТехПоражение",Истина);
			ДанныеДляЗаполнения.Вставить("ТаблицаОчков",Новый Массив);
			ДанныеДляЗаполнения.Вставить("ЕстьДанныеПоОчкам",Ложь);
			ДанныеДляЗаполнения.Вставить("Удалить", Ложь);
			
			ПослеЗакрытияФормыВыбораРезультата(ДанныеДляЗаполнения, Неопределено);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресХраненияВсейТаблицы()
	Возврат ПоместитьВоВременноеХранилище(ВсяТаблицаОбщихДанных.Выгрузить(),УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораРезультата(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		//СтруктураВозврата.Вставить("НомерТура",НомерТура);
		//СтруктураВозврата.Вставить("НомерГруппы",НомерГруппы);
		//СтруктураВозврата.Вставить("Выигравший",Выигравший);
		//СтруктураВозврата.Вставить("Проигравший",Проигравший);
		//СтруктураВозврата.Вставить("КолПартий",ВариантыВыбораКоличестваПартий);
		//СтруктураВозврата.Вставить("КолПартийВ",КолПартийВ);
		//СтруктураВозврата.Вставить("КолПартийП",КолПартийП);
		//СтруктураВозврата.Вставить("ТехПоражение",мПроигравшийСТехническим);
		//СтруктураВозврата.Вставить("ТаблицаОчков",Серверные.ТаблицаЗначенийВМассив(ТаблицаПартий.Выгрузить()));
		//СтруктураВозврата.Вставить("ЕстьДанныеПоОчкам",Истина);
		//СтруктураВозврата.Вставить("Удалить", Ложь);
		
		Модифицированность = Истина;
		//попробуем найти эту пару
		Отбор = Новый Структура;                               
		Отбор.Вставить("Выигравший",Результат.Выигравший);
		Отбор.Вставить("Проигравший",Результат.Проигравший);
		Отбор.Вставить("НомерТура",Результат.НомерТура);
		Отбор.Вставить("НомерГруппы",Результат.НомерГруппы);
		ИскомыеСтроки = ВсяТаблицаОбщихДанных.НайтиСтроки(Отбор);
		Если ИскомыеСтроки.Количество() > 0 Тогда //строки уже есть перезаполняем
			Для Каждого ТекСтрока Из ИскомыеСтроки Цикл
				ВсяТаблицаОбщихДанных.Удалить(ВсяТаблицаОбщихДанных.Индекс(ТекСтрока));
			КонецЦикла;
		ИначеЕсли ИскомыеСтроки.Количество() = 0 Тогда
			///попробуем другой вариант вдруг выигравший изменился
			Отбор = Новый Структура;                               
			Отбор.Вставить("Выигравший",Результат.Проигравший);
			Отбор.Вставить("Проигравший",Результат.Выигравший);
			Отбор.Вставить("НомерТура",Результат.НомерТура);
			Отбор.Вставить("НомерГруппы",Результат.НомерГруппы);
			ИскомыеСтроки = ВсяТаблицаОбщихДанных.НайтиСтроки(Отбор);
			Если ИскомыеСтроки.Количество() > 0 Тогда //строки уже есть перезаполняем
				Для Каждого ТекСтрока Из ИскомыеСтроки Цикл
					ВсяТаблицаОбщихДанных.Удалить(ВсяТаблицаОбщихДанных.Индекс(ТекСтрока));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Удалить Тогда //тогда уже все сделано
			
		ИначеЕсли Не Результат.ЕстьДанныеПоОчкам Или Результат.ТехПоражение Тогда
			НовСтрока = ВсяТаблицаОбщихДанных.Добавить();
			НовСтрока.РежимТура 				= РежимТура;
			НовСтрока.НомерТура 				= Результат.НомерТура;
			НовСтрока.НомерГруппы 		= Результат.НомерГруппы;
			НовСтрока.НомерСета 		 		= 0;
			НовСтрока.Выигравший  			= Результат.Выигравший;
			НовСтрока.Проигравший	 		= Результат.Проигравший;
			НовСтрока.КолШаров	   			= 0;
			НовСтрока.ОчкиВыигравшего = Результат.КолПартийВ;
			НовСтрока.ОчкиПроигравшего = Результат.КолПартийП;
			НовСтрока.ТехническоеВ 		= Ложь;
			НовСтрока.ТехническоеП 		= Результат.ТехПоражение; 
			
		ИначеЕсли Результат.ЕстьДанныеПоОчкам Тогда 
			
			Если Результат.ТаблицаОчков[0].Участник = Результат.Выигравший Тогда
				стрВыигравшего 	= Результат.ТаблицаОчков[0];
				стрПроигравшего	= Результат.ТаблицаОчков[1];
			Иначе
				стрВыигравшего 	= Результат.ТаблицаОчков[1];
				стрПроигравшего	= Результат.ТаблицаОчков[0];
			КонецЕсли; 
			
			Для Н = 1 По Результат.КолПартий Цикл
				
				Знач1В= стрВыигравшего["Игра"+Н];
				Знач2П= стрПроигравшего["Игра"+Н];
				Если Знач1В = 0 И Знач2П = 0 Тогда
					Продолжить;
				КонецЕсли;
				НовСтрока = ВсяТаблицаОбщихДанных.Добавить();
				НовСтрока.РежимТура = РежимТура;
				НовСтрока.НомерТура = Результат.НомерТура;
				НовСтрока.НомерГруппы = Результат.НомерГруппы;
				НовСтрока.НомерСета = Н;
				НовСтрока.Выигравший  = Результат.Выигравший;
				НовСтрока.Проигравший = Результат.Проигравший;
				Если Знач1В > Знач2П Тогда //первый победил
					НовСтрока.КолШаров	   = Знач2П;
					НовСтрока.ОчкиВыигравшего = 1;
					НовСтрока.ОчкиПроигравшего= 0;
				Иначе //второй победил
					НовСтрока.КолШаров	   = -Знач1В;
					НовСтрока.ОчкиВыигравшего = 0;
					НовСтрока.ОчкиПроигравшего= 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		
		ДопПараметрыДляПродвижения = Новый Структура;
		ДопПараметрыДляПродвижения.Вставить("перемВыигравший",Результат.Выигравший);
		ДопПараметрыДляПродвижения.Вставить("перемПроигравший",Результат.Проигравший);
		ДопПараметрыДляПродвижения.Вставить("втНомерИгры",Результат.НомерГруппы);
		ВыполнитьДействияПослеЗаписиИгры(ДопПараметрыДляПродвижения);
		АктивироватьТекущуюИгруВтаблице();
		//теперь очистим игру в таблице столов если она там есть
		ОчиститьТаблицуМониторинга(Результат.НомерГруппы);
		ВывестиАктивностьСтолов();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОбработкаДополнительнойРасшифровкиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	СсылкаИгрок1 = ДополнительныеПараметры.СсылкаИгрок1;
	СсылкаИгрок2 = ДополнительныеПараметры.СсылкаИгрок2;
	
	//заполним варианты для быстрого ввода партий
	ВариантИзСписка = ВыбранныйЭлемент;
	Если ВариантИзСписка <> Неопределено Тогда
		Если ВариантИзСписка.Значение = "ПоменятьС" Тогда
			ПоменятьИгрокаС(Неопределено);	
		Иначе
			Данные = Новый Структура;
			Данные.Вставить("ЗначениеСписка",ВариантИзСписка.Значение);
			Данные.Вставить("СсылкаИгрок1",СсылкаИгрок1);
			Данные.Вставить("СсылкаИгрок2",СсылкаИгрок2);
			ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные)
	
	//разберем значение из списка
	//Y_X, где Y - номер участника, первый или второй по переданному параметру
	//X - количество партий выигранных
	//например: передаем в функция (Иванов, Петров)
	//1_2 Иванов 3:2 Петров
	//Иванов это 1 параметр
	//петров это 2 параметр
	//на выходе получаем, что Петров выиграл у Иванова 2 партии
	ВариантИзСписка	= Данные.ЗначениеСписка;//значение списка значений из контекстного меню
	СсылкаИгрок1			= Данные.СсылкаИгрок1;
	СсылкаИгрок2			= Данные.СсылкаИгрок2;
	
	ЗначениеВыбора 			= ВариантИзСписка;
	НомерПараметра 			= Число(Лев(ЗначениеВыбора,1));
	Если НомерПараметра = 9 Тогда
		Возврат;
	КонецЕсли; 
	КолВыигранныхПартий	= Прав(ЗначениеВыбора,1);
	Если НомерПараметра = 1 Тогда
		перемВыигравший 		= СсылкаИгрок1;
		перемПроигравший	= СсылкаИгрок2;
	Иначе
		перемВыигравший 		= СсылкаИгрок2;
		перемПроигравший	= СсылкаИгрок1;
	КонецЕсли;
	Если КолВыигранныхПартий = "W" Тогда
		ВИтог = КР_ОбщийКлиентСервер.ОпределитьКолПартий(КолПартий);
		ПИтог = 0;
		ВТехническое = Ложь;				
		ПТехническое = Истина;
	Иначе
		ВИтог = КР_ОбщийКлиентСервер.ОпределитьКолПартий(КолПартий);
		ПИтог = КолВыигранныхПартий;
		ВТехническое = Ложь;				
		ПТехническое = Ложь;
	КонецЕсли; 
	
	ЭтотОбъект.Модифицированность = Истина;
	ТЧДока = ВсяТаблицаОбщихДанных;
	//попробуем найти эту пару
	Отбор = Новый Структура;                               
	Отбор.Вставить("Выигравший",перемВыигравший);
	Отбор.Вставить("Проигравший",перемПроигравший);
	Отбор.Вставить("НомерТура",НомерТура);
	Отбор.Вставить("НомерГруппы",НомерИгрыТабДока);
	ИскомыеСтроки = ТЧДока.НайтиСтроки(Отбор);
	Если ИскомыеСтроки.Количество() > 0 Тогда //строки уже есть перезаполняем
		Для Каждого ТекСтрока Из ИскомыеСтроки Цикл
			ТЧДока.Удалить(ТЧДока.Индекс(ТекСтрока));
		КонецЦикла;
	ИначеЕсли ИскомыеСтроки.Количество() = 0 Тогда
		///попробуем другой вариант вдруг выигравший изменился
		Отбор = Новый Структура;                               
		Отбор.Вставить("Выигравший",перемПроигравший);
		Отбор.Вставить("Проигравший",перемВыигравший);
		Отбор.Вставить("НомерТура",НомерТура);
		Отбор.Вставить("НомерГруппы",НомерИгрыТабДока);
		ИскомыеСтроки = ТЧДока.НайтиСтроки(Отбор);
		Если ИскомыеСтроки.Количество() > 0 Тогда //строки уже есть перезаполняем
			Для Каждого ТекСтрока Из ИскомыеСтроки Цикл
				ТЧДока.Удалить(ТЧДока.Индекс(ТекСтрока));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НовСтрока = ТЧДока.Добавить();
	НовСтрока.РежимТура = РежимТура;
	НовСтрока.НомерТура = НомерТура;
	НовСтрока.НомерГруппы = НомерИгрыТабДока;
	НовСтрока.НомерСета = 1;
	НовСтрока.Выигравший  = перемВыигравший;
	НовСтрока.Проигравший = перемПроигравший;
	НовСтрока.КолШаров	   = 0;
	НовСтрока.ОчкиВыигравшего = ВИтог;
	НовСтрока.ОчкиПроигравшего= ПИтог;
	НовСтрока.ТехническоеВ = ВТехническое;
	НовСтрока.ТехническоеП = ПТехническое; 
	
	//ЗаполнитьСводнуюТаблицу();
	ДопПараметрыДляПродвижения = Новый Структура;
	ДопПараметрыДляПродвижения.Вставить("перемВыигравший",перемВыигравший);
	ДопПараметрыДляПродвижения.Вставить("перемПроигравший",перемПроигравший);
	ДопПараметрыДляПродвижения.Вставить("втНомерИгры",НомерИгрыТабДока);
	ВыполнитьДействияПослеЗаписиИгры(ДопПараметрыДляПродвижения);
	АктивироватьТекущуюИгруВтаблице();
	//ОбновитьПараметрыТабличногоДокумента();
	
	//теперь очистим игру в таблице столов если она там есть
	ОчиститьТаблицуМониторинга(НомерИгрыТабДока);
	ВывестиАктивностьСтолов();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПослеЗаписиИгры(ДопПараметры = Неопределено)
	
	Если ДопПараметры <> Неопределено Тогда
		//ПродвинутьУчастниковДальшеПоСетке(ДопПараметры);	
	КонецЕсли; 
	ЗаполнитьСводнуюТаблицу();
	ОбновитьПараметрыТабличногоДокумента();
	ОбновитьТаблицуМониторинга();
	
КонецПроцедуры
 
//процедура обновляет наименования, видимость кнопок в контекстном меню, для быстрого ввода
&НаКлиенте
Функция ОбновитьКМБыстрогоВвода(парУчастник1,парУчастник2)
	
	//ПредставлениеУч1 = СоответствияИгроков.НайтиСтроки(Новый Структура("Участник",парУчастник1))[0].ПредставлениеИгрока;
	//ПредставлениеУч2 = СоответствияИгроков.НайтиСтроки(Новый Структура("Участник",парУчастник2))[0].ПредставлениеИгрока;	
	мСписок = Новый СписокЗначений;
	Пробел10 = "          ";
	МаксимумПартий = КР_ОбщийКлиентСервер.ОпределитьКолПартий(КолПартий);
	//1 вариант
	Для М = 0 По МаксимумПартий-1 Цикл
		мСписок.Добавить("1_"+М,Строка(парУчастник1)+" "+МаксимумПартий+":"+М+" "+Строка(парУчастник2)+Пробел10);
	КонецЦикла;
	мСписок.Добавить("1_W",Строка(парУчастник1)+" W/L "+Строка(парУчастник2)+Пробел10);
	мСписок.Добавить("9"," ");
	//2 вариант
	Для М = 0 По МаксимумПартий-1 Цикл
		мСписок.Добавить("2_"+М,Строка(парУчастник2)+" "+МаксимумПартий+":"+М+" "+Строка(парУчастник1)+Пробел10);
	КонецЦикла; 
	мСписок.Добавить("2_W",Строка(парУчастник2)+" W/L "+Строка(парУчастник1)+Пробел10);
	
	//Возврат ВыбратьИзСписка(мСписок,парЭлемент);
	//мСписок.Добавить("9"," ");
	//мСписок.Добавить("ПоменятьС","Поменять с...");
	Возврат мСписок;
	
КонецФункции

&НаКлиенте
Функция ПоискСсылкиНаИгрокаТаДок(НомерИгры)
	
	Данные = Новый Структура;
	МассивСтрок = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгры));
	Если МассивСтрок.Количество() > 0 Тогда
		Строка = МассивСтрок[0];
		Данные.Вставить("Игрок1",Строка.Выигравший);
		Данные.Вставить("Игрок2",Строка.Проигравший);
		Данные.Вставить("Очки1", Строка.ОчкиВыигравшего);
		Данные.Вставить("Очки2", Строка.ОчкиПроигравшего);
		Данные.Вставить("КолПартий",КолПартий);
		Данные.Вставить("ТехническоеВ",Строка.ТехническоеВ);
		Данные.Вставить("ТехническоеП",Строка.ТехническоеП);
	Иначе
		Данные.Вставить("Игрок1",Неопределено);
		Данные.Вставить("Игрок2",Неопределено);
		Данные.Вставить("ТехническоеВ",Ложь);
		Данные.Вставить("ТехническоеП",Ложь);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Функция ПоискИгроковПоРасшифровкеНомера(НомерИгры,ДляИгрока = Ложь)
	
	//определим кого будем искать выигравшего или проигравшего
	Если ДляИгрока Тогда //в расшифровке было Игрок
		Данные = Новый Структура;
		МассивСтроки = НачальныеИгры.НайтиСтроки(Новый Структура("ЭтапВСхеме",НомерИгры));
		Если МассивСтроки.Количество() > 0 Тогда
			Строка = МассивСтроки[0];
			Данные.Вставить("Игрок1",Строка.Выигравший);
			Данные.Вставить("Игрок2",Строка.Проигравший);
		Иначе
			Данные.Вставить("Игрок1",Неопределено);
			Данные.Вставить("Игрок2",Неопределено);
		КонецЕсли;
		
		Возврат Данные;
	Иначе //ищем участников которые выиграли
		ТекРасшифровка = НомерИгры;
		Если Найти(ТекРасшифровка,"ИграМ") > 0 Тогда
			ИскатьВыиграшего = Ложь;
		Иначе
			ИскатьВыиграшего = Истина;
		КонецЕсли;
		
		//теперь определяем номер игры в которой будем искать имя игрока
		Если ИскатьВыиграшего Тогда
			НомерИгры = СтрЗаменить(ТекРасшифровка,"Игра","");
			МассивСтроки = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",Число(НомерИгры)));
			Если МассивСтроки.Количество() > 0 Тогда
				Возврат МассивСтроки[0].Выигравший;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			НомерИгры = СтрЗаменить(ТекРасшифровка,"ИграМ","");
			МассивСтроки = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",Число(НомерИгры)));
			Если МассивСтроки.Количество() > 0 Тогда
				Возврат МассивСтроки[0].Проигравший;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура ОбновитьПараметрыТабличногоДокумента()
	
	ТабДок.Очистить();
	Макет = Документы.ПроведениеСоревнования.ПолучитьМакет(ИмяМакета);
	//заполним участников из тч Участники по жеребьевке
	ЗаполнитьИгроковВТаблице(Макет);	
	//все данные у нас уже есть, поэтому просто перебираем их
	Результат = ТаблицаОбщихДанных.Выгрузить();
	Если Результат.Количество() > 0 Тогда //проверяем данные
		ЗаполнениеСетки(Макет,Результат);
	КонецЕсли;
	//заголовок
	МакетЗаголовкаИПодвала = Документы.ПроведениеСоревнования.ПолучитьМакет("ТаблицаГрупп");
	ОбластьЗаголовка = Документы.ПроведениеСоревнования.ПолучитьОбластьЗаголовка(СсылкаНаДок.НазваниеСоревнования,КомментТура);
	ТабДок.Вывести(ОбластьЗаголовка);
	ТабДок.Вывести(Макет);
	//подвал
	ОбластьПодвал = МакетЗаголовкаИПодвала.ПолучитьОбласть("Подвал");
	Если ЗначениеЗаполнено(СсылкаНаДок.ГлавныйСудья) Тогда
		ОбластьПодвал.Параметры.глСудья = КР_ОбщийКлиентСервер.СформироватьИмяИгрока(СсылкаНаДок.ГлавныйСудья);
	КонецЕсли;
	Если ЗначениеЗаполнено(СсылкаНаДок.Секретарь) Тогда
		ОбластьПодвал.Параметры.Секретарь = КР_ОбщийКлиентСервер.СформироватьИмяИгрока(СсылкаНаДок.Секретарь);
	КонецЕсли;
	ТабДок.Вывести(ОбластьПодвал);
	//выведем в список игр количество
	ЗаполнитьЗаголовокСпискаИгр();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводнуюТаблицу()
	
	ТаблицаОбщихДанных.Очистить();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ втТЗ ИЗ &Внеш КАК Внеш ";
	Запрос.УстановитьПараметр("Внеш",ВсяТаблицаОбщихДанных.Выгрузить());
	Запрос.Выполнить();
	Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Выигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Проигравший,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанных.ОчкиВыигравшего) КАК ОчкиВыигравшего,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанных.ОчкиПроигравшего) КАК ОчкиПроигравшего,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеП
	|ПОМЕСТИТЬ втДанныеТаблицы
	|ИЗ
	|	втТЗ КАК ПроведениеСоревнованияОбщаяТаблицаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Выигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Проигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТаблицы.НомерТура,
	|	втДанныеТаблицы.НомерГруппы КАК НомерГруппы,
	|	втДанныеТаблицы.Выигравший,
	|	втДанныеТаблицы.Проигравший,
	|	СУММА(втДанныеТаблицы.ОчкиВыигравшего) КАК ОчкиВыигравшего,
	|	СУММА(втДанныеТаблицы.ОчкиПроигравшего) КАК ОчкиПроигравшего,
	|	втДанныеТаблицы.ТехническоеВ,
	|	втДанныеТаблицы.ТехническоеП
	|ИЗ
	|	втДанныеТаблицы КАК втДанныеТаблицы
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеТаблицы.НомерТура,
	|	втДанныеТаблицы.НомерГруппы,
	|	втДанныеТаблицы.Выигравший,
	|	втДанныеТаблицы.Проигравший,
	|	втДанныеТаблицы.ТехническоеВ,
	|	втДанныеТаблицы.ТехническоеП
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппы";
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(Результат,"ТаблицаОбщихДанных");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовокСпискаИгр()
	
	Текст = "";
	втТекст = "";
	
	ВсегоИгр = СоответствияИгр.Количество();
	мСводнаяТаблица = ПолучитьСводнуюТаблицаИзОбщей();
	
	Сыграно = мСводнаяТаблица.Количество();
	Остаток = ВсегоИгр - Сыграно;
	Текст = "Всего: " + ВсегоИгр + "   Сыграно: " + Сыграно + "   Осталось: " + Остаток;
	Если КолПартий = 3 Тогда
		мВремя = 17*60; //17 минут
	ИначеЕсли КолПартий = 5 Тогда
		мВремя = 27*60;//27 минут
	ИначеЕсли КолПартий = 7 Тогда
		мВремя = 35*60;//35 минут
	КонецЕсли; 
	Если Остаток <> 0 И КолСтолов <> 0 Тогда
		мИгр = Цел(Остаток / КолСтолов);
		мОстатокИгр = Остаток - мИгр * КолСтолов;
		ОбщееВремя = мИгр * мВремя + мОстатокИгр * мВремя;
		втТекст = Символ(8776) + " " + КР_ОбщийКлиентСервер.ОбработатьСекундыНаВремя(ОбщееВремя);
		втДата = КР_СерверныеСервер.ДатаСеанса();
		втДата = Формат(втДата + ОбщееВремя, "ДЛФ=DT");
		втТекст = втТекст + ", " + Символ(8776) + " дата окончания: " + втДата;
		Текст = Текст + " " + втТекст;
	КонецЕсли;
	ЗаголовокКоличества = Текст;
	//Элементы.ЗаголовокКоличества.Заголовок = Текст;
	      
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеСетки(Область,Таблица)
		
	Для Каждого ТекЗначение Из Таблица Цикл
		СтрОчковВыигравшего = "";
		Если глВыводПоОчкам Тогда
			//по номеру найдем все очки
			Отбор = Новый Структура("НомерГруппы",ТекЗначение.НомерГруппы);
			МассивОчковПары = ВсяТаблицаОбщихДанных.НайтиСтроки(Отбор);
			Если МассивОчковПары.Количество() > 1 Тогда //есть какие то очки
				Для каждого ТекЗнач Из МассивОчковПары Цикл
					СтрОчковВыигравшего = СтрОчковВыигравшего + ТекЗнач.КолШаров+";";		
				КонецЦикла; 
				СтрОчковВыигравшего = "("+Лев(СтрОчковВыигравшего,СтрДлина(СтрОчковВыигравшего)-1)+") ";
			ИначеЕсли МассивОчковПары.Количество() = 1 Тогда //или техническое, или по итогам
				
			КонецЕсли; 
		КонецЕсли; 
        //для проигравшего записываются только партии
		
		//сначала определим куда записать выигравшего
		ПредставлениеВыигравшего = СоответствияИгроков.НайтиСтроки(Новый Структура("Участник",ТекЗначение.Выигравший));
		Если ПредставлениеВыигравшего.Количество() > 0 Тогда
			ПредставлениеИгрока = ПредставлениеВыигравшего[0].ПредставлениеИгрока;
		Иначе
			ПредставлениеИгрока= Строка(ТекЗначение.Выигравший);
		КонецЕсли;
		Если ТекЗначение.ТехническоеП Тогда
			Если ЗначениеЗаполнено(ТекЗначение.Выигравший) И ЗначениеЗаполнено(ТекЗначение.Проигравший) Тогда
				ПредставлениеИгрока	= ПредставлениеИгрока + " W/L";
			Иначе	
				ПредставлениеИгрока = ПредставлениеИгрока;// + " (Техн.)";				
			КонецЕсли; 
		Иначе
			ПредставлениеИгрока = ПредставлениеИгрока + " "+Строка(ТекЗначение.ОчкиВыигравшего)+":"+ Строка(ТекЗначение.ОчкиПроигравшего);
		КонецЕсли;
		Если СтрОчковВыигравшего <> ""Тогда
			ПредставлениеИгрока = ПредставлениеИгрока+СтрОчковВыигравшего;
		КонецЕсли; 
		
		ПредставлениеИгрока = ПредставлениеИгрока + ДобавитьРассчитанныйРейтинг(ТекЗначение.НомерГруппы,ТекЗначение.Выигравший);
		
		Область.Параметры["Игра"+ТекЗначение.НомерГруппы] = ПредставлениеИгрока;
		
		ДанныеРасшифровки = СоответствияИгр.НайтиСтроки(Новый Структура("Игра",ТекЗначение.НомерГруппы))[0].Расшифровка;
		Область.Параметры["РИгра"+ТекЗначение.НомерГруппы] = ДанныеРасшифровки;
		//теперь проигравшего                                                                                              
		ПредставлениеПроигравшего = СоответствияИгроков.НайтиСтроки(Новый Структура("Участник",ТекЗначение.Проигравший));
		Если ПредставлениеПроигравшего.Количество() > 0 Тогда
			ПредставлениеИгрока = ПредставлениеПроигравшего[0].ПредставлениеИгрока;
		Иначе
			Если ТекЗначение.ТехническоеП И ТекЗначение.Проигравший = Справочники.Участники.ПустаяСсылка() Тогда
		//	ПредставлениеИгрока= "ХХХ";
				ПредставлениеИгрока= Строка(ТекЗначение.Проигравший);
			Иначе
				ПредставлениеИгрока= Строка(ТекЗначение.Проигравший);
			КонецЕсли; 
		КонецЕсли;
		
		Если РежимТура <> Перечисления.РежимыТуровСоревнования.Олимпийка Тогда
			Если Не ЗначениеЗаполнено(ПредставлениеИгрока) Тогда
				//просто заполним данные расшифровки 
				Область.Параметры["РИграМ"+ТекЗначение.НомерГруппы] = ДанныеРасшифровки;
				Продолжить;
			КонецЕсли;
			
			Если ТекЗначение.ТехническоеП Тогда
				Если ЗначениеЗаполнено(ТекЗначение.Выигравший) И ЗначениеЗаполнено(ТекЗначение.Проигравший) Тогда
					ПредставлениеИгрока	= ПредставлениеИгрока + " L/W";
				Иначе	
					ПредставлениеИгрока = ПредставлениеИгрока;// + " (Техн.)";
				КонецЕсли;
			Иначе
				ПредставлениеИгрока = ПредставлениеИгрока + " "+Строка(ТекЗначение.ОчкиПроигравшего)+":"+ Строка(ТекЗначение.ОчкиВыигравшего);
			КонецЕсли;
			
			ПредставлениеИгрока = ПредставлениеИгрока + ДобавитьРассчитанныйРейтинг(ТекЗначение.НомерГруппы,ТекЗначение.Проигравший);
			
			Область.Параметры["ИграМ"+ТекЗначение.НомерГруппы] = ПредставлениеИгрока;
			Область.Параметры["РИграМ"+ТекЗначение.НомерГруппы] = ДанныеРасшифровки;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьНеопределенныеРасшифровки(Область);
	
КонецПроцедуры

//проверяет если это игра за место и рейтинг был рассчитан, 
//и включен вывод рейтинга тогда добавляет рассчитанный рейтинг
&НаСервере
Функция ДобавитьРассчитанныйРейтинг(парНомерИгры,Участник)
	
	Если ТаблицаМестИгр.Количество() > 0 Тогда
		Если СсылкаНаДок.Проведен Тогда //значит рейтинг рассчитан уже
			 //проверяем место
			 ИскомыйНомер = ТаблицаМестИгр.НайтиСтроки(Новый Структура("НомерИгры",парНомерИгры));
			 Если ИскомыйНомер.Количество() > 0 Тогда
				 //ищем рейтинг участника по этому соревнованию
				 Запрос = Новый Запрос;
				 Запрос.Текст = "ВЫБРАТЬ
				 |	РейтингУчастников.Участник,
				 |	РейтингУчастников.Рейтинг
				 |ИЗ
				 |	РегистрСведений.РейтингУчастников КАК РейтингУчастников
				 |ГДЕ
				 |	РейтингУчастников.Регистратор = &СсылкаНаДок
				 |	И РейтингУчастников.Участник = &Участник";
				 Запрос.УстановитьПараметр("СсылкаНаДок",СсылкаНаДок.Ссылка);
				 Запрос.УстановитьПараметр("Участник",Участник);
				 //рейтинг ищем по регистратору
				 Результат = Запрос.Выполнить().Выгрузить();
				 Если Результат.Количество() > 0 Тогда
					 Возврат " ("+Результат[0].Рейтинг+")";
				 Иначе
					 Возврат "";
				 КонецЕсли;
			 Иначе
				 Возврат ""; //игра не за место
			 КонецЕсли;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура АктивироватьТекущуюИгруВтаблице()
	//процедура вызывается всегда ДО обнуления номера игры
	//ищем в сводной только что добавленую игру
	//МассивИгры = ТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгрыТабДока));
	//Если МассивИгры.Количество() > 0 Тогда
	//	Элементы.ТаблицаОбщихДанных.ТекущаяСтрока = МассивИгры[0].ПолучитьИдентификатор();
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗакрыть(Команда)
	//Если ЭтотОбъект.Модифицированность Тогда
	//	Ответ = Вопрос("Данные НЕ БУДУТ СОХРАНЕНЫ. Закрыть форму?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		ЭтотОбъект.Закрыть();
	//	КонецЕсли;
	//Иначе
		ЭтотОбъект.Закрыть();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьСписокИгр(Команда)
	Если Элементы.Группа7.Видимость Тогда
		Элементы.Группа7.Видимость = Ложь;
		Элементы.ВызватьНаСтол.Видимость = Ложь;
		Элементы.АктивностьСтолов.Видимость = Ложь;
	Иначе
		Элементы.Группа7.Видимость = Истина;
		Элементы.ВызватьНаСтол.Видимость = Истина;
		Элементы.АктивностьСтолов.Видимость = Истина;
		//ЗаполнитьМониторингИгр();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВызватьНаСтол(Команда)
	
	//ТекСтрокаСтола = Элементы.ТаблицаСтолов.ТекущиеДанные;
	//Если ТекСтрокаСтола = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	////стол уже может быть занят проверим
	//Если ТекСтрокаСтола.НомерИгры <> 0 Тогда
	//	//проверим, а есть ли свободные столы
	//	ЕстьСвободные = Ложь;
	//	Для каждого ТекСтол Из ТаблицаСтолов Цикл
	//		Если ТекСтол.НомерИгры = 0 Тогда
	//			ЕстьСвободные = Истина;
	//			Прервать;
	//		КонецЕсли; 
	//	КонецЦикла;
	//	Если ЕстьСвободные Тогда
	//		ТекСтрокаСтола = ТекСтол;
	//	Иначе
	//		ПоказатьОповещениеПользователя("Ошибка",,"На столе уже играют!",БиблиотекаКартинок.Информация);
	//		Возврат;
	//	КонецЕсли; 
	//КонецЕсли;
	
	//теперь проверим есть ли эта игра уже в общей таблице
	МассивИгр = ВсяТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгрыТабДока));
	Если МассивИгр.Количество() > 0 Тогда //игра уже есть вызывать не нужно
		Возврат;
	КонецЕсли;
	////и есть ли эта игра уже в списке столов
	//МассивИгр = ТаблицаСтолов.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
	//Если МассивИгр.Количество() > 0 Тогда //игра уже есть вызывать не нужно
	//	Возврат;
	//КонецЕсли;
	СписокСвободныхСтолов = Новый СписокЗначений;
	Для М = 1 По КолСтолов Цикл
		СписокСвободныхСтолов.Добавить(М,,,БиблиотекаКартинок.СтолПоНастольномуТеннису);
	КонецЦикла;
	//посмотрим какие столы заняты
	Для каждого ТекСтр Из ТаблицаМониторинга Цикл 
		Если ТекСтр.НомерСтола = 0 Тогда
			Продолжить;
		КонецЕсли; 
		Искомый = СписокСвободныхСтолов.НайтиПоЗначению(ТекСтр.НомерСтола);
		Если Искомый <> Неопределено Тогда
			СписокСвободныхСтолов.Удалить(Искомый);	
		КонецЕсли; 
	КонецЦикла; 
	Если СписокСвободныхСтолов.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Нет свободных столов!");
		Возврат;
	КонецЕсли;

	СписокСвободныхСтолов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВызватьНаСтолЗавершение", ЭтотОбъект),
		"Какой стол?"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьНаСтолЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранныйСтол = ВыбранныйЭлемент;
	Если ВыбранныйСтол <> Неопределено Тогда
		ИскомаяИгра = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
		Если ИскомаяИгра.Количество() > 0 Тогда
			ИскомаяИгра[0].НомерСтола = ВыбранныйСтол.Значение;
			ИскомаяИгра[0].ВремяВызова = КР_СерверныеСервер.ДатаСеанса();
			ВывестиАктивностьСтолов();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьВремяВызоваПоСтрокам()
	
	Для каждого ТекСтол Из ТаблицаМониторинга Цикл РассчитатьСтрокуСоВременем(ТекСтол); КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтрокуСоВременем(ТекСтрокаСтола)
	
	Если ТекСтрокаСтола.ВремяВызова <> Дата('00010101') Тогда
		ТекСтрокаСтола.ПрошлоСекунд = ТекСтрокаСтола.ПрошлоСекунд + 1;
		ТекСтрокаСтола.СколькоВремениПрошло = КР_ОбщийКлиентСервер.ОбработатьСекундыНаВремя(ТекСтрокаСтола.ПрошлоСекунд);
		МассивПроверенныхОбластей = Новый Массив;
		ИскатьЯчеку = Истина;
		//раскрасим область
		Пока ИскатьЯчеку Цикл
			Если МассивПроверенныхОбластей.Количество() = 0 Тогда
				ИскомаяОбласть = ТабДок.НайтиТекст(ТекСтрокаСтола.НомерИгры,,,,Истина,,Истина);
			Иначе
				ИскомаяОбласть = ТабДок.НайтиТекст(ТекСтрокаСтола.НомерИгры,МассивПроверенныхОбластей[МассивПроверенныхОбластей.Количество()-1],,,Истина,,Истина);
			КонецЕсли; 
			//НайтиТекст(<Строка>, <Начало>, <Где>, <ИскатьПоСтрокам>, <ЯчейкаЦеликом>, <ИскатьВперед>, <ИгнорироватьРегистр>) 
			//это может быть как номер участника, так и номер игры
			//сместимся вправо на одну ячейку и если там пусто тогда это наша
			Если ИскомаяОбласть <> Неопределено Тогда
				мИмяОбласти = ИскомаяОбласть.Имя;
				НомКолонка = Найти(мИмяОбласти,"C");
				ИмяСледОбластиВправо = Лев(мИмяОбласти,НомКолонка-1);
				ЗначКолонки = Число(Сред(мИмяОбласти,НомКолонка+1,СтрДлина(мИмяОбласти)))+1;
				ИмяСледОбластиВправо = ИмяСледОбластиВправо +"C"+ЗначКолонки; 
				
				СледОбласть = ТабДок.Область(ИмяСледОбластиВправо); 
				ТекстСледОбласти = СледОбласть.Текст;
				Если ТекстСледОбласти = "" Тогда
					СледОбласть.ЦветФона = WebЦвета.БледноЗеленый;
					//ТабДок.ТекущаяОбласть = ТабДок.Область(ИскомаяОбласть.Имя);
					ИскатьЯчеку = Ложь;
				Иначе
					МассивПроверенныхОбластей.Добавить(СледОбласть);
				КонецЕсли; 	
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Если ТаблицаСтолов.Количество() > 0 Тогда
	мЗакрытиеФормы = Истина;
	ПодключитьОбработчикОжидания("ПосчитатьВремяВызоваПоСтрокам",1);
	//КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьИгрокаС(Команда)
	
	ТекТекст = Элементы.ТабДок.ТекущаяОбласть.Текст;
	Если ТекТекст = "" Тогда
		Возврат;
	КонецЕсли; 
	МассивСтроки = СоответствияИгроков.НайтиСтроки(Новый Структура("ПредставлениеВСетке",ТекТекст));
	Если МассивСтроки.Количество() > 0 Тогда
		ТекУчастник = МассивСтроки[0].Участник;
	Иначе
		МассивСтроки = СоответствияИгроков.НайтиСтроки(Новый Структура("ПредставлениеИгрока",ТекТекст));
		Если МассивСтроки.Количество() > 0 Тогда
			ТекУчастник = МассивСтроки[0].Участник;
		Иначе 
			ТекУчастник = ПредопределенноеЗначение("Справочник.Участники.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли; 
	СписокУчастниковПоНомеру = ПолучитьСписокУчастниковСНомеромИгры(ТекУчастник);
	Если ТипЗнч(СписокУчастниковПоНомеру) = Тип("Строка") Тогда
		ПоказатьПредупреждение(Неопределено, СписокУчастниковПоНомеру);
		Возврат;
	КонецЕсли; 
	СписокУчастниковПоНомеру.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПослеВыбораЗамены",ЭтотОбъект,ТекУчастник),"Выберите замену...");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЗамены(ВыбранноеЗначение,ДопПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДанныеДляОбработки = Новый Структура;
		ДанныеДляОбработки.Вставить("РежимТура",РежимТура);
		ДанныеДляОбработки.Вставить("НомерТура",НомерТура);
		ДанныеДляОбработки.Вставить("НомерДляЗамены",ВыбранноеЗначение.Значение);
		ДанныеДляОбработки.Вставить("УчастникЗамены",ДопПараметры);
		ОповеститьОВыборе(ДанныеДляОбработки);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьСписокУчастниковСНомеромИгры(ТекУчастник)
	
	//проверим таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ втВсеДанные ИЗ &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",ТаблицаОбщихДанных.Выгрузить());
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ
	|	втВсеДанные.НомерГруппы,
	|	втВсеДанные.ТехническоеВ,
	|	втВсеДанные.ТехническоеП
	|ИЗ
	|	втВсеДанные КАК втВсеДанные
	|ГДЕ
	|	втВсеДанные.ТехническоеВ = ЛОЖЬ
	|			И втВсеДанные.ТехническоеП = ЛОЖЬ";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Возврат "Нельзя перемещать игроков, когда уже есть сыгранные игры";
	КонецЕсли; 
	
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ Из &Внеш КАК Внеш";
	Запрос.УстановитьПараметр("Внеш",СсылкаНаДок.УчастникиПоЖеребьевке.Выгрузить());
	Запрос.Выполнить();	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.НомерИгры,
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.Участник
	|ИЗ
	|	ТЗ КАК ПроведениеСоревнованияУчастникиПоЖеребьевке
	|ГДЕ
	|	ПроведениеСоревнованияУчастникиПоЖеребьевке.НомерГруппы = 0
	|	И ПроведениеСоревнованияУчастникиПоЖеребьевке.РежимТура = &Режим
	|	И ПроведениеСоревнованияУчастникиПоЖеребьевке.НомерТура = &НомерТура
	|	И ПроведениеСоревнованияУчастникиПоЖеребьевке.Участник <> &Участник";
	Запрос.УстановитьПараметр("Режим",РежимТура);
	Запрос.УстановитьПараметр("НомерТура",НомерТура);
	Запрос.УстановитьПараметр("Участник",ТекУчастник);
	Игроки = Запрос.Выполнить().Выгрузить();
	втСписокСНомерами = Новый СписокЗначений;
	Для каждого ТекСтр Из Игроки Цикл
		втСписокСНомерами .Добавить(ТекСтр.НомерИгры,""+ТекСтр.НомерИгры+" "+ТекСтр.Участник);
	КонецЦикла; 
	
	Возврат втСписокСНомерами;
	
КонецФункции

&НаСервере
Процедура ОчиститьТаблицуМониторинга(мНомерТабДока)
	
	//теперь очистим игру в таблице столов если она там есть
	МассивСтрокВТаблицеСтолов = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
	Если МассивСтрокВТаблицеСтолов.Количество() > 0 Тогда
		//освобождаем стол
		СтрокаТаблицы = МассивСтрокВТаблицеСтолов[0];
		//СтрокаТаблицы.Участник1 = Неопределено;
		//СтрокаТаблицы.Участник2 = Неопределено;
		//СтрокаТаблицы.НомерИгры = 0;
		СтрокаТаблицы.НомерСтола = 0;
		СтрокаТаблицы.ВремяВызова = Дата('00010101');
		СтрокаТаблицы.ПрошлоСекунд = 0;
		СтрокаТаблицы.СколькоВремениПрошло = "";
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура КомандаУбратьСоСтола(Команда)
	СтрокаТаблицы = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		//СтрокаТаблицы.Участник1 = Неопределено;
		//СтрокаТаблицы.Участник2 = Неопределено;
		//СтрокаТаблицы.НомерИгры = 0;
		СтрокаТаблицы.НомерСтола = 0;
		СтрокаТаблицы.ВремяВызова = Дата('00010101');
		СтрокаТаблицы.ПрошлоСекунд = 0;
		СтрокаТаблицы.СколькоВремениПрошло = "";
		НомерИгрыТабДока = СтрокаТаблицы.НомерИгры;
	КонецЕсли; 
КонецПроцедуры

//------------------------------МОНИТОРИНГ--------------------------------
&НаСервере
Процедура ЗаполнитьМониторингИгр()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПорядокИгр.ПриоритетВызова,
	|	ПорядокИгр.НомерИгры
	|ИЗ
	|	РегистрСведений.ПорядокИгр КАК ПорядокИгр
	|ГДЕ
	|	ПорядокИгр.РежимТура = &РежимТура
	|	И ПорядокИгр.КоличествоУчастников = &КоличествоУчастников";
	Запрос.УстановитьПараметр("РежимТура",РежимТура);
	Запрос.УстановитьПараметр("КоличествоУчастников",НумерацияИгроков);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаМониторинга.Очистить();
	Если Результат.Количество() > 0 Тогда
		Для каждого ТекСтр Из Результат Цикл
			НовСтрока = ТаблицаМониторинга.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтр);
		КонецЦикла;
	Иначе
		ВсегоИгр = СоответствияИгр.Количество();
		Для Н = 1 По ВсегоИгр Цикл
			НовСтрока = ТаблицаМониторинга.Добавить();
			НовСтрока.НомерИгры = Н;
		КонецЦикла; 	
	КонецЕсли; 
	
	ОбновитьТаблицуМониторинга();
	
	ВывестиАктивностьСтолов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуМониторинга()
	
	//очистим все значения кроме, номера игры и приоритета вызова
	Для каждого ТекСтр Из ТаблицаМониторинга Цикл
		Если ТекСтр.ВремяВызова <> Дата('00010101') Тогда
			Продолжить;	
		КонецЕсли; 		
		ТекСтр.Очки1										= 0;
		ТекСтр.Очки2										= 0;
		ТекСтр.ТехническоеВ						= Ложь;
		ТекСтр.ТехническоеП						= Ложь;
		ТекСтр.НомерСтола							= 0;
		ТекСтр.ВремяВызова						= Дата('00010101');
		ТекСтр.ПрошлоСекунд						= 0;
		ТекСтр.СколькоВремениПрошло	= "";
		ТекСтр.Участник1								= Справочники.Участники.ПустаяСсылка();
		ТекСтр.Участник2								= Справочники.Участники.ПустаяСсылка();
	КонецЦикла; 
	
	//НачальныеИгры сначала отсюда ставим игры
	Для каждого ТекСтр Из НачальныеИгры Цикл
		ИскомыйНомер = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",ТекСтр.ЭтапВСхеме));
		Если ИскомыйНомер.Количество() > 0 Тогда
			СтрокаМониторинга = ИскомыйНомер[0];
			СтрокаМониторинга.Участник1 = ТекСтр.Выигравший;
			СтрокаМониторинга.Участник2 = ТекСтр.Проигравший;
		КонецЕсли; 
	КонецЦикла; 
	
	//потом заполняем отсюда, для начальных игр будет заполнен счет
	//ВсяТаблицаОбщихДанных
	мСводнаяТаблица = ПолучитьСводнуюТаблицаИзОбщей();
	//сначала заполним мониторинг
	Для каждого СтрокаСводной Из мСводнаяТаблица Цикл
		ИскомыйНомер = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",СтрокаСводной.НомерИгры));
		Если ИскомыйНомер.Количество() > 0 Тогда
			СтрокаМониторинга = ИскомыйНомер[0];
			ЗаполнитьЗначенияСвойств(СтрокаМониторинга,СтрокаСводной);
		КонецЕсли;
	КонецЦикла;
	//придется 2-мя циклами
	//а теперь проставим участников, кто одиночки
	//т.е. раскидаем уже сыгранные игры на другие номера игр
	Для каждого СтрокаСводной Из мСводнаяТаблица Цикл
		//а теперь следующую игру
		//Если СтрокаСводной.ТехническоеВ Или СтрокаСводной.ТехническоеП Тогда
		//это техническое значит участник будет в поле участник1
		//парВыигравший 	= СтрокаСводной.Участник1;
		//парПроигравший	= СтрокаСводной.Участник2;
		//ТекРасшифровкаВыигравш = "Игра"+СтрокаСводной.НомерИгры;
		//ТекРасшифровкаПроигравш = "ИграМ"+СтрокаСводной.НомерИгры; //все равно он будет пустой
		//Иначе
		парВыигравший 	= СтрокаСводной.Участник1;
		парПроигравший	= СтрокаСводной.Участник2;
		ТекРасшифровкаВыигравш 		 = "Игра"+СтрокаСводной.НомерИгры;
		ТекРасшифровкаПроигравш		 = "ИграМ"+СтрокаСводной.НомерИгры;
		
		СледИграВыигравшего 	= НайтиНомерИгрыПоРасшифровке(ТекРасшифровкаВыигравш);
		СледИграПроигравшего 	= НайтиНомерИгрыПоРасшифровке(ТекРасшифровкаПроигравш);
		//теперь ищем эти игры в мониторинге и ставим участников в не заполненное место
		ИскомыйНомер = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",СледИграВыигравшего));
		Если ИскомыйНомер.Количество() > 0 Тогда
			СтрокаМониторингаВыигравшего = ИскомыйНомер[0];
			Если ЗначениеЗаполнено(СтрокаМониторингаВыигравшего.Очки1) или
				ЗначениеЗаполнено(СтрокаМониторингаВыигравшего.Очки2) Или
				СтрокаМониторингаВыигравшего.ТехническоеВ Или 
				СтрокаМониторингаВыигравшего.ТехническоеП Тогда
				//ничего ни делаем эта игра следующая уже сыграна
			Иначе	
				Если Не ЗначениеЗаполнено(СтрокаМониторингаВыигравшего.Участник1) Тогда
					СтрокаМониторингаВыигравшего.Участник1 = парВыигравший;	
				Иначе
					СтрокаМониторингаВыигравшего.Участник2	 = парВыигравший;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;	
		ИскомыйНомер = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",СледИграПроигравшего));
		Если ИскомыйНомер.Количество() > 0 Тогда
			СтрокаМониторингаПроигравшего = ИскомыйНомер[0];
			Если ЗначениеЗаполнено(СтрокаМониторингаПроигравшего.Очки1) или
				ЗначениеЗаполнено(СтрокаМониторингаПроигравшего.Очки2) Или
				СтрокаМониторингаПроигравшего.ТехническоеВ Или 
				СтрокаМониторингаПроигравшего.ТехническоеП Тогда
				//ничего ни делаем эта игра следующая уже сыграна
			Иначе	
				Если Не ЗначениеЗаполнено(СтрокаМониторингаПроигравшего.Участник1) Тогда
					СтрокаМониторингаПроигравшего.Участник1 = парПроигравший;	
				Иначе
					СтрокаМониторингаПроигравшего.Участник2 = парПроигравший;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла; 
	//обновим рейтинг
	Для каждого ТекСтрМониторинга Из ТаблицаМониторинга Цикл
		Если ЗначениеЗаполнено(ТекСтрМониторинга.Участник1) Тогда
			СтрокиСРейтингом1 = СсылкаНаДок.СписокУчастников.НайтиСтроки(Новый Структура("Участник",ТекСтрМониторинга.Участник1));
			Если СтрокиСРейтингом1.Количество() > 0 Тогда
				ТекСтрМониторинга.Рейтинг1 =СтрокиСРейтингом1[0].ТекущийРейтинг;			
			КонецЕсли; 
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекСтрМониторинга.Участник2) Тогда
			СтрокиСРейтингом2 = СсылкаНаДок.СписокУчастников.НайтиСтроки(Новый Структура("Участник",ТекСтрМониторинга.Участник2));
			Если СтрокиСРейтингом2.Количество() > 0 Тогда
				ТекСтрМониторинга.Рейтинг2 =СтрокиСРейтингом2[0].ТекущийРейтинг;			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСводнуюТаблицаИзОбщей()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ втТЗ ИЗ &Внеш КАК Внеш ";
	Запрос.УстановитьПараметр("Внеш",ВсяТаблицаОбщихДанных.Выгрузить());
	Запрос.Выполнить();
	Текст = "ВЫБРАТЬ
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Выигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Проигравший,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанных.ОчкиВыигравшего) КАК ОчкиВыигравшего,
	|	СУММА(ПроведениеСоревнованияОбщаяТаблицаДанных.ОчкиПроигравшего) КАК ОчкиПроигравшего,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеП
	|ПОМЕСТИТЬ втДанныеТаблицы
	|ИЗ
	|	втТЗ КАК ПроведениеСоревнованияОбщаяТаблицаДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерТура,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерГруппы,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.НомерСета,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Выигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.Проигравший,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеВ,
	|	ПроведениеСоревнованияОбщаяТаблицаДанных.ТехническоеП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеТаблицы.НомерТура,
	|	втДанныеТаблицы.НомерГруппы КАК НомерИгры,
	|	втДанныеТаблицы.Выигравший КАК Участник1,
	|	втДанныеТаблицы.Проигравший КАК Участник2,
	|	СУММА(втДанныеТаблицы.ОчкиВыигравшего) КАК Очки1,
	|	СУММА(втДанныеТаблицы.ОчкиПроигравшего) КАК Очки2,
	|	втДанныеТаблицы.ТехническоеВ,
	|	втДанныеТаблицы.ТехническоеП
	|ИЗ
	|	втДанныеТаблицы КАК втДанныеТаблицы
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеТаблицы.НомерТура,
	|	втДанныеТаблицы.НомерГруппы,
	|	втДанныеТаблицы.Выигравший,
	|	втДанныеТаблицы.Проигравший,
	|	втДанныеТаблицы.ТехническоеВ,
	|	втДанныеТаблицы.ТехническоеП
	|
	|УПОРЯДОЧИТЬ ПО
	|	втДанныеТаблицы.НомерГруппы";
	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции
 
&НаСервере
Функция НайтиНомерИгрыПоРасшифровке(мРасшифровка)
	
	парИгра = Неопределено;
	Для каждого ТекИгра Из СоответствияИгр Цикл
		Если Найти(ТекИгра.Расшифровка,мРасшифровка) > 0 Тогда
			парИгра	= ТекИгра.Игра;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат парИгра;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаМониторингаУчастник1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) И ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			ДанныеВыбора = ОбновитьКМБыстрогоВвода(ТекСтрока.Участник1,ТекСтрока.Участник2);
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаУчастник2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекСтрока.Участник1) И ЗначениеЗаполнено(ТекСтрока.Участник2) Тогда
			ДанныеВыбора = ОбновитьКМБыстрогоВвода(ТекСтрока.Участник2,ТекСтрока.Участник1);
		КонецЕсли;			
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаУчастник1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Данные = Новый Структура;
		Данные.Вставить("ЗначениеСписка",ВыбранноеЗначение);
		Данные.Вставить("СсылкаИгрок1",ТекСтрока.Участник1);
		Данные.Вставить("СсылкаИгрок2",ТекСтрока.Участник2);
		ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные);
		Если ТекСтрока.НомерСтола <> 0 Тогда
			ДанныеДляВстреч = Новый Структура;
			ДанныеДляВстреч.Вставить("ИДФормы",Строка(ЭтотОбъект.УникальныйИдентификатор));
			ДанныеДляВстреч.Вставить("НомерСтола", ТекСтрока.НомерСтола);
			КР_КлиентскиеКлиент.ОбработатьВызовЗаСтолТекущиеИгры(ДанныеДляВстреч,Истина);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаУчастник2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Данные = Новый Структура;
		Данные.Вставить("ЗначениеСписка",ВыбранноеЗначение);
		Данные.Вставить("СсылкаИгрок1",ТекСтрока.Участник2);
		Данные.Вставить("СсылкаИгрок2",ТекСтрока.Участник1);
		ОбработкаВыбораЗначенияИзКонтекстногоМеню(Данные);
		Если ТекСтрока.НомерСтола <> 0 Тогда
			ДанныеДляВстреч = Новый Структура;
			ДанныеДляВстреч.Вставить("ИДФормы",Строка(ЭтотОбъект.УникальныйИдентификатор));
			ДанныеДляВстреч.Вставить("НомерСтола", ТекСтрока.НомерСтола);
			КР_КлиентскиеКлиент.ОбработатьВызовЗаСтолТекущиеИгры(ДанныеДляВстреч,Истина);
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМониторингаНомерСтолаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивИгр = ВсяТаблицаОбщихДанных.НайтиСтроки(Новый Структура("НомерГруппы",НомерИгрыТабДока));
	Если МассивИгр.Количество() > 0 Тогда //игра уже есть вызывать не нужно
		Возврат;
	КонецЕсли;
	ТекСтрокаМониторинга = Элементы.ТаблицаМониторинга.ТекущиеДанные;
	Если ТекСтрокаМониторинга = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	Если ТекСтрокаМониторинга.Очки1 > 0 Или ТекСтрокаМониторинга.Очки2 > 0 Тогда
		Возврат;
	КонецЕсли; 
	
	//проверим по каждому участнику не вызван ли он уже
	Проверка1_1 = ПроверитьУчастникаНаВызовПоМониторингу(ТаблицаМониторинга.НайтиСтроки(Новый Структура("Участник1",ТекСтрокаМониторинга.Участник1)));
	Проверка1_2 = ПроверитьУчастникаНаВызовПоМониторингу(ТаблицаМониторинга.НайтиСтроки(Новый Структура("Участник2",ТекСтрокаМониторинга.Участник1)));
	
	Проверка2_1 = ПроверитьУчастникаНаВызовПоМониторингу(ТаблицаМониторинга.НайтиСтроки(Новый Структура("Участник2",ТекСтрокаМониторинга.Участник2)));
	Проверка2_2 = ПроверитьУчастникаНаВызовПоМониторингу(ТаблицаМониторинга.НайтиСтроки(Новый Структура("Участник2",ТекСтрокаМониторинга.Участник2)));
	
	Если Проверка1_1 Или Проверка1_2 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = ЭтотОбъект.УникальныйИдентификатор;
		Сообщение.Текст = "Участник "+ТекСтрокаМониторинга.Участник1 + " уже вызыван за стол !";
		Сообщение.Сообщить(); 
	КонецЕсли; 
	Если Проверка2_1 Или Проверка2_2 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = ЭтотОбъект.УникальныйИдентификатор;
		Сообщение.Текст = "Участник "+ТекСтрокаМониторинга.Участник2 + " уже вызыван за стол !";
		Сообщение.Сообщить(); 
	КонецЕсли; 
	
	//только когда все проверки в ЛОЖЬ, тогда можно взывать за стол
	Если Проверка1_1 = Ложь И Проверка1_2 = Ложь 
		И Проверка2_1 = Ложь И Проверка2_2 = Ложь Тогда
		СписокСвободныхСтолов = Новый СписокЗначений;
		Для М = 1 По КолСтолов Цикл
			СписокСвободныхСтолов.Добавить(М,"Стол № "+М);
		КонецЦикла;
		//посмотрим какие столы заняты
		Для каждого ТекСтр Из ТаблицаМониторинга Цикл 
			Если ТекСтр.НомерСтола = 0 Тогда
				Продолжить;
			КонецЕсли; 
			Искомый = СписокСвободныхСтолов.НайтиПоЗначению(ТекСтр.НомерСтола);
			Если Искомый <> Неопределено Тогда
				СписокСвободныхСтолов.Удалить(Искомый);	
			КонецЕсли; 
		КонецЦикла; 
		Если СписокСвободныхСтолов.Количество() = 0 Тогда
			ПоказатьПредупреждение(Неопределено, "Нет свободных столов!");
			Возврат;
		КонецЕсли;

		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТаблицаМониторингаНомерСтолаНачалоВыбораИзСпискаЗавершение",
			ЭтотОбъект), СписокСвободныхСтолов, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьУчастникаНаВызовПоМониторингу(СтрокиМониторинга)
	
	УчастникВИгре = Ложь;
	
	Для Каждого ТекСтр Из СтрокиМониторинга Цикл
		Если ТекСтр.Очки1 = 0 И ТекСтр.Очки2 = 0 И ТекСтр.НомерСтола > 0 Тогда //вызван за стол и играет
			УчастникВИгре = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат УчастникВИгре;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаМониторингаНомерСтолаНачалоВыбораИзСпискаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранныйСтол = ВыбранныйЭлемент;
	Если ВыбранныйСтол <> Неопределено Тогда
		ИскомаяИгра = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерИгры",НомерИгрыТабДока));
		Если ИскомаяИгра.Количество() > 0 Тогда
			ИскомаяИгра[0].НомерСтола 	= ВыбранныйСтол.Значение;
			ИскомаяИгра[0].ВремяВызова 	= КР_СерверныеСервер.ДатаСеанса();
			ДанныеДляВстреч = Новый Структура;
			ДанныеДляВстреч.Вставить("ИДФормы",Строка(ЭтотОбъект.УникальныйИдентификатор));
			ДанныеДляВстреч.Вставить("НомерСтола", ВыбранныйСтол.Значение);
			ДанныеДляВстреч.Вставить("Участник1",ИскомаяИгра[0].Участник1);
			ДанныеДляВстреч.Вставить("Участник2",ИскомаяИгра[0].Участник2);
			КР_КлиентскиеКлиент.ОбработатьВызовЗаСтолТекущиеИгры(ДанныеДляВстреч);
			ВывестиАктивностьСтолов();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаБегунки(Команда)
	
	ДанныеДляФормы = Новый Структура;
	ДанныеДляФормы.Вставить("ТабДок",ПолучитьТабличныйДокументПоБегункам());
	ДанныеДляФормы.Вставить("Заголовок","Бегунки");
	ДанныеДляФормы.Вставить("Ссылка",СсылкаНаДок.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ФормаВыводаНаПечать",ДанныеДляФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокументПоБегункам()
	
	КопияТаблицы = ТаблицаМониторинга.Выгрузить();
	КопияТаблицы.Колонки.Добавить("НомерПоПорядку");
	Сч = 0;
	Для каждого ТекСтр Из КопияТаблицы Цикл
		Сч = Сч + 1;
		ТекСтр.НомерПоПорядку = Сч;
	КонецЦикла; 
	
	Макет = Документы.ПроведениеСоревнования.ПолучитьМакет("Бегунки");
	
	ТабДокументБегунков = Новый ТабличныйДокумент;
	ТабДокументБегунков.АвтоМасштаб = Истина;
	ТабДокументБегунков.ПолеСверху = 0;
	ТабДокументБегунков.ПолеСлева = 0;
	ТабДокументБегунков.ПолеСнизу = 0;
	ТабДокументБегунков.ПолеСправа = 0;
	
	МассивДляПечати = Новый Массив;
	СЧБегунков = 0;
	Для каждого ТекСтрокаИгры Из КопияТаблицы Цикл
		//печатаем только те, которые полностью заполнены	
		Попытка
			ПервыйУчастникПары = ТекСтрокаИгры.Участник1;
		Исключение
			ПервыйУчастникПары = Неопределено;
		КонецПопытки; 
		Попытка
			ВторойУчастникПары = ТекСтрокаИгры.Участник2;
		Исключение
			ВторойУчастникПары = Неопределено;
		КонецПопытки; 
		Если ПервыйУчастникПары = Неопределено Или ВторойУчастникПары = Неопределено Тогда
			Продолжить; //нет смысла его печатать	
		КонецЕсли;
		Если ЗначениеЗаполнено(ПервыйУчастникПары) И ЗначениеЗаполнено(ВторойУчастникПары)
			И ТекСтрокаИгры.Очки1 = 0 И ТекСтрокаИгры.Очки2 = 0
			И ТекСтрокаИгры.ТехническоеП = Ложь И ТекСтрокаИгры.ТехническоеВ = Ложь Тогда
			
			ПервыйБегунок	= Макет.ПолучитьОбласть("ГоризонтальнаяОбластьБегунка | ПервыйБегунок");
			ПервыйБегунок.Параметры.ДатаВремя 				= Формат(КР_СерверныеСервер.ДатаСеанса(), "ДФ=dd.MM.yy");
			ПервыйБегунок.Параметры.НазваниеСоревнования	= СсылкаНаДок.НазваниеСоревнования;
			ПервыйБегунок.Параметры.НомУчастника1			= "";
			ПервыйБегунок.Параметры.НомУчастника2			= "";
			ПервыйБегунок.Параметры.НомерМатча				= ТекСтрокаИгры.НомерПоПорядку;
			ПервыйБегунок.Параметры.НомерТура				= НомерТура;
			ПервыйБегунок.Параметры.Участник1				= КР_ОбщийКлиентСервер.СформироватьИмяИгрока(ПервыйУчастникПары);
			ПервыйБегунок.Параметры.Участник2				= КР_ОбщийКлиентСервер.СформироватьИмяИгрока(ВторойУчастникПары);
			
			МассивДляПечати.Добавить(ПервыйБегунок);
			Если МассивДляПечати.Количество() = 2 Тогда
				Если СЧБегунков = 5 Тогда
					ТабДокументБегунков.ВывестиГоризонтальныйРазделительСтраниц();
					СЧБегунков = 0;
				КонецЕсли;
				СЧБегунков = СЧБегунков + 1;;
				ТабДокументБегунков.Вывести(МассивДляПечати.Получить(0));
				ТабДокументБегунков.Присоединить(МассивДляПечати.Получить(1));
				МассивДляПечати.Очистить();
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	//выводим остаток
	Если МассивДляПечати.Количество() = 1 Тогда
		ТабДокументБегунков.Вывести(МассивДляПечати.Получить(0));
	КонецЕсли;
	
	Возврат ТабДокументБегунков;
	
КонецФункции

&НаКлиенте
Процедура КомандаПоказатьПротокол(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыводаНаПечать",Новый Структура("ТабДок,Заголовок,Ссылка",ТабДок,ТекстЗаголовкаТабДока,СсылкаНаДок.Ссылка),ЭтотОбъект,Новый УникальныйИдентификатор);
	
КонецПроцедуры

#Область Активность_Столов

&НаСервере
Процедура ВывестиАктивностьСтолов()
	
	Если КолСтолов > 0 Тогда
		КолПоГоризонтали = Константы.КоличествоСтоловПоГоризонтали.Получить();
		Если КолПоГоризонтали = 0 Тогда
			КолПоГоризонтали = 5;
		КонецЕсли; 
		
		АктивностьСтолов.Очистить();
		
		Макет = Документы.ПроведениеСоревнования.ПолучитьМакет("МониторСтолов");
		
		КопияУчастников = СсылкаНаДок.УчастникиПоЖеребьевке.Выгрузить(Новый Структура("НомерТура,РежимТура",НомерТура,РежимТура),"НомерИгры,Участник");
		
		пСчСтолов = 0;
		Для мСтол = 1 По КолСтолов Цикл
			
			пСчСтолов = пСчСтолов + 1;
			ИскомаяИграВМониторинге = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерСтола",мСтол));
			
			ОбластьСтола = Макет.ПолучитьОбласть("ГоризонтальСтолСетка | ВертикальСтол");
			ОбластьСтола.Параметры.НомерСтола		= мСтол;
			
			Если ИскомаяИграВМониторинге.Количество() > 0 Тогда// игра есть
				
				мПар1 	= КопияУчастников.Найти(ИскомаяИграВМониторинге[0].Участник1).НомерИгры;
				мПар2	= КопияУчастников.Найти(ИскомаяИграВМониторинге[0].Участник2).НомерИгры;
				
				Если мПар2 > мПар1 Тогда
					ОбластьСтола.Параметры.НомерУч1			= мПар1;
					ОбластьСтола.Параметры.Участник1			= КР_ОбщийКлиентСервер.СформироватьИмяИгрока(ИскомаяИграВМониторинге[0].Участник1.Наименование, ВыводитьПолноеФИО);
					ОбластьСтола.Параметры.НомерУч2			= мПар2;
					ОбластьСтола.Параметры.Участник2			= КР_ОбщийКлиентСервер.СформироватьИмяИгрока(ИскомаяИграВМониторинге[0].Участник2.Наименование, ВыводитьПолноеФИО);
				Иначе
					ОбластьСтола.Параметры.НомерУч1			= мПар2;
					ОбластьСтола.Параметры.Участник1			= КР_ОбщийКлиентСервер.СформироватьИмяИгрока(ИскомаяИграВМониторинге[0].Участник2.Наименование, ВыводитьПолноеФИО);
					ОбластьСтола.Параметры.НомерУч2			= мПар1;
					ОбластьСтола.Параметры.Участник2			= КР_ОбщийКлиентСервер.СформироватьИмяИгрока(ИскомаяИграВМониторинге[0].Участник1.Наименование, ВыводитьПолноеФИО);
				КонецЕсли; 
			КонецЕсли; 
			
			Если пСчСтолов = КолПоГоризонтали Тогда
				АктивностьСтолов.Присоединить(ОбластьСтола);
				пСчСтолов = 0;
			Иначе
				Если пСчСтолов = 1 Тогда
					АктивностьСтолов.Вывести(ОбластьСтола);
				Иначе
					АктивностьСтолов.Присоединить(ОбластьСтола);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АктивностьСтоловОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	//Расшифровка - это номер стола
	СтандартнаяОбработка = Ложь;
	Если Расшифровка > 0 Тогда
		ИскомыеДанныеВМониторинге = ТаблицаМониторинга.НайтиСтроки(Новый Структура("НомерСтола",Расшифровка));
		Если ИскомыеДанныеВМониторинге.Количество() > 0 Тогда
			
			Элементы.ТаблицаМониторинга.ТекущаяСтрока = ИскомыеДанныеВМониторинге[0].ПолучитьИдентификатор();
						
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура КомандаВыводитьПолноеФИО(Команда)
	
	Элементы.ФормаКомандаВыводитьПолноеФИО.Пометка = Не Элементы.ФормаКомандаВыводитьПолноеФИО.Пометка;
	ВыводитьПолноеФИО = Элементы.ФормаКомандаВыводитьПолноеФИО.Пометка;
	ОбновитьФИОВСеткеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФИОВСеткеНаСервере()
	
	Отбор = Новый Структура;
	Отбор.Вставить("РежимТура",РежимТура);
	Отбор.Вставить("НомерТура",НомерТура);
	МассивУчастниковТура = СсылкаНаДок.УчастникиПоЖеребьевке.НайтиСтроки(Отбор);
	//перезаполним соответствие представлений
	ЗаполнениеСоответствийИгроков(МассивУчастниковТура);
	
	ВыполнитьДействияПослеЗаписиИгры();
	ВывестиАктивностьСтолов();
	
КонецПроцедуры
 

